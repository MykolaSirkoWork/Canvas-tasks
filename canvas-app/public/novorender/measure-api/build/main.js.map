{
  "version": 3,
  "sources": ["../node_modules/comlink/src/comlink.ts", "../node_modules/gl-matrix/esm/common.js", "../node_modules/gl-matrix/esm/mat4.js", "../node_modules/gl-matrix/esm/vec3.js", "../node_modules/gl-matrix/esm/vec4.js", "../node_modules/gl-matrix/esm/vec2.js", "../src/measureError.ts", "../src/measureScene.ts", "../src/calculations2d.ts", "../src/drawobject_factorty.ts", "../src/pathRender.ts", "../src/measureApi.ts", "../src/measureEntity.ts", "../src/measureObject.ts", "../src/index.ts"],
  "sourcesContent": ["/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  EventSource,\n  Message,\n  MessageType,\n  PostMessageWithOrigin,\n  WireValue,\n  WireValueType,\n} from \"./protocol\";\nexport { Endpoint };\n\nexport const proxyMarker = Symbol(\"Comlink.proxy\");\nexport const createEndpoint = Symbol(\"Comlink.endpoint\");\nexport const releaseProxy = Symbol(\"Comlink.releaseProxy\");\n\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\n/**\n * Interface of values that were marked to be proxied with `comlink.proxy()`.\n * Can also be implemented by classes.\n */\nexport interface ProxyMarked {\n  [proxyMarker]: true;\n}\n\n/**\n * Takes a type and wraps it in a Promise, if it not already is one.\n * This is to avoid `Promise<Promise<T>>`.\n *\n * This is the inverse of `Unpromisify<T>`.\n */\ntype Promisify<T> = T extends Promise<unknown> ? T : Promise<T>;\n/**\n * Takes a type that may be Promise and unwraps the Promise type.\n * If `P` is not a Promise, it returns `P`.\n *\n * This is the inverse of `Promisify<T>`.\n */\ntype Unpromisify<P> = P extends Promise<infer T> ? T : P;\n\n/**\n * Takes the raw type of a remote property and returns the type that is visible to the local thread on the proxy.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions.\n * See https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype RemoteProperty<T> =\n  // If the value is a method, comlink will proxy it automatically.\n  // Objects are only proxied if they are marked to be proxied.\n  // Otherwise, the property is converted to a Promise that resolves the cloned value.\n  T extends Function | ProxyMarked ? Remote<T> : Promisify<T>;\n\n/**\n * Takes the raw type of a property as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This is the inverse of `RemoteProperty<T>`.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions. See\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype LocalProperty<T> = T extends Function | ProxyMarked\n  ? Local<T>\n  : Unpromisify<T>;\n\n/**\n * Proxies `T` if it is a `ProxyMarked`, clones it otherwise (as handled by structured cloning and transfer handlers).\n */\nexport type ProxyOrClone<T> = T extends ProxyMarked ? Remote<T> : T;\n/**\n * Inverse of `ProxyOrClone<T>`.\n */\nexport type UnproxyOrClone<T> = T extends RemoteObject<ProxyMarked>\n  ? Local<T>\n  : T;\n\n/**\n * Takes the raw type of a remote object in the other thread and returns the type as it is visible to the local thread\n * when proxied with `Comlink.proxy()`.\n *\n * This does not handle call signatures, which is handled by the more general `Remote<T>` type.\n *\n * @template T The raw type of a remote object as seen in the other thread.\n */\nexport type RemoteObject<T> = { [P in keyof T]: RemoteProperty<T[P]> };\n/**\n * Takes the type of an object as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This does not handle call signatures, which is handled by the more general `Local<T>` type.\n *\n * This is the inverse of `RemoteObject<T>`.\n *\n * @template T The type of a proxied object.\n */\nexport type LocalObject<T> = { [P in keyof T]: LocalProperty<T[P]> };\n\n/**\n * Additional special comlink methods available on each proxy returned by `Comlink.wrap()`.\n */\nexport interface ProxyMethods {\n  [createEndpoint]: () => Promise<MessagePort>;\n  [releaseProxy]: () => void;\n}\n\n/**\n * Takes the raw type of a remote object, function or class in the other thread and returns the type as it is visible to\n * the local thread from the proxy return value of `Comlink.wrap()` or `Comlink.proxy()`.\n */\nexport type Remote<T> =\n  // Handle properties\n  RemoteObject<T> &\n    // Handle call signature (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: UnproxyOrClone<TArguments[I]> }\n        ) => Promisify<ProxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: UnproxyOrClone<TArguments[I]>;\n            }\n          ): Promisify<Remote<TInstance>>;\n        }\n      : unknown) &\n    // Include additional special comlink methods available on the proxy.\n    ProxyMethods;\n\n/**\n * Expresses that a type can be either a sync or async.\n */\ntype MaybePromise<T> = Promise<T> | T;\n\n/**\n * Takes the raw type of a remote object, function or class as a remote thread would see it through a proxy (e.g. when\n * passed in as a function argument) and returns the type the local thread has to supply.\n *\n * This is the inverse of `Remote<T>`. It takes a `Remote<T>` and returns its original input `T`.\n */\nexport type Local<T> =\n  // Omit the special proxy methods (they don't need to be supplied, comlink adds them)\n  Omit<LocalObject<T>, keyof ProxyMethods> &\n    // Handle call signatures (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: ProxyOrClone<TArguments[I]> }\n        ) => // The raw function could either be sync or async, but is always proxied automatically\n        MaybePromise<UnproxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: ProxyOrClone<TArguments[I]>;\n            }\n          ): // The raw constructor could either be sync or async, but is always proxied automatically\n          MaybePromise<Local<Unpromisify<TInstance>>>;\n        }\n      : unknown);\n\nconst isObject = (val: unknown): val is object =>\n  (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n\n/**\n * Customizes the serialization of certain values as determined by `canHandle()`.\n *\n * @template T The input type being handled by this transfer handler.\n * @template S The serialized type sent over the wire.\n */\nexport interface TransferHandler<T, S> {\n  /**\n   * Gets called for every value to determine whether this transfer handler\n   * should serialize the value, which includes checking that it is of the right\n   * type (but can perform checks beyond that as well).\n   */\n  canHandle(value: unknown): value is T;\n\n  /**\n   * Gets called with the value if `canHandle()` returned `true` to produce a\n   * value that can be sent in a message, consisting of structured-cloneable\n   * values and/or transferrable objects.\n   */\n  serialize(value: T): [S, Transferable[]];\n\n  /**\n   * Gets called to deserialize an incoming value that was serialized in the\n   * other thread with this transfer handler (known through the name it was\n   * registered under).\n   */\n  deserialize(value: S): T;\n}\n\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler: TransferHandler<object, MessagePort> = {\n  canHandle: (val): val is ProxyMarked =>\n    isObject(val) && (val as ProxyMarked)[proxyMarker],\n  serialize(obj) {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  },\n};\n\ninterface ThrownValue {\n  [throwMarker]: unknown; // just needs to be present\n  value: unknown;\n}\ntype SerializedThrownValue =\n  | { isError: true; value: Error }\n  | { isError: false; value: unknown };\n\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler: TransferHandler<\n  ThrownValue,\n  SerializedThrownValue\n> = {\n  canHandle: (value): value is ThrownValue =>\n    isObject(value) && throwMarker in value,\n  serialize({ value }) {\n    let serialized: SerializedThrownValue;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack,\n        },\n      };\n    } else {\n      serialized = { isError: false, value };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(\n        new Error(serialized.value.message),\n        serialized.value\n      );\n    }\n    throw serialized.value;\n  },\n};\n\n/**\n * Allows customizing the serialization of certain values.\n */\nexport const transferHandlers = new Map<\n  string,\n  TransferHandler<unknown, unknown>\n>([\n  [\"proxy\", proxyTransferHandler],\n  [\"throw\", throwTransferHandler],\n]);\n\nexport function expose(obj: any, ep: Endpoint = self as any) {\n  ep.addEventListener(\"message\", function callback(ev: MessageEvent) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    const { id, type, path } = {\n      path: [] as string[],\n      ...(ev.data as Message),\n    };\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case MessageType.GET:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case MessageType.SET:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case MessageType.APPLY:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case MessageType.CONSTRUCT:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case MessageType.ENDPOINT:\n          {\n            const { port1, port2 } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case MessageType.RELEASE:\n          {\n            returnValue = undefined;\n          }\n          break;\n        default:\n          return;\n      }\n    } catch (value) {\n      returnValue = { value, [throwMarker]: 0 };\n    }\n    Promise.resolve(returnValue)\n      .catch((value) => {\n        return { value, [throwMarker]: 0 };\n      })\n      .then((returnValue) => {\n        const [wireValue, transferables] = toWireValue(returnValue);\n        ep.postMessage({ ...wireValue, id }, transferables);\n        if (type === MessageType.RELEASE) {\n          // detach and deactive after sending release response above.\n          ep.removeEventListener(\"message\", callback as any);\n          closeEndPoint(ep);\n        }\n      });\n  } as any);\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint: Endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nexport function wrap<T>(ep: Endpoint, target?: any): Remote<T> {\n  return createProxy<T>(ep, [], target) as any;\n}\n\nfunction throwIfProxyReleased(isReleased: boolean) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction createProxy<T>(\n  ep: Endpoint,\n  path: (string | number | symbol)[] = [],\n  target: object = function () {}\n): Remote<T> {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          return requestResponseMessage(ep, {\n            type: MessageType.RELEASE,\n            path: path.map((p) => p.toString()),\n          }).then(() => {\n            closeEndPoint(ep);\n            isProxyReleased = true;\n          });\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return { then: () => proxy };\n        }\n        const r = requestResponseMessage(ep, {\n          type: MessageType.GET,\n          path: path.map((p) => p.toString()),\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously \u00AF\\_(\u30C4)_/\u00AF\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.SET,\n          path: [...path, prop].map((p) => p.toString()),\n          value,\n        },\n        transferables\n      ).then(fromWireValue) as any;\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if ((last as any) === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: MessageType.ENDPOINT,\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn\u2019t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.APPLY,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.CONSTRUCT,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n  });\n  return proxy as any;\n}\n\nfunction myFlat<T>(arr: (T | T[])[]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList: any[]): [WireValue[], Transferable[]] {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer<T>(obj: T, transfers: Transferable[]): T {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport function proxy<T>(obj: T): T & ProxyMarked {\n  return Object.assign(obj, { [proxyMarker]: true }) as any;\n}\n\nexport function windowEndpoint(\n  w: PostMessageWithOrigin,\n  context: EventSource = self,\n  targetOrigin = \"*\"\n): Endpoint {\n  return {\n    postMessage: (msg: any, transferables: Transferable[]) =>\n      w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context),\n  };\n}\n\nfunction toWireValue(value: any): [WireValue, Transferable[]] {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [\n        {\n          type: WireValueType.HANDLER,\n          name,\n          value: serializedValue,\n        },\n        transferables,\n      ];\n    }\n  }\n  return [\n    {\n      type: WireValueType.RAW,\n      value,\n    },\n    transferCache.get(value) || [],\n  ];\n}\n\nfunction fromWireValue(value: WireValue): any {\n  switch (value.type) {\n    case WireValueType.HANDLER:\n      return transferHandlers.get(value.name)!.deserialize(value.value);\n    case WireValueType.RAW:\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(\n  ep: Endpoint,\n  msg: Message,\n  transfers?: Transferable[]\n): Promise<WireValue> {\n  return new Promise((resolve) => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev: MessageEvent) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n      ep.removeEventListener(\"message\", l as any);\n      resolve(ev.data);\n    } as any);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage({ id, ...msg }, transfers);\n  });\n}\n\nfunction generateUUID(): string {\n  return new Array(4)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n    .join(\"-\");\n}\n", "/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};", "import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();", "import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();", "import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();", "export class MeasureError extends Error {\r\n  constructor(readonly type: string, message: string) {\r\n    super(message);\r\n  }\r\n}\r\n", "import type * as Comlink from \"comlink\";\r\nimport {\r\n  glMatrix,\r\n  ReadonlyVec2,\r\n  ReadonlyVec3,\r\n  vec2,\r\n  vec3,\r\n} from \"gl-matrix\";\r\nimport type * as Public from \"@novorender/webgl-api\";\r\nimport type { Service } from \"./worker\";\r\nimport { MeasureError } from \"./measureError\";\r\nimport type { ParametricProduct } from \"./worker/parametric_product\";\r\nimport type {\r\n  BrepStatus,\r\n  CameraValues,\r\n  CollisionValues,\r\n  CrossSlope,\r\n  DrawObject,\r\n  DuoMeasurementValues,\r\n  FollowParametricObject,\r\n  LineStripMeasureValues,\r\n  ManholeMeasureValues,\r\n  MeasureEntity,\r\n  MeasurementValues,\r\n  MeasureSettings,\r\n  ParameterBounds,\r\n  Profile,\r\n  RoadCrossSection,\r\n  RoadProfiles,\r\n  SelectedEntity,\r\n  SnapTolerance,\r\n} from \"@novorender/measure-api\";\r\nglMatrix.setMatrixArrayType(Array);\r\n\r\ntype MeasureService = Comlink.Remote<Service>;\r\n\r\n\r\n/** Scene with objects being measured. Brep files are required*/\r\nexport class MeasureScene {\r\n  readonly workerScene;\r\n  constructor(readonly assetUrl: URL, readonly measureService: MeasureService) {\r\n    this.workerScene = this.measureService.createMeasureTool(\r\n      assetUrl.toString()\r\n    );\r\n  }\r\n\r\n  private async measurePair(\r\n    a: MeasureEntity,\r\n    b: MeasureEntity,\r\n    settingA?: MeasureSettings,\r\n    settingB?: MeasureSettings\r\n  ) {\r\n    if (a.drawKind == \"vertex\") {\r\n      if (b.drawKind == \"vertex\") {\r\n        return this.pointToPoint(a.parameter as vec3, b.parameter as vec3);\r\n      }\r\n      return this.measureToPoint(b, a.parameter as vec3, settingB);\r\n    }\r\n    if (b.drawKind == \"vertex\") {\r\n      return this.measureToPoint(a, b.parameter as vec3, settingA);\r\n    }\r\n\r\n    const workerScene = await this.workerScene;\r\n    const entities = [\r\n      { object: a, settings: settingA },\r\n      { object: b, settings: settingB },\r\n    ];\r\n    entities.sort((a, b) => a.object.drawKind.localeCompare(b.object.drawKind));\r\n    const [A, B] = entities;\r\n    const kindCombo = `${A.object.drawKind}_${B.object.drawKind}`;\r\n    switch (kindCombo) {\r\n      case \"curveSegment_curveSegment\":\r\n        return await workerScene.segmentToSegmentMeasure(\r\n          A.object.ObjectId,\r\n          A.object.pathIndex,\r\n          A.object.instanceIndex,\r\n          B.object.ObjectId,\r\n          B.object.pathIndex,\r\n          B.object.instanceIndex\r\n        );\r\n      case \"curveSegment_edge\":\r\n        return await workerScene.segmentToEdgeMeasure(\r\n          A.object.ObjectId,\r\n          A.object.pathIndex,\r\n          A.object.instanceIndex,\r\n          B.object.ObjectId,\r\n          B.object.pathIndex,\r\n          B.object.instanceIndex\r\n        );\r\n      case \"curveSegment_face\":\r\n        return await workerScene.segmentToFaceMeasure(\r\n          A.object.ObjectId,\r\n          A.object.pathIndex,\r\n          A.object.instanceIndex,\r\n          B.object.ObjectId,\r\n          B.object.pathIndex,\r\n          B.object.instanceIndex,\r\n          B.settings\r\n        );\r\n      case \"edge_edge\":\r\n        return await workerScene.edgeToEdgeMeasure(\r\n          a.ObjectId,\r\n          a.pathIndex,\r\n          a.instanceIndex,\r\n          b.ObjectId,\r\n          b.pathIndex,\r\n          b.instanceIndex\r\n        );\r\n      case \"edge_face\":\r\n        return await workerScene.edgeToFaceMeasure(\r\n          A.object.ObjectId,\r\n          A.object.pathIndex,\r\n          A.object.instanceIndex,\r\n          B.object.ObjectId,\r\n          B.object.pathIndex,\r\n          B.object.instanceIndex,\r\n          B.settings\r\n        );\r\n      case \"face_face\":\r\n        return await workerScene.faceToFaceMeasure(\r\n          a.ObjectId,\r\n          a.pathIndex,\r\n          a.instanceIndex,\r\n          b.ObjectId,\r\n          b.pathIndex,\r\n          b.instanceIndex,\r\n          A.settings,\r\n          B.settings\r\n        );\r\n    }\r\n  }\r\n\r\n  private async measureSingle(a: MeasureEntity, setting?: MeasureSettings) {\r\n    const workerScene = await this.workerScene;\r\n    switch (a.drawKind) {\r\n      case \"curveSegment\":\r\n        return await workerScene.getCurveValues(\r\n          a.ObjectId,\r\n          a.pathIndex,\r\n          a.instanceIndex,\r\n          \"curveSegment\"\r\n        );\r\n      case \"edge\":\r\n        return await workerScene.getCurveValues(\r\n          a.ObjectId,\r\n          a.pathIndex,\r\n          a.instanceIndex,\r\n          \"edge\"\r\n        );\r\n      case \"face\":\r\n        return await workerScene.getFaceValues(\r\n          a.ObjectId,\r\n          a.pathIndex,\r\n          a.instanceIndex,\r\n          setting\r\n        );\r\n    }\r\n  }\r\n\r\n  /** Measure objet, if b is undefined then single measure values are returned else the measurement between 2 objects*/\r\n  async measure(\r\n    a: MeasureEntity,\r\n    b?: MeasureEntity,\r\n    settingA?: MeasureSettings,\r\n    settingB?: MeasureSettings\r\n  ): Promise<MeasurementValues | undefined> {\r\n    return b\r\n      ? await this.measurePair(a, b, settingA, settingB)\r\n      : await this.measureSingle(a, settingA);\r\n  }\r\n\r\n  /** Measure distance between a measurement object an a 3d point*/\r\n  async measureToPoint(\r\n    a: MeasureEntity,\r\n    b: ReadonlyVec3,\r\n    setting?: MeasureSettings\r\n  ): Promise<DuoMeasurementValues | undefined> {\r\n    const point = vec3.copy(vec3.create(), b);\r\n    if (a.drawKind == \"vertex\") {\r\n      return this.pointToPoint(a.parameter as vec3, point);\r\n    }\r\n    const workerScene = await this.workerScene;\r\n    switch (a.drawKind) {\r\n      case \"curveSegment\":\r\n        return await workerScene.segmentToPointMeasure(\r\n          a.ObjectId,\r\n          a.pathIndex,\r\n          a.instanceIndex,\r\n          point\r\n        );\r\n      case \"edge\":\r\n        return await workerScene.edgeToPointMeasure(\r\n          a.ObjectId,\r\n          a.pathIndex,\r\n          a.instanceIndex,\r\n          point\r\n        );\r\n      case \"face\":\r\n        return await workerScene.faceToPointMeasure(\r\n          a.ObjectId,\r\n          a.pathIndex,\r\n          a.instanceIndex,\r\n          point,\r\n          setting\r\n        );\r\n    }\r\n  }\r\n\r\n  /** Measure distance between 2 points*/\r\n  pointToPoint(a: ReadonlyVec3, b: ReadonlyVec3): DuoMeasurementValues {\r\n    const diff = vec3.sub(vec3.create(), a, b);\r\n    return {\r\n      drawKind: \"measureResult\",\r\n      distance: vec3.len(diff),\r\n      distanceX: Math.abs(diff[0]),\r\n      distanceY: Math.abs(diff[1]),\r\n      distanceZ: Math.abs(diff[2]),\r\n      measureInfoA: { point: vec3.copy(vec3.create(), a) },\r\n      measureInfoB: { point: vec3.copy(vec3.create(), b) }\r\n    };\r\n  }\r\n\r\n  async collision(\r\n    a: SelectedEntity,\r\n    b: SelectedEntity,\r\n    setting?: MeasureSettings\r\n  ): Promise<CollisionValues | undefined> {\r\n    if (a.drawKind == \"face\" && b.drawKind == \"face\") {\r\n      const workerScene = await this.workerScene;\r\n      return await workerScene.faceToFaceCollision(a.ObjectId,\r\n        a.pathIndex,\r\n        a.instanceIndex,\r\n        b.ObjectId,\r\n        b.pathIndex,\r\n        b.instanceIndex,\r\n        setting)\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n\r\n  /** Get suggested camea values for selected object\r\n   * For cylinder values snap to the closest axis on the cylinder*/\r\n  async getCameraValues(\r\n    a: SelectedEntity,\r\n    cameraDir: vec3\r\n  ): Promise<CameraValues | undefined> {\r\n    const workerScene = await this.workerScene;\r\n    return workerScene.getCameraValuesFromFace(\r\n      a.ObjectId,\r\n      a.pathIndex,\r\n      a.instanceIndex,\r\n      cameraDir\r\n    );\r\n  }\r\n\r\n  /** Returns the measure entity for given object and location*/\r\n  async pickMeasureEntity(\r\n    id: Public.ObjectId,\r\n    selectionPosition: ReadonlyVec3,\r\n    tolerance?: SnapTolerance\r\n  ): Promise<{ entity: MeasureEntity, status: BrepStatus, connectionPoint?: vec3 }> {\r\n    const workerScene = await this.workerScene;\r\n    const pos = vec3.copy(vec3.create(), selectionPosition);\r\n    return await workerScene.pickEntity(id, pos, tolerance);\r\n  }\r\n\r\n  /** Returns the measure entity for given object and location if the object is current selected object*/\r\n  async pickMeasureEntityOnCurrentObject(\r\n    id: Public.ObjectId,\r\n    selectionPosition: ReadonlyVec3,\r\n    tolerance: SnapTolerance\r\n  ): Promise<{ entity: MeasureEntity | undefined, status: BrepStatus, connectionPoint?: vec3 }> {\r\n    const workerScene = await this.workerScene;\r\n    const pos = vec3.copy(vec3.create(), selectionPosition);\r\n    return await workerScene.pickEntityOnCurrentObject(id, pos, tolerance);\r\n  }\r\n\r\n  async swapCylinder(\r\n    entity: MeasureEntity,\r\n    to: \"inner\" | \"outer\"\r\n  ): Promise<MeasureEntity | undefined> {\r\n    if (entity.drawKind == \"face\") {\r\n      const workerScene = await this.workerScene;\r\n      const pathIdx = await workerScene.swapCylinder(\r\n        entity.ObjectId,\r\n        entity.pathIndex,\r\n        entity.instanceIndex,\r\n        to\r\n      );\r\n      if (pathIdx != undefined) {\r\n        return {\r\n          ...entity,\r\n          pathIndex: pathIdx\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private async followParametricEntity(\r\n    id: Public.ObjectId,\r\n    entity: SelectedEntity,\r\n    setting?: MeasureSettings\r\n  ) {\r\n    const workerScene = await this.workerScene;\r\n    let parameterBounds: ParameterBounds | undefined = undefined;\r\n    let emulatedCurve: { start: ReadonlyVec3; dir: ReadonlyVec3 } | undefined =\r\n      undefined;\r\n    let type: \"edge\" | \"cylinder\" | \"curve\" | undefined = undefined;\r\n    switch (entity.drawKind) {\r\n      case \"edge\": {\r\n        type = \"edge\";\r\n        parameterBounds = await workerScene.getParameterBoundsForCurve(\r\n          id,\r\n          entity.pathIndex,\r\n          \"edge\"\r\n        );\r\n        break;\r\n      }\r\n      case \"face\": {\r\n        const cylinderData = await workerScene.getCylinderCurve(\r\n          id,\r\n          entity.pathIndex,\r\n          entity.instanceIndex,\r\n          setting\r\n        );\r\n        if (cylinderData) {\r\n          type = \"cylinder\";\r\n          parameterBounds = cylinderData[0];\r\n          emulatedCurve = {\r\n            start: cylinderData[1][0],\r\n            dir: vec3.normalize(\r\n              vec3.create(),\r\n              vec3.subtract(\r\n                vec3.create(),\r\n                cylinderData[1][1],\r\n                cylinderData[1][0]\r\n              )\r\n            ),\r\n          };\r\n        }\r\n        break;\r\n      }\r\n      case \"curveSegment\": {\r\n        type = \"curve\";\r\n        parameterBounds = await workerScene.getParameterBoundsForCurve(\r\n          id,\r\n          entity.pathIndex,\r\n          \"curveSegment\"\r\n        );\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (parameterBounds && type) {\r\n      async function getCameraValues(\r\n        t: number\r\n      ): Promise<CameraValues | undefined> {\r\n        if (emulatedCurve) {\r\n          const param =\r\n            t < 0 ? 0 : t > parameterBounds!.end ? parameterBounds!.end : t;\r\n          return {\r\n            position: vec3.scaleAndAdd(\r\n              vec3.create(),\r\n              emulatedCurve.start,\r\n              emulatedCurve.dir,\r\n              param\r\n            ),\r\n            normal: vec3.negate(vec3.create(), emulatedCurve.dir),\r\n          };\r\n        }\r\n        const curveVaues = await workerScene.evalCurve(\r\n          id,\r\n          entity!.pathIndex,\r\n          entity!.instanceIndex,\r\n          t,\r\n          entity!.drawKind == \"edge\" ? \"edge\" : \"curveSegment\"\r\n        );\r\n        if (curveVaues) {\r\n          return { position: curveVaues[0], normal: curveVaues[1] };\r\n        }\r\n      }\r\n      const selectedEntity: MeasureEntity = {\r\n        ...entity,\r\n        ObjectId: id,\r\n        drawKind: entity.drawKind,\r\n      };\r\n      return {\r\n        type,\r\n        ids: [id],\r\n        selectedEntity,\r\n        parameterBounds,\r\n        getCameraValues,\r\n      };\r\n    }\r\n  }\r\n\r\n  async followParametricObjectFromPosition(\r\n    id: Public.ObjectId,\r\n    selectionPosition: ReadonlyVec3,\r\n    setting?: MeasureSettings\r\n  ): Promise<FollowParametricObject | undefined> {\r\n    const workerScene = await this.workerScene;\r\n    const pos = vec3.copy(vec3.create(), selectionPosition);\r\n    const pickedEntity = await workerScene.pickEntity(id, pos);\r\n    if (pickedEntity.entity && pickedEntity.entity.drawKind != \"vertex\") {\r\n      return this.followParametricEntity(id, pickedEntity.entity, setting);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  async followParametricObjects(\r\n    ids: Public.ObjectId[],\r\n    setting?: MeasureSettings\r\n  ): Promise<FollowParametricObject | undefined> {\r\n    const workerScene = await this.workerScene;\r\n    if (ids.length == 1) {\r\n      const entity = await workerScene.viableFollowPathEntity(ids[0]);\r\n      if (entity != undefined && entity.drawKind != \"vertex\") {\r\n        return this.followParametricEntity(ids[0], entity);\r\n      }\r\n    }\r\n\r\n    const lineStrip = await workerScene.getLineStripFromCylinders(ids, setting);\r\n    if (lineStrip.length > 1) {\r\n      let len = 0;\r\n      for (let i = 1; i < lineStrip.length; ++i) {\r\n        len += vec3.dist(lineStrip[i - 1], lineStrip[i]);\r\n      }\r\n\r\n      const parameterBounds = { start: 0, end: len };\r\n      async function getCameraValues(\r\n        t: number\r\n      ): Promise<CameraValues | undefined> {\r\n        const param =\r\n          t < 0 ? 0 : t > parameterBounds!.end ? parameterBounds!.end : t;\r\n        let i = 1;\r\n        let length = 0;\r\n        let prevLength = 0;\r\n        let currLength = 0;\r\n        for (; i < lineStrip.length; ++i) {\r\n          currLength = vec3.dist(lineStrip[i - 1], lineStrip[i]);\r\n          length += currLength;\r\n          if (length > param) {\r\n            break;\r\n          }\r\n          prevLength = length;\r\n        }\r\n        if (i == lineStrip.length) {\r\n          const dir = vec3.subtract(\r\n            vec3.create(),\r\n            lineStrip[i - 2],\r\n            lineStrip[i - 1]\r\n          );\r\n          return {\r\n            position: lineStrip[i - 1],\r\n            normal: vec3.normalize(dir, dir),\r\n          };\r\n        }\r\n\r\n        const dir = vec3.subtract(\r\n          vec3.create(),\r\n          lineStrip[i - 1],\r\n          lineStrip[i]\r\n        );\r\n\r\n        return {\r\n          position: vec3.lerp(\r\n            vec3.create(),\r\n            lineStrip[i - 1],\r\n            lineStrip[i],\r\n            (param - prevLength) / currLength\r\n          ),\r\n          normal: vec3.normalize(dir, dir),\r\n        };\r\n      }\r\n\r\n      return {\r\n        type: lineStrip.length == 2 ? \"cylinder\" : \"cylinders\",\r\n        ids,\r\n        selectedEntity: undefined,\r\n        parameterBounds,\r\n        getCameraValues,\r\n      };\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  async getParametricProduct(\r\n    productId: number\r\n  ): Promise<ParametricProduct | undefined> {\r\n    const workerScene = await this.workerScene;\r\n    return await workerScene.getProductObject(productId);\r\n  }\r\n\r\n  async getProfileViewFromEntity(\r\n    entity: MeasureEntity,\r\n    setting?: MeasureSettings\r\n  ): Promise<Profile | undefined> {\r\n    const workerScene = await this.workerScene;\r\n    switch (entity.drawKind) {\r\n      case \"curveSegment\": {\r\n        return await workerScene.curveSegmentProfile(\r\n          entity.ObjectId,\r\n          entity.pathIndex,\r\n          entity.instanceIndex\r\n        );\r\n      }\r\n      case \"face\": {\r\n        return await workerScene.cylinderProfile(\r\n          entity.ObjectId,\r\n          entity.pathIndex,\r\n          entity.instanceIndex,\r\n          setting\r\n        );\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  async getProfileViewFromMultiSelect(\r\n    products: Public.ObjectId[],\r\n    setting?: MeasureSettings\r\n  ): Promise<Profile | undefined> {\r\n    const workerScene = await this.workerScene;\r\n    const profile = await workerScene.multiSelectProfile(products, setting);\r\n    if (typeof profile === \"string\") {\r\n      throw new MeasureError(\"Profile error\", profile);\r\n    }\r\n    return profile;\r\n  }\r\n\r\n  reverseProfile(inProfile: Profile): Profile {\r\n    const endParam =\r\n      inProfile.profilePoints[inProfile.profilePoints.length - 1][0];\r\n    const rProfile: ReadonlyVec2[] = [];\r\n    for (let i = inProfile.profilePoints.length - 1; i >= 0; --i) {\r\n      const p = inProfile.profilePoints[i];\r\n      rProfile.push(vec2.fromValues((p[0] - endParam) * -1, p[1]));\r\n    }\r\n    return {\r\n      profilePoints: rProfile,\r\n      slopes: inProfile.slopes.reverse(),\r\n      startElevation: inProfile.endElevation,\r\n      endElevation: inProfile.startElevation,\r\n      top: inProfile.top,\r\n      bottom: inProfile.bottom,\r\n    };\r\n  }\r\n\r\n  areaFromPolygon(\r\n    vertices: ReadonlyVec3[],\r\n    normals: ReadonlyVec3[]\r\n  ): { area: number | undefined; polygon: ReadonlyVec3[] } {\r\n    if (vertices.length == 0) {\r\n      return { area: undefined, polygon: [] };\r\n    }\r\n    if (vertices.length != normals.length) {\r\n      throw new MeasureError(\r\n        \"Area measurement\",\r\n        \"Number of normals and vertices needs to be equal\"\r\n      );\r\n    }\r\n    let useXYPlane = false;\r\n    const epsilon = 0.001;\r\n    const normal = normals[0];\r\n    for (let i = 1; i < normals.length; ++i) {\r\n      if (1 - Math.abs(vec3.dot(normal, normals[i])) > epsilon) {\r\n        useXYPlane = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (useXYPlane) {\r\n      let total = 0;\r\n      const polygon: ReadonlyVec3[] = [];\r\n      for (let i = 0; i < vertices.length; i++) {\r\n        let addX = vertices[i][0];\r\n        let addY = vertices[i == vertices.length - 1 ? 0 : i + 1][2];\r\n        let subX = vertices[i == vertices.length - 1 ? 0 : i + 1][0];\r\n        let subY = vertices[i][2];\r\n\r\n        total += addX * addY * 0.5;\r\n        total -= subX * subY * 0.5;\r\n        polygon.push(\r\n          vec3.fromValues(vertices[i][0], vertices[0][1], vertices[i][2])\r\n        );\r\n      }\r\n      return { area: Math.abs(total), polygon };\r\n    }\r\n\r\n    const polygon: ReadonlyVec3[] = [];\r\n    polygon.push(vertices[0]);\r\n    const vertex = vertices[0];\r\n    for (let i = 1; i < vertices.length; ++i) {\r\n      const v = vertices[i];\r\n      const vo = vec3.subtract(vec3.create(), v, vertex);\r\n      const dist = vec3.dot(vo, normal) * -1;\r\n      polygon.push(vec3.scaleAndAdd(vec3.create(), v, normal, dist));\r\n    }\r\n\r\n    if (polygon.length == 1) {\r\n      return { area: 0, polygon };\r\n    }\r\n    const xDir = vec3.subtract(vec3.create(), polygon[1], polygon[0]);\r\n    vec3.normalize(xDir, xDir);\r\n    const yDir = vec3.cross(vec3.create(), normal, xDir);\r\n    vec3.normalize(yDir, yDir);\r\n\r\n    const polygon2d: ReadonlyVec2[] = [];\r\n    polygon2d.push(vec2.fromValues(0, 0));\r\n    for (let i = 1; i < vertices.length; ++i) {\r\n      const p = polygon[i];\r\n      const po = vec3.subtract(vec3.create(), p, vertex);\r\n      polygon2d.push(vec2.fromValues(vec3.dot(po, xDir), vec3.dot(po, yDir)));\r\n    }\r\n\r\n    let total = 0;\r\n    for (let i = 0; i < polygon2d.length; i++) {\r\n      let addX = polygon2d[i][0];\r\n      let addY = polygon2d[i == vertices.length - 1 ? 0 : i + 1][1];\r\n      let subX = polygon2d[i == vertices.length - 1 ? 0 : i + 1][0];\r\n      let subY = polygon2d[i][1];\r\n\r\n      total += addX * addY * 0.5;\r\n      total -= subX * subY * 0.5;\r\n    }\r\n    return { area: Math.abs(total), polygon };\r\n  }\r\n\r\n  measureLineStrip(vertices: ReadonlyVec3[]): LineStripMeasureValues {\r\n    let totalLength = 0;\r\n    let segmentLengts: number[] = [];\r\n    let angles: number[] = [];\r\n    let prevSeg: ReadonlyVec3 | undefined = undefined;\r\n    for (let i = 1; i < vertices.length; ++i) {\r\n      const l = vec3.dist(vertices[i - 1], vertices[i]);\r\n      totalLength += l;\r\n      segmentLengts.push(l);\r\n      const dir = vec3.sub(vec3.create(), vertices[i], vertices[i - 1]);\r\n      vec3.normalize(dir, dir);\r\n      if (prevSeg != undefined) {\r\n        let angle = vec3.angle(prevSeg, dir);\r\n        if (angle > Math.PI) {\r\n          angle = Math.PI * 2 - angle;\r\n        }\r\n        angles.push(angle);\r\n      }\r\n      vec3.negate(dir, dir);\r\n      prevSeg = dir;\r\n    }\r\n\r\n    return { totalLength, linestrip: vertices, segmentLengts, angles };\r\n  }\r\n\r\n  async inspectObject(productId: number, objectType: \"manhole\"): Promise<ManholeMeasureValues | undefined> {\r\n    const workerScene = await this.workerScene;\r\n    return workerScene.getManholeValues(productId);\r\n  }\r\n\r\n  async getManholeDrawObject(entity: ManholeMeasureValues): Promise<DrawObject[]> {\r\n    const workerScene = await this.workerScene;\r\n    return workerScene.getManholeDrawObject(entity);\r\n  }\r\n\r\n  async getEntitiyDrawObjects(\r\n    entity: MeasureEntity,\r\n    setting?: MeasureSettings\r\n  ): Promise<DrawObject | undefined> {\r\n    const workerScene = await this.workerScene;\r\n\r\n    switch (entity.drawKind) {\r\n      case \"edge\": {\r\n        const wsVertices = await workerScene.getTesselatedEdge(\r\n          entity.ObjectId,\r\n          entity.pathIndex,\r\n          entity.instanceIndex\r\n        );\r\n        return {\r\n          kind: \"edge\", parts: [{ vertices3D: wsVertices, drawType: \"lines\" }]\r\n        };\r\n      }\r\n      case \"face\": {\r\n        const drawObjects = await workerScene.getFaceDrawObject(\r\n          entity.ObjectId,\r\n          entity.pathIndex,\r\n          entity.instanceIndex,\r\n          setting\r\n        );\r\n        return drawObjects;\r\n      }\r\n      case \"vertex\": {\r\n        return {\r\n          kind: \"vertex\",\r\n          parts: [{ vertices3D: [entity.parameter as vec3], drawType: \"vertex\" }]\r\n        };\r\n      }\r\n      case \"curveSegment\": {\r\n        const wsVertices = await workerScene.tesselateCurveSegment(\r\n          entity.ObjectId,\r\n          entity.pathIndex,\r\n          entity.instanceIndex\r\n        );\r\n        return {\r\n          kind: \"curveSegment\",\r\n          parts: [{ vertices3D: wsVertices, drawType: \"lines\" }]\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  async getRoadProfile(roadId: string): Promise<RoadProfiles | undefined> {\r\n    const workerScene = await this.workerScene;\r\n    return workerScene.getRoadProfile(roadId);\r\n  }\r\n\r\n  async getCrossSlope(roadId: string): Promise<CrossSlope | undefined> {\r\n    const workerScene = await this.workerScene;\r\n    return workerScene.getRoadCrossSlope(roadId);\r\n  }\r\n\r\n  async getCrossSections(roadIds: string[], profileNumber: number): Promise<RoadCrossSection[]> {\r\n    const workerScene = await this.workerScene;\r\n    const sections = await Promise.all(roadIds.map((rId) => workerScene.getCrossSection(rId, profileNumber)));\r\n    const s = sections.filter(s => s != undefined);\r\n    return s as RoadCrossSection[];\r\n  }\r\n\r\n  // async prepareForLengthProfile(segments: {\r\n  //   id: Public.ObjectId,\r\n  //   curveSegmentIdx: number,\r\n  //   instanceIdx: number,\r\n  //   name: string\r\n  // }[]) {\r\n  //   const workerScene = await this.workerScene;\r\n  //   return workerScene.prepareForLengthProfile(segments);\r\n  // }\r\n\r\n}\r\n\r\nexport async function loadScene(\r\n  measureService: MeasureService,\r\n  assetsUrl: URL\r\n) {\r\n  return new MeasureScene(assetsUrl, measureService);\r\n}", "import { ReadonlyVec2, vec2, vec3 } from \"gl-matrix\";\r\n\r\n\r\nexport interface Intersection2d {\r\n    t: number,\r\n    u: number,\r\n    p: ReadonlyVec2\r\n}\r\n\r\nexport function lineSeg2dIntersection(lineA: { start: ReadonlyVec2, end: ReadonlyVec2 }, lineB: { start: ReadonlyVec2, end: ReadonlyVec2 }): Intersection2d | undefined {\r\n\r\n    const dirA = vec2.sub(vec2.create(), lineA.end, lineA.start);\r\n    const dirB = vec2.sub(vec2.create(), lineB.end, lineB.start);\r\n\r\n    const axb = dirA[0] * dirB[1] - dirA[1] * dirB[0];\r\n    const startDir = vec2.sub(vec2.create(), lineB.start, lineA.start);\r\n    //const sxa = startDir[0] * dirA[1] - startDir[1] * dirA[0];\r\n\r\n    if (axb == 0) {\r\n        return undefined;\r\n    }\r\n\r\n    const t = (startDir[0] * dirB[1] - startDir[1] * dirB[0]) / axb;\r\n    const u = (startDir[0] * dirA[1] - startDir[1] * dirA[0]) / axb;\r\n\r\n    if ((0 <= t && t <= 1) && (0 <= u && u <= 1)) {\r\n        return {\r\n            p: vec2.scaleAndAdd(vec2.create(), lineA.start, dirA, t), t, u\r\n        }\r\n    }\r\n\r\n    return undefined;\r\n}", "import type { DrawObject, DrawPart, DrawProduct, DuoMeasurementValues } from \"@novorender/measure-api\";\r\nimport { ReadonlyVec2, ReadonlyVec3, vec2, vec3 } from \"gl-matrix\";\r\nimport type * as Public from \"@novorender/webgl-api\";\r\nimport { FillDrawInfo2D } from \"./pathRender\";\r\nimport { Intersection2d, lineSeg2dIntersection } from \"./calculations2d\";\r\n\r\nexport const SCREEN_SPACE_EPSILON = 0.000001;\r\n\r\nexport function getResultDrawObject(result: DuoMeasurementValues): DrawObject {\r\n    const parts: DrawPart[] = [];\r\n    if (result.measureInfoA?.point && result.measureInfoB?.point) {\r\n        const measurePoints = [result.measureInfoA?.point, result.measureInfoB?.point];\r\n        const flip = measurePoints[0][1] > measurePoints[1][1];\r\n        let pts = flip ? [measurePoints[1], measurePoints[0]] : [measurePoints[0], measurePoints[1]];\r\n        const diff = vec3.sub(vec3.create(), pts[0], pts[1]);\r\n        const measureLen = vec3.len(diff);\r\n        parts.push({ name: \"result\", text: measureLen.toFixed(3), drawType: \"lines\", vertices3D: [vec3.clone(measurePoints[0]), vec3.clone(measurePoints[1])] });\r\n\r\n        pts = [\r\n            pts[0],\r\n            vec3.fromValues(pts[1][0], pts[0][1], pts[0][2]),\r\n            vec3.fromValues(pts[1][0], pts[0][1], pts[1][2]),\r\n            pts[1],\r\n        ];\r\n\r\n        parts.push({ name: \"x-axis\", text: Math.abs(diff[0]).toFixed(3), drawType: \"lines\", vertices3D: [vec3.clone(pts[0]), vec3.clone(pts[1])] });\r\n        parts.push({ name: \"y-axis\", text: Math.abs(diff[2]).toFixed(3), drawType: \"lines\", vertices3D: [vec3.clone(pts[1]), vec3.clone(pts[2])] });\r\n        parts.push({ name: \"z-axis\", text: Math.abs(diff[1]).toFixed(3), drawType: \"lines\", vertices3D: [vec3.clone(pts[2]), vec3.clone(pts[3])] });\r\n\r\n\r\n        const planarDiff = vec2.len(vec2.fromValues(diff[0], diff[2]));\r\n        const xyPt1 = vec3.fromValues(pts[0][0], Math.min(pts[0][1], pts[3][1]), pts[0][2]);\r\n        const xyPt2 = vec3.fromValues(pts[3][0], Math.min(pts[0][1], pts[3][1]), pts[3][2]);\r\n        parts.push({ name: \"xy-plane\", text: planarDiff.toFixed(3), drawType: \"lines\", vertices3D: [xyPt1, xyPt2] });\r\n\r\n        //Angles:\r\n        const zDiff = vec3.sub(vec3.create(), pts[2], pts[3]);\r\n        const angle = vec3.angle(diff, zDiff) * (180 / Math.PI);\r\n        if (angle > 0.1) {\r\n            const fromP = flip ? vec3.clone(measurePoints[1]) : vec3.clone(measurePoints[0]);\r\n            const toP = vec3.clone(pts[2]);\r\n            parts.push({ name: \"z-angle\", text: angle.toFixed(1) + \"\u00B0\", drawType: \"angle\", vertices3D: [vec3.clone(pts[3]), fromP, toP] });\r\n        }\r\n\r\n        const xzDiff = vec3.sub(vec3.create(), xyPt1, xyPt2);\r\n        const xzAngle = vec3.angle(diff, xzDiff) * (180 / Math.PI);\r\n        if (xzAngle > 0.1) {\r\n            const fromP = flip ? vec3.clone(measurePoints[0]) : vec3.clone(measurePoints[1]);\r\n            parts.push({ name: \"xz-angle\", text: xzAngle.toFixed(1) + \"\u00B0\", drawType: \"angle\", vertices3D: [vec3.clone(xyPt1), fromP, vec3.clone(xyPt2)] });\r\n        }\r\n    }\r\n\r\n    if (result.angle) {\r\n        parts.push({\r\n            name: \"cylinder-angle\", text: (result.angle.radians * (180 / Math.PI)).toFixed(1) + \"\u00B0\", drawType: \"angle\",\r\n            vertices3D: [vec3.clone(result.angle.angleDrawInfo[0]), vec3.clone(result.angle.angleDrawInfo[1]), vec3.clone(result.angle.angleDrawInfo[2])]\r\n        });\r\n        if (result.angle.additionalLine) {\r\n            parts.push({ name: \"cylinder-angle-line\", drawType: \"lines\", vertices3D: [vec3.clone(result.angle.additionalLine[0]), vec3.clone(result.angle.additionalLine[1])] });\r\n        }\r\n    }\r\n\r\n    if (result.normalPoints) {\r\n        const dist = vec3.len(vec3.sub(vec3.create(), result.normalPoints[0], result.normalPoints[1]));\r\n        parts.push({ name: \"normal\", text: dist.toFixed(3), drawType: \"lines\", vertices3D: [vec3.clone(result.normalPoints[0]), vec3.clone(result.normalPoints[1])] });\r\n    }\r\n    return { parts, kind: \"complex\" }\r\n}\r\n\r\nexport function getDrawObjectFromPointArray(view: Public.View, points: ReadonlyVec3[], closed: boolean, angles: boolean, generateLineLabels: boolean): DrawProduct | undefined {\r\n    if (points.length === 0) {\r\n        return undefined;\r\n    }\r\n    const parts: DrawPart[] = [];\r\n    if (points.length === 1) {\r\n        parts.push({ drawType: \"vertex\", vertices3D: points });\r\n    } else {\r\n        let text: string[][] | undefined = undefined;\r\n        if (generateLineLabels) {\r\n            const labels: string[] = [];\r\n            for (let i = 1; i < points.length; ++i) {\r\n                labels.push(vec3.dist(points[i - 1], points[i]).toFixed(3));\r\n            }\r\n            text = [labels];\r\n        }\r\n        parts.push({ drawType: closed ? \"filled\" : \"lines\", vertices3D: points, text });\r\n    }\r\n\r\n    const drawObjects: DrawObject[] = [];\r\n    drawObjects.push({ kind: \"complex\", parts });\r\n    if (angles) {\r\n        const endIdx = closed ? points.length : points.length - 1;\r\n        for (let i = closed ? 0 : 1; i < endIdx; ++i) {\r\n            const anglePt = points[i];\r\n            const fromPIdx = i === 0 ? points.length - 1 : i - 1;\r\n            const toPIdx = i === points.length - 1 ? 0 : i + 1;\r\n            const fromP = points[fromPIdx];\r\n            const toP = points[toPIdx];\r\n            const diffA = vec3.sub(vec3.create(), points[fromPIdx], anglePt);\r\n            const diffB = vec3.sub(vec3.create(), points[toPIdx], anglePt);\r\n            const angle = vec3.angle(diffA, diffB) * (180 / Math.PI);\r\n            if (angle > 0.1) {\r\n                parts.push({ text: angle.toFixed(1) + \"\u00B0\", drawType: \"angle\", vertices3D: [vec3.clone(anglePt), vec3.clone(fromP), vec3.clone(toP)] });\r\n            }\r\n        }\r\n    }\r\n\r\n    FillDrawInfo2D(view, drawObjects);\r\n    return { kind: \"basic\", objects: drawObjects };\r\n}\r\n\r\nexport function getDrawTextObject(view: Public.View, points: ReadonlyVec3[], text: string): DrawProduct | undefined {\r\n    if (points.length === 0) {\r\n        return undefined;\r\n    }\r\n    const parts: DrawPart[] = [];\r\n    parts.push({ drawType: \"text\", vertices3D: points, text });\r\n\r\n    const drawObjects: DrawObject[] = [];\r\n    drawObjects.push({ kind: \"complex\", parts });\r\n\r\n    FillDrawInfo2D(view, drawObjects);\r\n    return { kind: \"basic\", objects: drawObjects };\r\n}\r\n\r\nexport function get2dNormal(object: DrawProduct, line: { start: ReadonlyVec2, end: ReadonlyVec2 }): { normal: ReadonlyVec2, position: ReadonlyVec2 } | undefined {\r\n    if (object.kind != \"basic\") {\r\n        return undefined;\r\n    }\r\n    const intersections: {\r\n        intersection: Intersection2d, line: { start: ReadonlyVec2, end: ReadonlyVec2 }\r\n    }[] = [];\r\n    const emptyVertex = vec3.create();\r\n    object.objects.forEach(drawobj => {\r\n        if (drawobj.kind == \"complex\" || drawobj.kind == \"curveSegment\" || drawobj.kind == \"edge\") {\r\n            drawobj.parts.forEach(part => {\r\n                if (part.vertices2D && (part.drawType == \"lines\" || part.drawType == \"curveSegment\" || part.drawType == \"filled\")) {\r\n                    for (let i = 1; i < part.vertices2D.length; ++i) {\r\n                        if (vec3.equals(part.vertices3D[i - 1], emptyVertex) || vec3.equals(part.vertices3D[i], emptyVertex)) {\r\n                            continue;\r\n                        }\r\n                        const lineB = { start: part.vertices2D[i - 1], end: part.vertices2D[i] };\r\n                        const intersection = lineSeg2dIntersection(line, lineB);\r\n                        if (intersection) {\r\n                            intersections.push({ intersection, line: lineB });\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n    if (intersections.length > 0) {\r\n        intersections.sort((a, b) => a.intersection.t - b.intersection.t);\r\n        const line = intersections[0].line;\r\n        const dx = line.end[0] - line.start[0];\r\n        const dy = line.end[1] - line.start[1];\r\n        const normal = vec2.fromValues(-dy, dx);\r\n        vec2.normalize(normal, normal);\r\n        return {\r\n            normal, position: intersections[0].intersection.p\r\n        };\r\n    }\r\n    return undefined;\r\n}\r\n\r\n\r\nexport function getTraceDrawOject(objects: DrawProduct[], line: { start: ReadonlyVec2, end: ReadonlyVec2 }): DrawProduct {\r\n    if (objects.length > 1) {\r\n        const intersections: {\r\n            intersection: Intersection2d, point3d: ReadonlyVec3\r\n        }[] = [];\r\n        const emptyVertex = vec3.create();\r\n        objects.forEach(obj => {\r\n            if (obj.kind == \"basic\") {\r\n                obj.objects.forEach(drawobj => {\r\n                    if (drawobj.kind == \"complex\" || drawobj.kind == \"curveSegment\" || drawobj.kind == \"edge\") {\r\n                        drawobj.parts.forEach(part => {\r\n                            if (part.vertices2D && (part.drawType == \"lines\" || part.drawType == \"curveSegment\" || part.drawType == \"filled\")) {\r\n                                for (let i = 1; i < part.vertices2D.length; ++i) {\r\n                                    if (vec3.equals(part.vertices3D[i - 1], emptyVertex) || vec3.equals(part.vertices3D[i], emptyVertex)) {\r\n                                        continue;\r\n                                    }\r\n                                    const lineB = { start: part.vertices2D[i - 1], end: part.vertices2D[i] };\r\n                                    const intersection = lineSeg2dIntersection(line, lineB);\r\n                                    if (intersection) {\r\n                                        const dir = vec3.sub(vec3.create(), part.vertices3D[i], part.vertices3D[i - 1]);\r\n                                        intersections.push({ intersection, point3d: vec3.scaleAndAdd(vec3.create(), part.vertices3D[i - 1], dir, intersection.u) });\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        if (intersections.length > 1) {\r\n            intersections.sort((a, b) => a.intersection.t - b.intersection.t);\r\n            const vertices3D: ReadonlyVec3[] = [vec3.create()];\r\n            const vertices2D: ReadonlyVec2[] = [line.start];\r\n            const labels: string[] = [\"\"];\r\n            intersections.forEach(intersection => {\r\n                vertices2D.push(intersection.intersection.p);\r\n            });\r\n            vertices2D.push(line.end);\r\n            for (let i = 0; i < intersections.length; ++i) {\r\n                if (i != 0) {\r\n                    labels.push(vec3.dist(intersections[i].point3d, intersections[i - 1].point3d).toFixed(3) + \"m\");\r\n                }\r\n                vertices3D.push(intersections[i].point3d);\r\n            }\r\n            vertices3D.push(vec3.create());\r\n            labels.push(\"\");\r\n\r\n            const parts: DrawPart[] = [];\r\n            parts.push({ drawType: \"lines\", vertices3D, vertices2D, text: [labels] });\r\n\r\n            const drawObjects: DrawObject[] = [];\r\n            drawObjects.push({ kind: \"complex\", parts });\r\n            return { kind: \"basic\", objects: drawObjects };\r\n        }\r\n\r\n    }\r\n    const parts: DrawPart[] = [];\r\n    parts.push({ drawType: \"lines\", vertices3D: [], vertices2D: [line.start, line.end] });\r\n\r\n    const drawObjects: DrawObject[] = [];\r\n    drawObjects.push({ kind: \"complex\", parts });\r\n    return { kind: \"basic\", objects: drawObjects };\r\n}\r\n", "import {\r\n  glMatrix,\r\n  mat4,\r\n  ReadonlyVec2,\r\n  ReadonlyVec3,\r\n  vec2,\r\n  vec3,\r\n  vec4,\r\n} from \"gl-matrix\";\r\nimport type * as Public from \"@novorender/webgl-api\";\r\nimport type { DrawableEntity, DrawObject, DrawProduct, DuoMeasurementValues, ManholeMeasureValues, MeasureEntity, MeasureSettings } from \"@novorender/measure-api\";\r\nimport type { MeasureScene } from \"./measureScene\";\r\nimport { getResultDrawObject, SCREEN_SPACE_EPSILON } from \"./drawobject_factorty\";\r\n\r\nexport function getPathMatrices(\r\n  view: Public.View): { camMat: mat4; projMat: mat4 } {\r\n  const { camera } = view;\r\n  const { width, height } = view.settings.display;\r\n  const camMat = mat4.fromRotationTranslation(\r\n    mat4.create(),\r\n    camera.rotation,\r\n    camera.position\r\n  );\r\n  mat4.invert(camMat, camMat);\r\n  if (view.camera.kind == \"pinhole\") {\r\n    const projMat = mat4.perspective(\r\n      mat4.create(),\r\n      glMatrix.toRadian(camera.fieldOfView),\r\n      width / height,\r\n      camera.near,\r\n      camera.far\r\n    );\r\n    return { camMat, projMat };\r\n  } else {\r\n    const aspect = width / height;\r\n    const halfHeight = camera.fieldOfView / 2;\r\n    const halfWidth = halfHeight * aspect;\r\n    const projMat = mat4.ortho(\r\n      mat4.create(),\r\n      -halfWidth,\r\n      halfWidth,\r\n      -halfHeight,\r\n      halfHeight,\r\n      camera.near,\r\n      camera.far\r\n    );\r\n    return { camMat, projMat };\r\n  }\r\n}\r\n\r\nexport function toScreen(projMat: mat4, width: number, height: number, p: ReadonlyVec3): ReadonlyVec2 {\r\n  const _p = vec4.transformMat4(\r\n    vec4.create(),\r\n    vec4.fromValues(p[0], p[1], p[2], 1),\r\n    projMat\r\n  );\r\n\r\n  const pt = vec2.fromValues(\r\n    Math.round(((_p[0] * 0.5) / _p[3] + 0.5) * width),\r\n    Math.round((0.5 - (_p[1] * 0.5) / _p[3]) * height)\r\n  );\r\n\r\n  return pt.every((num) => !Number.isNaN(num) && Number.isFinite(num)) ? pt : vec2.fromValues(-100, -100);\r\n};\r\n\r\nexport function toPathPointsFromMatrices(\r\n  points: ReadonlyVec3[],\r\n  camMat: mat4,\r\n  projMat: mat4,\r\n  near: number,\r\n  width: number,\r\n  height: number,\r\n  ortho: boolean\r\n): { screenPoints: ReadonlyVec2[], points2d: ReadonlyVec2[], removedIndices: number[], addedIndices: number[] } | undefined {\r\n  const clip = (p: vec3, p0: vec3) => {\r\n    const d = vec3.sub(vec3.create(), p0, p);\r\n    vec3.scale(d, d, (-near - p[2]) / d[2]);\r\n    return vec3.add(d, d, p);\r\n  };\r\n\r\n  const points2d: ReadonlyVec2[] = [];\r\n  const removedIndices: number[] = [];\r\n  const addedIndices: number[] = [];\r\n  const sv = points.map((v) => vec3.transformMat4(vec3.create(), v, camMat));\r\n  if (ortho) {\r\n    for (const p of sv) {\r\n      if (p[2] > 0 && p[2] < 0.1) {\r\n        p[2] = -0.0001;\r\n      }\r\n    }\r\n  }\r\n  const screenPoints = sv.reduce((tail, head, i) => {\r\n    if (head[2] > SCREEN_SPACE_EPSILON) {\r\n      if (i === 0 || sv[i - 1][2] > 0) {\r\n        removedIndices.push(i);\r\n        return tail;\r\n      }\r\n      const p0 = clip(sv[i - 1], head);\r\n      const _p = toScreen(projMat, width, height, p0);\r\n      points2d.push(_p);\r\n      return tail.concat([_p]);\r\n    }\r\n    const _p = toScreen(projMat, width, height, head);\r\n    points2d.push(_p);\r\n    if (i !== 0 && sv[i - 1][2] > SCREEN_SPACE_EPSILON) {\r\n      const p0 = clip(head, sv[i - 1]);\r\n      const _p0 = toScreen(projMat, width, height, p0);\r\n      addedIndices.push(i);\r\n      return tail.concat([_p0], [_p]);\r\n    }\r\n    return tail.concat([_p]);\r\n  }, [] as ReadonlyVec2[]);\r\n  if (screenPoints.length) {\r\n    return { screenPoints, points2d, removedIndices, addedIndices };\r\n  }\r\n  return undefined;\r\n}\r\n\r\n\r\nexport function FillDrawInfo2D(view: Public.View, drawObjects: DrawObject[]) {\r\n  const { camera } = view;\r\n  const { width, height } = view.settings.display;\r\n  const { camMat, projMat } = getPathMatrices(view);\r\n\r\n  for (const drawObject of drawObjects) {\r\n    for (const drawPart of drawObject.parts) {\r\n\r\n      const points = toPathPointsFromMatrices(\r\n        drawPart.vertices3D,\r\n        camMat,\r\n        projMat,\r\n        camera.near,\r\n        width,\r\n        height,\r\n        camera.kind == \"orthographic\"\r\n      );\r\n      if (points) {\r\n        const { screenPoints, removedIndices, addedIndices } = points;\r\n        drawPart.vertices2D = screenPoints;\r\n        if ((removedIndices.length > 0 || addedIndices.length > 0)) {\r\n          if (drawPart.text && Array.isArray(drawPart.text)) {\r\n            drawPart.text[0] = drawPart.text[0].reduce((tail, head, i) => {\r\n              if (addedIndices.find((v) => v == i) != undefined && removedIndices.find((v) => v == i - 1) == undefined) {\r\n                return tail.concat([\"\", head])\r\n              }\r\n              if (removedIndices.find((v) => v == i) != undefined && removedIndices.find((v) => v == i + 1) != undefined) {\r\n                return tail;\r\n              } else {\r\n                return tail.concat(head);\r\n              }\r\n            }, [] as string[]);\r\n          }\r\n          drawPart.vertices3D = drawPart.vertices3D.reduce((tail, head, i) => {\r\n            if (addedIndices.find((v) => v == i) != undefined && removedIndices.find((v) => v == i - 1) == undefined) {\r\n              return tail.concat([vec3.create(), head])\r\n            }\r\n            if (removedIndices.find((v) => v == i) != undefined && removedIndices.find((v) => v == i + 1) != undefined) {\r\n              return tail;\r\n            } else {\r\n              return tail.concat(head);\r\n            }\r\n          }, [] as ReadonlyVec3[]);\r\n        }\r\n      }\r\n      if (drawPart.voids) {\r\n        drawPart.voids.forEach((drawVoid, j) => {\r\n          const voidPoints = toPathPointsFromMatrices(\r\n            drawVoid.vertices3D,\r\n            camMat,\r\n            projMat,\r\n            camera.near,\r\n            width,\r\n            height,\r\n            camera.kind == \"orthographic\"\r\n          );\r\n          if (voidPoints) {\r\n            const { screenPoints, removedIndices, addedIndices } = voidPoints;\r\n            drawVoid.vertices2D = screenPoints;\r\n            if ((removedIndices.length > 0 || addedIndices.length > 0) && drawPart.text && Array.isArray(drawPart.text)) {\r\n              drawPart.text[j + 1] = drawPart.text[j + 1].reduce((tail, head, i) => {\r\n                if (addedIndices.find((v) => v == i) != undefined && removedIndices.find((v) => v == i - 1) == undefined) {\r\n                  return tail.concat([\"\", head])\r\n                }\r\n                if (removedIndices.find((v) => v == i) != undefined && removedIndices.find((v) => v == i + 1) != undefined) {\r\n                  return tail;\r\n                } else {\r\n                  return tail.concat(head);\r\n                }\r\n              }, [] as string[]);\r\n            }\r\n\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport async function renderMeasureEntity(\r\n  view: Public.View,\r\n  scene: MeasureScene,\r\n  entity: DrawableEntity,\r\n  setting?: MeasureSettings\r\n): Promise<(DrawProduct | undefined) | undefined> {\r\n  if (entity) {\r\n    let drawObjects: DrawObject[] = [];\r\n    let kind: \"manhole\" | \"basic\" | \"measureResult\" | undefined = undefined;\r\n    if (entity.drawKind == \"manhole\") {\r\n      drawObjects = await scene.getManholeDrawObject(entity as ManholeMeasureValues);\r\n      kind = \"manhole\"\r\n    }\r\n    else if (entity.drawKind == \"measureResult\") {\r\n      drawObjects = [getResultDrawObject(entity as DuoMeasurementValues)];\r\n      kind = \"measureResult\";\r\n    }\r\n    else {\r\n      const drawObject = await scene.getEntitiyDrawObjects(entity as MeasureEntity, setting);\r\n      if (drawObject) {\r\n        drawObjects = [drawObject];\r\n      }\r\n      kind = \"basic\";\r\n    }\r\n\r\n    if (drawObjects) {\r\n      FillDrawInfo2D(view, drawObjects);\r\n    }\r\n    return {\r\n      kind, objects: drawObjects\r\n    };\r\n  }\r\n  return undefined;\r\n}", "import * as Comlink from \"comlink\";\r\nimport { MeasureScene } from \"./measureScene\";\r\nimport type { Service } from \"./worker\";\r\nimport { ReadonlyVec2, ReadonlyVec3, vec2, vec3 } from \"gl-matrix\";\r\nimport { getPathMatrices, renderMeasureEntity, toPathPointsFromMatrices, toScreen } from \"./pathRender\";\r\nimport type * as Public from \"@novorender/webgl-api\";\r\nimport type { DrawableEntity, DrawProduct, MeasureSettings } from \"@novorender/measure-api\";\r\nimport { get2dNormal, getDrawObjectFromPointArray, getDrawTextObject, getTraceDrawOject, SCREEN_SPACE_EPSILON } from \"./drawobject_factorty\";\r\n\r\ntype MeasureService = Comlink.Remote<Service>;\r\n\r\nconst currentScriptUrl =\r\n  (document.currentScript as HTMLScriptElement | null)?.src ?? import.meta.url;\r\n\r\n/** Measure api loads from same scene assets. Brep files are required*/\r\nexport class MeasureAPI {\r\n  private readonly scriptUrl: string;\r\n\r\n  private workers:\r\n    | {\r\n      readonly measure: {\r\n        worker: Comlink.Endpoint;\r\n        service: MeasureService;\r\n      };\r\n    }\r\n    | undefined;\r\n\r\n  constructor(scriptBaseUrl?: string) {\r\n    const url = new URL(scriptBaseUrl ?? currentScriptUrl);\r\n    this.scriptUrl = new URL(\"./\", url).href.slice(0, -1);\r\n  }\r\n\r\n  private createWorkers() {\r\n    const createWorker = (url: string, name: string): Comlink.Endpoint => {\r\n      if (this.scriptUrl.startsWith(self.location.origin)) {\r\n        return new Worker(url, { type: \"classic\", name });\r\n      } else {\r\n        const scriptBlob = new Blob(\r\n          [`importScripts(${JSON.stringify(url)});`],\r\n          { type: \"text/javascript\" }\r\n        );\r\n        const blobUrl = URL.createObjectURL(scriptBlob);\r\n        const worker = new Worker(blobUrl, { type: \"classic\", name });\r\n        URL.revokeObjectURL(blobUrl);\r\n        return worker;\r\n      }\r\n    };\r\n    const measureWorker = createWorker(\r\n      `${this.scriptUrl}/worker.js`,\r\n      \"Measure\"\r\n    );\r\n    const measureService = Comlink.wrap<Service>(measureWorker);\r\n    this.workers = {\r\n      measure: {\r\n        worker: measureWorker,\r\n        service: measureService,\r\n      },\r\n    };\r\n    measureService.initialize(this.scriptUrl);\r\n  }\r\n\r\n  loadScene(url: URL | string) {\r\n    if (!this.workers) {\r\n      this.createWorkers();\r\n    }\r\n    if (typeof url === \"string\") {\r\n      url = new URL(url.toString());\r\n    }\r\n    return new MeasureScene(url, this.workers!.measure.service);\r\n  }\r\n\r\n  async dispose(): Promise<void> {\r\n    const { workers } = this;\r\n    if (workers) {\r\n      const { measure } = workers;\r\n      await measure.service.terminate();\r\n      measure.service[Comlink.releaseProxy]();\r\n      this.workers = undefined;\r\n    }\r\n  }\r\n\r\n  /** Converts world space points to on screen pixel path and points*/\r\n  toPathPoints(\r\n    points: ReadonlyVec3[],\r\n    view: Public.View,\r\n  ): { screenPoints: ReadonlyVec2[], points2d: ReadonlyVec2[], removedIndices: number[] } | undefined {\r\n    const { camera } = view;\r\n    const { camMat, projMat } = getPathMatrices(view);\r\n    const { width, height } = view.settings.display;\r\n\r\n    return toPathPointsFromMatrices(\r\n      points,\r\n      camMat,\r\n      projMat,\r\n      camera.near,\r\n      width, height,\r\n      camera.kind == \"orthographic\"\r\n    );\r\n  }\r\n\r\n  /** Converts world space points to on screen pixel points. Input and output are of equal length. */\r\n  toMarkerPoints(view: Public.View, points: ReadonlyVec3[]): (ReadonlyVec2 | undefined)[] {\r\n    const { camera } = view;\r\n    const { camMat, projMat } = getPathMatrices(view);\r\n    const { width, height } = view.settings.display;\r\n\r\n    return points\r\n      .map((p) => vec3.transformMat4(vec3.create(), p, camMat))\r\n      .map((p, i, arr) => {\r\n        if (camera.kind === \"orthographic\") {\r\n          if (p[2] > 0 && p[2] < 0.1) {\r\n            p[2] = -0.0001;\r\n          }\r\n        }\r\n\r\n        if (p[2] > SCREEN_SPACE_EPSILON) {\r\n          return undefined;\r\n        }\r\n\r\n        return toScreen(projMat, width, height, p)\r\n      })\r\n  }\r\n\r\n  async getDrawMeasureEntity(\r\n    view: Public.View,\r\n    scene: MeasureScene,\r\n    entity: DrawableEntity,\r\n    setting?: MeasureSettings\r\n  ): Promise<(DrawProduct | undefined) | undefined> {\r\n    return renderMeasureEntity(view, scene, entity, setting);\r\n  }\r\n\r\n  getDrawObjectFromPoints(view: Public.View, points: ReadonlyVec3[], closed = true, angles = true, generateLineLabels = false): DrawProduct | undefined {\r\n    return getDrawObjectFromPointArray(view, points, closed, angles, generateLineLabels);\r\n  }\r\n\r\n  getDrawText(view: Public.View, points: ReadonlyVec3[], text: string): DrawProduct | undefined {\r\n    return getDrawTextObject(view, points, text);\r\n  }\r\n\r\n  traceDrawObjects(objects: DrawProduct[], line: { start: ReadonlyVec2, end: ReadonlyVec2 }): DrawProduct {\r\n    return getTraceDrawOject(objects, line);\r\n  }\r\n\r\n  get2dNormal(object: DrawProduct, line: { start: ReadonlyVec2, end: ReadonlyVec2 }): { normal: ReadonlyVec2, position: ReadonlyVec2 } | undefined {\r\n    return get2dNormal(object, line);\r\n  }\r\n\r\n\r\n}\r\n", "import type { ReadonlyVec2, ReadonlyVec3 } from \"gl-matrix\";\r\nimport type * as Public from \"@novorender/webgl-api\";\r\n\r\nexport type PathKind = \"face\" | \"edge\" | \"vertex\" | \"curveSegment\";\r\n\r\nexport interface MeasureEntity extends MeasureEntityIndex {\r\n    ObjectId: Public.ObjectId;\r\n    kind: \"edge\" | \"face\" | \"vertex\" | \"curveSegment\";\r\n}\r\n\r\nexport interface MeasureEntityIndex {\r\n    pathKind: PathKind;\r\n    pathIndex: number;\r\n    instanceIndex: number;\r\n    parameter: number | ReadonlyVec2 | ReadonlyVec3;\r\n}\r\n\r\nexport function equalMeasureEntityIndex(a?: MeasureEntityIndex, b?: MeasureEntityIndex) {\r\n    if ((!a && b) || (a && !b)) {\r\n        return false;\r\n    }\r\n    if (a && b) {\r\n        return a.pathIndex == b.pathIndex && a.pathKind == b.pathKind;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function equalMeasureEntity(a?: MeasureEntity, b?: MeasureEntity) {\r\n    if ((!a && b) || (a && !b)) {\r\n        return false;\r\n    }\r\n    if (a && b) {\r\n        return a.ObjectId == b.ObjectId && a.pathIndex == b.pathIndex && a.pathKind == b.pathKind;\r\n    }\r\n    return true;\r\n}\r\n", "import {\r\n  glMatrix,\r\n  mat4,\r\n  ReadonlyMat4,\r\n  ReadonlyVec2,\r\n  ReadonlyVec3,\r\n  vec3,\r\n  vec4,\r\n} from \"gl-matrix\";\r\nimport type * as Public from \"@novorender/webgl-api\";\r\nimport {\r\n  equalMeasureEntityIndex,\r\n  MeasureEntity,\r\n  MeasureEntityIndex,\r\n  PathKind,\r\n} from \"./measureEntity\";\r\nimport { getPathMatrices, toPathPointsFromMatrices } from \"./pathRender\";\r\nimport type { DrawPart, MeasureSettings } from \"@novorender/measure-api\";\r\nglMatrix.setMatrixArrayType(Array);\r\n\r\nexport interface Path2dInfo {\r\n  readonly originalIndex: number;\r\n  readonly path: Path2D;\r\n  readonly kind: PathKind;\r\n  readonly instanceIndex: number;\r\n}\r\n\r\nfunction getDir(viewWorldMatrix: ReadonlyMat4) {\r\n  const dir = vec4.fromValues(0, 0, 1, 0);\r\n  vec4.transformMat4(dir, dir, viewWorldMatrix);\r\n  return vec3.fromValues(dir[0], dir[1], dir[2]);\r\n}\r\n\r\ninterface RenderOutputInterface {\r\n  readonly worldClipMatrix: ReadonlyMat4;\r\n  readonly viewClipMatrix: ReadonlyMat4;\r\n  readonly worldViewMatrix: ReadonlyMat4;\r\n}\r\n\r\nexport class MeasureObject {\r\n  private _renderOutput: RenderOutputInterface | undefined;\r\n  private facePaths: readonly Path2dInfo[] = [];\r\n  private edgePaths: readonly Path2dInfo[] = [];\r\n  private currentDir = vec3.create();\r\n  private viewDirMatrix = mat4.create();\r\n\r\n  selected: MeasureEntityIndex | undefined;\r\n\r\n  highlighted: MeasureEntityIndex | undefined;\r\n  dirty = true;\r\n\r\n  constructor(\r\n    readonly id: Public.ObjectId,\r\n    readonly getPaths: (\r\n      worldViewMatrix: ReadonlyMat4\r\n    ) => Promise<readonly Path2dInfo[]>,\r\n    readonly getEntitiyDrawObjects: (\r\n      enitity: MeasureEntity,\r\n      setting?: MeasureSettings\r\n    ) => Promise<\r\n      {\r\n        vertices: ReadonlyVec3[];\r\n        drawType: \"lines\" | \"filled\" | \"vertex\" | \"curveSegment\";\r\n        elevation?: { from: number; to: number; horizontalDisplay: boolean };\r\n      }[]\r\n    >,\r\n    readonly swapCylinderInternal: (\r\n      entity: MeasureEntity,\r\n      to: \"inner\" | \"outer\"\r\n    ) => Promise<number | undefined>,\r\n    selectedEntity: MeasureEntityIndex | undefined\r\n  ) {\r\n    this.selected = selectedEntity;\r\n  }\r\n\r\n  get selectedEntity(): MeasureEntity | undefined {\r\n    if (this.selected) {\r\n      return this.createMeasureEntity(this.selected);\r\n    }\r\n  }\r\n\r\n  get productId(): Public.ObjectId {\r\n    return this.id;\r\n  }\r\n\r\n  /** Returns a draw object with 2d screen coordinates*/\r\n  async swapCylinder(to: \"inner\" | \"outer\"): Promise<boolean> {\r\n    const entity = this.selectedEntity;\r\n    if (entity) {\r\n      const faceIdx = await this.swapCylinderInternal(\r\n        this.createMeasureEntity(entity),\r\n        to\r\n      );\r\n      if (faceIdx != undefined) {\r\n        this.selected!.pathIndex = faceIdx;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  createMeasureEntity(index: MeasureEntityIndex): MeasureEntity {\r\n    const kind = index.pathKind;\r\n    return { ...index, ObjectId: this.id, kind };\r\n  }\r\n\r\n  set renderOutput(value: Public.RenderOutput) {\r\n    const renderOutput = value as unknown as RenderOutputInterface;\r\n    if (renderOutput != this._renderOutput) {\r\n      this._renderOutput = renderOutput;\r\n      if (value) {\r\n        const newDir = getDir(value.viewWorldMatrix);\r\n        if (vec3.dot(newDir, this.currentDir) < 0.99999999) {\r\n          this.currentDir = newDir;\r\n          mat4.lookAt(\r\n            this.viewDirMatrix,\r\n            newDir,\r\n            vec3.create(),\r\n            vec3.fromValues(0, 1, 0)\r\n          );\r\n          this.getPaths(this.viewDirMatrix).then((p) => {\r\n            this.facePaths = p.filter((e) => e.kind == \"face\");\r\n            this.edgePaths = p.filter((e) => e.kind == \"edge\");\r\n          });\r\n        }\r\n      } else {\r\n        this.facePaths = [];\r\n        this.edgePaths = [];\r\n      }\r\n    }\r\n  }\r\n\r\n  contextTransform(\r\n    context: CanvasRenderingContext2D,\r\n    width: number,\r\n    height: number,\r\n    renderOutput: RenderOutputInterface\r\n  ) {\r\n    const halfWidth = width / 2;\r\n    const halfHeight = height / 2;\r\n    const scale = renderOutput.viewClipMatrix[5] * halfHeight;\r\n    var translateX = (1 + renderOutput.worldClipMatrix[12]) * halfWidth;\r\n    var translateY = (1 - renderOutput.worldClipMatrix[13]) * halfHeight;\r\n    const mat = new DOMMatrix([scale, 0, 0, -scale, translateX, translateY]);\r\n    context.setTransform(mat);\r\n    context.lineWidth = 2 / scale;\r\n  }\r\n\r\n  renderPoints(\r\n    context: CanvasRenderingContext2D,\r\n    width: number,\r\n    height: number,\r\n    points: vec3[]\r\n  ) {\r\n    if (this._renderOutput) {\r\n      const renderOutput = this._renderOutput;\r\n      this.contextTransform(context, width, height, renderOutput);\r\n      const scale = (renderOutput.viewClipMatrix[5] * height) / 2;\r\n      const { viewDirMatrix } = this;\r\n\r\n      const rad = 5 / scale;\r\n      context.fillStyle = \"red\";\r\n      for (const point of points) {\r\n        const p = vec3.transformMat4(vec3.create(), point, viewDirMatrix);\r\n        const [x, y] = p;\r\n        context.beginPath();\r\n        context.ellipse(x, y, rad, rad, 0, 0, 2 * Math.PI);\r\n        context.fill();\r\n      }\r\n      context.resetTransform();\r\n    }\r\n  }\r\n\r\n  renderPaths(\r\n    context: CanvasRenderingContext2D,\r\n    width: number,\r\n    height: number\r\n  ) {\r\n    const { facePaths, edgePaths } = this;\r\n    const { pathIndex: highlightedIndex, pathKind: highlightedKind } =\r\n      this.highlighted ?? {};\r\n    const { pathIndex: selectedIndex, pathKind: selectedKind } =\r\n      this.selected ?? {};\r\n\r\n    if (this._renderOutput) {\r\n      this.contextTransform(context, width, height, this._renderOutput);\r\n\r\n      for (const pathInfo of facePaths) {\r\n        const { path, originalIndex } = pathInfo;\r\n        if (highlightedKind == \"face\" && originalIndex === highlightedIndex) {\r\n          context.fillStyle = \"yellow\";\r\n        } else if (selectedKind == \"face\" && originalIndex === selectedIndex) {\r\n          context.fillStyle = \"green\";\r\n        } else {\r\n          context.fillStyle = \"darkgray\";\r\n        }\r\n        context.fill(path);\r\n        context.strokeStyle = \"white\";\r\n        context.stroke(path);\r\n      }\r\n\r\n      for (const pathInfo of edgePaths) {\r\n        const { path, originalIndex } = pathInfo;\r\n\r\n        if (highlightedKind == \"edge\" && originalIndex === highlightedIndex) {\r\n          context.strokeStyle = \"yellow\";\r\n        } else if (selectedKind == \"edge\" && originalIndex === selectedIndex) {\r\n          context.strokeStyle = \"green\";\r\n        } else {\r\n          context.strokeStyle = \"black\";\r\n        }\r\n        context.stroke(path);\r\n      }\r\n\r\n      context.resetTransform();\r\n    }\r\n    this.dirty = false;\r\n  }\r\n\r\n  hover(\r\n    context: CanvasRenderingContext2D,\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number\r\n  ): boolean {\r\n    const idx = this.pickPath(context, x, y, width, height);\r\n    if (equalMeasureEntityIndex(this.highlighted, idx)) {\r\n      return false;\r\n    }\r\n    this.highlighted = idx;\r\n    this.dirty = true;\r\n    return true;\r\n  }\r\n\r\n  select(): boolean {\r\n    if (\r\n      equalMeasureEntityIndex(this.highlighted, this.selected) ||\r\n      !this.highlighted\r\n    ) {\r\n      return false;\r\n    }\r\n    this.selected = this.highlighted;\r\n    this.dirty = true;\r\n    return true;\r\n  }\r\n\r\n  private pickPath(\r\n    context: CanvasRenderingContext2D,\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number\r\n  ): MeasureEntityIndex | undefined {\r\n    if (this._renderOutput) {\r\n      this.contextTransform(context, width, height, this._renderOutput);\r\n\r\n      const { facePaths, edgePaths } = this;\r\n\r\n      for (let i = edgePaths.length - 1; i >= 0; --i) {\r\n        const pathInfo = edgePaths[i];\r\n        const { path } = pathInfo;\r\n        if (context.isPointInStroke(path, x, y)) {\r\n          return {\r\n            pathKind: \"edge\",\r\n            pathIndex: pathInfo.originalIndex,\r\n            instanceIndex: pathInfo.instanceIndex,\r\n            parameter: 0,\r\n          };\r\n        }\r\n      }\r\n\r\n      for (let i = facePaths.length - 1; i >= 0; --i) {\r\n        const pathInfo = facePaths[i];\r\n        const { path } = pathInfo;\r\n        if (context.isPointInPath(path, x, y)) {\r\n          return {\r\n            pathKind: \"face\",\r\n            pathIndex: pathInfo.originalIndex,\r\n            instanceIndex: pathInfo.instanceIndex,\r\n            parameter: 0,\r\n          };\r\n        }\r\n      }\r\n    }\r\n    context.resetTransform();\r\n  }\r\n}\r\n", "import { MeasureAPI } from \"./measureApi\";\r\nexport { MeasureAPI };\r\n\r\nexport * from \"./measureObject\";\r\nexport * from \"./measureScene\";\r\nexport * from \"./measureEntity\";\r\nexport * from \"./measureApi\";\r\nexport * from \"./pathRender\";\r\nexport * from \"./measureError\";\r\n\r\nexport const cylinderOptions = [\r\n  \"center\",\r\n  \"closest\",\r\n  \"furthest\",\r\n  \"top\",\r\n  \"bottom\",\r\n] as const;\r\n\r\nexport type CylinderOptions = typeof cylinderOptions;\r\n\r\nexport function createMeasureAPI(scriptBaseUrl?: string) {\r\n  return new MeasureAPI(scriptBaseUrl);\r\n}\r\n"],
  "mappings": ";;;;;;;IAwBa,cAAc,OAAO,eAAe;IACpC,iBAAiB,OAAO,kBAAkB;IAC1C,eAAe,OAAO,sBAAsB;AAEzD,IAAM,cAAc,OAAO,gBAAgB;AAuJ3C,IAAM,WAAW,CAAC,QACf,OAAO,QAAQ,YAAY,QAAQ,QAAS,OAAO,QAAQ;AAkC9D,IAAM,uBAA6D;EACjE,WAAW,CAAC,QACV,SAAS,GAAG,KAAM,IAAoB;EACxC,UAAU,KAAG;AACX,UAAM,EAAE,OAAO,MAAK,IAAK,IAAI,eAAc;AAC3C,WAAO,KAAK,KAAK;AACjB,WAAO,CAAC,OAAO,CAAC,KAAK,CAAC;;EAExB,YAAY,MAAI;AACd,SAAK,MAAK;AACV,WAAO,KAAK,IAAI;;;AAepB,IAAM,uBAGF;EACF,WAAW,CAAC,UACV,SAAS,KAAK,KAAK,eAAe;EACpC,UAAU,EAAE,MAAK,GAAE;AACjB,QAAI;AACJ,QAAI,iBAAiB,OAAO;AAC1B,mBAAa;QACX,SAAS;QACT,OAAO;UACL,SAAS,MAAM;UACf,MAAM,MAAM;UACZ,OAAO,MAAM;;;WAGZ;AACL,mBAAa,EAAE,SAAS,OAAO,MAAK;;AAEtC,WAAO,CAAC,YAAY,CAAA,CAAE;;EAExB,YAAY,YAAU;AACpB,QAAI,WAAW,SAAS;AACtB,YAAM,OAAO,OACX,IAAI,MAAM,WAAW,MAAM,OAAO,GAClC,WAAW,KAAK;;AAGpB,UAAM,WAAW;;;IAOR,mBAAmB,oBAAI,IAGlC;EACA,CAAC,SAAS,oBAAoB;EAC9B,CAAC,SAAS,oBAAoB;CAC/B;SAEe,OAAO,KAAU,KAAe,MAAW;AACzD,KAAG,iBAAiB,WAAW,SAAS,SAAS,IAAgB;AAC/D,QAAI,CAAC,MAAM,CAAC,GAAG,MAAM;AACnB;;AAEF,UAAM,EAAE,IAAI,MAAM,KAAI,IAAE,OAAA,OAAA,EACtB,MAAM,CAAA,EAAc,GAChB,GAAG,IAAgB;AAEzB,UAAM,gBAAgB,GAAG,KAAK,gBAAgB,CAAA,GAAI,IAAI,aAAa;AACnE,QAAI;AACJ,QAAI;AACF,YAAM,SAAS,KAAK,MAAM,GAAG,EAAE,EAAE,OAAO,CAACA,MAAK,SAASA,KAAI,OAAO,GAAG;AACrE,YAAM,WAAW,KAAK,OAAO,CAACA,MAAK,SAASA,KAAI,OAAO,GAAG;AAC1D,cAAQ;aACN;AACE;AACE,0BAAc;;AAEhB;aACF;AACE;AACE,mBAAO,KAAK,MAAM,EAAE,EAAE,MAAM,cAAc,GAAG,KAAK,KAAK;AACvD,0BAAc;;AAEhB;aACF;AACE;AACE,0BAAc,SAAS,MAAM,QAAQ,YAAY;;AAEnD;aACF;AACE;AACE,kBAAM,QAAQ,IAAI,SAAS,GAAG,YAAY;AAC1C,0BAAc,MAAM,KAAK;;AAE3B;aACF;AACE;AACE,kBAAM,EAAE,OAAO,MAAK,IAAK,IAAI,eAAc;AAC3C,mBAAO,KAAK,KAAK;AACjB,0BAAc,SAAS,OAAO,CAAC,KAAK,CAAC;;AAEvC;aACF;AACE;AACE,0BAAc;;AAEhB;;AAEA;;aAEG,OAAP;AACA,oBAAc,EAAE,OAAO,CAAC,cAAc,EAAC;;AAEzC,YAAQ,QAAQ,WAAW,EACxB,MAAM,CAAC,UAAK;AACX,aAAO,EAAE,OAAO,CAAC,cAAc,EAAC;KACjC,EACA,KAAK,CAACC,iBAAW;AAChB,YAAM,CAAC,WAAW,aAAa,IAAI,YAAYA,YAAW;AAC1D,SAAG,YAAW,OAAA,OAAA,OAAA,OAAA,CAAA,GAAM,SAAS,GAAA,EAAE,GAAE,CAAA,GAAI,aAAa;AAClD,UAAI,SAAI,WAA0B;AAEhC,WAAG,oBAAoB,WAAW,QAAe;AACjD,sBAAc,EAAE;;KAEnB;GACG;AACR,MAAI,GAAG,OAAO;AACZ,OAAG,MAAK;;AAEZ;AAEA,SAAS,cAAc,UAAkB;AACvC,SAAO,SAAS,YAAY,SAAS;AACvC;AAEA,SAAS,cAAc,UAAkB;AACvC,MAAI,cAAc,QAAQ;AAAG,aAAS,MAAK;AAC7C;SAEgB,KAAQ,IAAc,QAAY;AAChD,SAAO,YAAe,IAAI,CAAA,GAAI,MAAM;AACtC;AAEA,SAAS,qBAAqB,YAAmB;AAC/C,MAAI,YAAY;AACd,UAAM,IAAI,MAAM,4CAA4C;;AAEhE;AAEA,SAAS,YACP,IACA,OAAqC,CAAA,GACrC,SAAiB,WAAA;AAAA,GAAc;AAE/B,MAAI,kBAAkB;AACtB,QAAMC,SAAQ,IAAI,MAAM,QAAQ;IAC9B,IAAI,SAAS,MAAI;AACf,2BAAqB,eAAe;AACpC,UAAI,SAAS,cAAc;AACzB,eAAO,MAAA;AACL,iBAAO,uBAAuB,IAAI;YAChC,MAAI;YACJ,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE,SAAQ,CAAE;WACnC,EAAE,KAAK,MAAA;AACN,0BAAc,EAAE;AAChB,8BAAkB;WACnB;;;AAGL,UAAI,SAAS,QAAQ;AACnB,YAAI,KAAK,WAAW,GAAG;AACrB,iBAAO,EAAE,MAAM,MAAMA,OAAK;;AAE5B,cAAM,IAAI,uBAAuB,IAAI;UACnC,MAAI;UACJ,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE,SAAQ,CAAE;SACnC,EAAE,KAAK,aAAa;AACrB,eAAO,EAAE,KAAK,KAAK,CAAC;;AAEtB,aAAO,YAAY,IAAI,CAAC,GAAG,MAAM,IAAI,CAAC;;IAExC,IAAI,SAAS,MAAM,UAAQ;AACzB,2BAAqB,eAAe;AAGpC,YAAM,CAAC,OAAO,aAAa,IAAI,YAAY,QAAQ;AACnD,aAAO,uBACL,IACA;QACE,MAAI;QACJ,MAAM,CAAC,GAAG,MAAM,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,SAAQ,CAAE;QAC7C;SAEF,aAAa,EACb,KAAK,aAAa;;IAEtB,MAAM,SAAS,UAAU,iBAAe;AACtC,2BAAqB,eAAe;AACpC,YAAM,OAAO,KAAK,KAAK,SAAS;AAChC,UAAK,SAAiB,gBAAgB;AACpC,eAAO,uBAAuB,IAAI;UAChC,MAAI;SACL,EAAE,KAAK,aAAa;;AAGvB,UAAI,SAAS,QAAQ;AACnB,eAAO,YAAY,IAAI,KAAK,MAAM,GAAG,EAAE,CAAC;;AAE1C,YAAM,CAAC,cAAc,aAAa,IAAI,iBAAiB,eAAe;AACtE,aAAO,uBACL,IACA;QACE,MAAI;QACJ,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE,SAAQ,CAAE;QAClC;SAEF,aAAa,EACb,KAAK,aAAa;;IAEtB,UAAU,SAAS,iBAAe;AAChC,2BAAqB,eAAe;AACpC,YAAM,CAAC,cAAc,aAAa,IAAI,iBAAiB,eAAe;AACtE,aAAO,uBACL,IACA;QACE,MAAI;QACJ,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE,SAAQ,CAAE;QAClC;SAEF,aAAa,EACb,KAAK,aAAa;;GAEvB;AACD,SAAOA;AACT;AAEA,SAAS,OAAU,KAAgB;AACjC,SAAO,MAAM,UAAU,OAAO,MAAM,CAAA,GAAI,GAAG;AAC7C;AAEA,SAAS,iBAAiB,cAAmB;AAC3C,QAAM,YAAY,aAAa,IAAI,WAAW;AAC9C,SAAO,CAAC,UAAU,IAAI,CAAC,MAAM,EAAE,EAAE,GAAG,OAAO,UAAU,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AACxE;AAEA,IAAM,gBAAgB,oBAAI,QAAO;SACjB,SAAY,KAAQ,WAAyB;AAC3D,gBAAc,IAAI,KAAK,SAAS;AAChC,SAAO;AACT;SAEgB,MAAS,KAAM;AAC7B,SAAO,OAAO,OAAO,KAAK,EAAE,CAAC,cAAc,KAAI,CAAE;AACnD;AAeA,SAAS,YAAY,OAAU;AAC7B,aAAW,CAAC,MAAM,OAAO,KAAK,kBAAkB;AAC9C,QAAI,QAAQ,UAAU,KAAK,GAAG;AAC5B,YAAM,CAAC,iBAAiB,aAAa,IAAI,QAAQ,UAAU,KAAK;AAChE,aAAO;QACL;UACE,MAAI;UACJ;UACA,OAAO;;QAET;;;;AAIN,SAAO;IACL;MACE,MAAI;MACJ;;IAEF,cAAc,IAAI,KAAK,KAAK,CAAA;;AAEhC;AAEA,SAAS,cAAc,OAAgB;AACrC,UAAQ,MAAM;SACZ;AACE,aAAO,iBAAiB,IAAI,MAAM,IAAI,EAAG,YAAY,MAAM,KAAK;SAClE;AACE,aAAO,MAAM;;AAEnB;AAEA,SAAS,uBACP,IACA,KACA,WAA0B;AAE1B,SAAO,IAAI,QAAQ,CAAC,YAAO;AACzB,UAAM,KAAK,aAAY;AACvB,OAAG,iBAAiB,WAAW,SAAS,EAAE,IAAgB;AACxD,UAAI,CAAC,GAAG,QAAQ,CAAC,GAAG,KAAK,MAAM,GAAG,KAAK,OAAO,IAAI;AAChD;;AAEF,SAAG,oBAAoB,WAAW,CAAQ;AAC1C,cAAQ,GAAG,IAAI;KACT;AACR,QAAI,GAAG,OAAO;AACZ,SAAG,MAAK;;AAEV,OAAG,YAAW,OAAA,OAAA,EAAG,GAAE,GAAK,GAAG,GAAI,SAAS;GACzC;AACH;AAEA,SAAS,eAAY;AACnB,SAAO,IAAI,MAAM,CAAC,EACf,KAAK,CAAC,EACN,IAAI,MAAM,KAAK,MAAM,KAAK,OAAM,IAAK,OAAO,gBAAgB,EAAE,SAAS,EAAE,CAAC,EAC1E,KAAK,GAAG;AACb;;;ACxiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKO,IAAI,UAAU;AACd,IAAI,aAAa,OAAO,iBAAiB,cAAc,eAAe;AACtE,IAAI,SAAS,KAAK;AAOlB,SAAS,mBAAmB,MAAM;AACvC,eAAa;AACf;AACA,IAAI,SAAS,KAAK,KAAK;AAOhB,SAAS,SAAS,GAAG;AAC1B,SAAO,IAAI;AACb;AAWO,SAAS,OAAO,GAAG,GAAG;AAC3B,SAAO,KAAK,IAAI,IAAI,CAAC,KAAK,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,CAAC;AAC5E;AACA,IAAI,CAAC,KAAK;AAAO,OAAK,QAAQ,WAAY;AACxC,QAAI,IAAI,GACJ,IAAI,UAAU;AAElB,WAAO,KAAK;AACV,WAAK,UAAU,KAAK,UAAU;AAAA,IAChC;AAEA,WAAO,KAAK,KAAK,CAAC;AAAA,EACpB;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYO,SAAS,SAAS;AACvB,MAAI,MAAM,IAAa,WAAW,EAAE;AAEpC,MAAa,cAAc,cAAc;AACvC,QAAI,KAAK;AACT,QAAI,KAAK;AACT,QAAI,KAAK;AACT,QAAI,KAAK;AACT,QAAI,KAAK;AACT,QAAI,KAAK;AACT,QAAI,KAAK;AACT,QAAI,KAAK;AACT,QAAI,MAAM;AACV,QAAI,MAAM;AACV,QAAI,MAAM;AACV,QAAI,MAAM;AAAA,EACZ;AAEA,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,MAAM;AACV,MAAI,MAAM;AACV,SAAO;AACT;AAQO,SAAS,MAAM,GAAG;AACvB,MAAI,MAAM,IAAa,WAAW,EAAE;AACpC,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,SAAO;AACT;AASO,SAAS,KAAK,KAAK,GAAG;AAC3B,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,SAAO;AACT;AAuBO,SAAS,WAAW,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AACzG,MAAI,MAAM,IAAa,WAAW,EAAE;AACpC,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,SAAO;AACT;AAwBO,SAAS,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AACvhC,MAAI,QAAQ,GAAG;AACb,QAAI,MAAM,EAAE,IACR,MAAM,EAAE,IACR,MAAM,EAAE;AACZ,QAAI,MAAM,EAAE,IACR,MAAM,EAAE;AACZ,QAAI,MAAM,EAAE;AACZ,QAAI,KAAK,EAAE;AACX,QAAI,KAAK,EAAE;AACX,QAAI,KAAK,EAAE;AACX,QAAI,KAAK;AACT,QAAI,KAAK,EAAE;AACX,QAAI,KAAK,EAAE;AACX,QAAI,KAAK;AACT,QAAI,KAAK;AACT,QAAI,MAAM,EAAE;AACZ,QAAI,MAAM;AACV,QAAI,MAAM;AACV,QAAI,MAAM;AAAA,EACZ,OAAO;AACL,QAAI,KAAK,EAAE;AACX,QAAI,KAAK,EAAE;AACX,QAAI,KAAK,EAAE;AACX,QAAI,KAAK,EAAE;AACX,QAAI,KAAK,EAAE;AACX,QAAI,KAAK,EAAE;AACX,QAAI,KAAK,EAAE;AACX,QAAI,KAAK,EAAE;AACX,QAAI,KAAK,EAAE;AACX,QAAI,KAAK,EAAE;AACX,QAAI,MAAM,EAAE;AACZ,QAAI,MAAM,EAAE;AACZ,QAAI,MAAM,EAAE;AACZ,QAAI,MAAM,EAAE;AACZ,QAAI,MAAM,EAAE;AACZ,QAAI,MAAM,EAAE;AAAA,EACd;AAEA,SAAO;AACT;AASO,SAAS,OAAO,KAAK,GAAG;AAC7B,MAAI,MAAM,EAAE,IACR,MAAM,EAAE,IACR,MAAM,EAAE,IACR,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE,IACR,MAAM,EAAE,IACR,MAAM,EAAE,IACR,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE,IACR,MAAM,EAAE,IACR,MAAM,EAAE,KACR,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE,KACR,MAAM,EAAE,KACR,MAAM,EAAE,KACR,MAAM,EAAE;AACZ,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAE5B,MAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAE5E,MAAI,CAAC,KAAK;AACR,WAAO;AAAA,EACT;AAEA,QAAM,IAAM;AACZ,MAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,OAAO,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,MAAI,OAAO,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,MAAI,OAAO,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,MAAI,OAAO,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,MAAI,OAAO,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,MAAI,OAAO,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,SAAO;AACT;AASO,SAAS,QAAQ,KAAK,GAAG;AAC9B,MAAI,MAAM,EAAE,IACR,MAAM,EAAE,IACR,MAAM,EAAE,IACR,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE,IACR,MAAM,EAAE,IACR,MAAM,EAAE,IACR,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE,IACR,MAAM,EAAE,IACR,MAAM,EAAE,KACR,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE,KACR,MAAM,EAAE,KACR,MAAM,EAAE,KACR,MAAM,EAAE;AACZ,MAAI,KAAK,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AAClG,MAAI,KAAK,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACpG,MAAI,KAAK,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AAClG,MAAI,KAAK,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACpG,MAAI,KAAK,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACpG,MAAI,KAAK,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AAClG,MAAI,KAAK,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACpG,MAAI,KAAK,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AAClG,MAAI,KAAK,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AAClG,MAAI,KAAK,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACpG,MAAI,MAAM,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACnG,MAAI,MAAM,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACrG,MAAI,MAAM,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACrG,MAAI,MAAM,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACnG,MAAI,MAAM,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACrG,MAAI,MAAM,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACnG,SAAO;AACT;AAQO,SAAS,YAAY,GAAG;AAC7B,MAAI,MAAM,EAAE,IACR,MAAM,EAAE,IACR,MAAM,EAAE,IACR,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE,IACR,MAAM,EAAE,IACR,MAAM,EAAE,IACR,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE,IACR,MAAM,EAAE,IACR,MAAM,EAAE,KACR,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE,KACR,MAAM,EAAE,KACR,MAAM,EAAE,KACR,MAAM,EAAE;AACZ,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAE5B,SAAO,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAC3E;AAUO,SAAS,SAAS,KAAK,GAAG,GAAG;AAClC,MAAI,MAAM,EAAE,IACR,MAAM,EAAE,IACR,MAAM,EAAE,IACR,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE,IACR,MAAM,EAAE,IACR,MAAM,EAAE,IACR,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE,IACR,MAAM,EAAE,IACR,MAAM,EAAE,KACR,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE,KACR,MAAM,EAAE,KACR,MAAM,EAAE,KACR,MAAM,EAAE;AAEZ,MAAI,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE;AACX,MAAI,KAAK,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,KAAK,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,KAAK,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,KAAK,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,OAAK,EAAE;AACP,OAAK,EAAE;AACP,OAAK,EAAE;AACP,OAAK,EAAE;AACP,MAAI,KAAK,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,KAAK,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,KAAK,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,KAAK,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,OAAK,EAAE;AACP,OAAK,EAAE;AACP,OAAK,EAAE;AACP,OAAK,EAAE;AACP,MAAI,KAAK,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,KAAK,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,MAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,OAAK,EAAE;AACP,OAAK,EAAE;AACP,OAAK,EAAE;AACP,OAAK,EAAE;AACP,MAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,MAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,MAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,MAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,SAAO;AACT;AAUO,SAAS,UAAU,KAAK,GAAG,GAAG;AACnC,MAAI,IAAI,EAAE,IACN,IAAI,EAAE,IACN,IAAI,EAAE;AACV,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,KAAK,KAAK,KAAK;AAEnB,MAAI,MAAM,KAAK;AACb,QAAI,MAAM,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE;AAC7C,QAAI,MAAM,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE;AAC7C,QAAI,MAAM,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,MAAM,IAAI,EAAE;AAC9C,QAAI,MAAM,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,MAAM,IAAI,EAAE;AAAA,EAChD,OAAO;AACL,UAAM,EAAE;AACR,UAAM,EAAE;AACR,UAAM,EAAE;AACR,UAAM,EAAE;AACR,UAAM,EAAE;AACR,UAAM,EAAE;AACR,UAAM,EAAE;AACR,UAAM,EAAE;AACR,UAAM,EAAE;AACR,UAAM,EAAE;AACR,UAAM,EAAE;AACR,UAAM,EAAE;AACR,QAAI,KAAK;AACT,QAAI,KAAK;AACT,QAAI,KAAK;AACT,QAAI,KAAK;AACT,QAAI,KAAK;AACT,QAAI,KAAK;AACT,QAAI,KAAK;AACT,QAAI,KAAK;AACT,QAAI,KAAK;AACT,QAAI,KAAK;AACT,QAAI,MAAM;AACV,QAAI,MAAM;AACV,QAAI,MAAM,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,EAAE;AAC1C,QAAI,MAAM,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,EAAE;AAC1C,QAAI,MAAM,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,EAAE;AAC1C,QAAI,MAAM,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,EAAE;AAAA,EAC5C;AAEA,SAAO;AACT;AAUO,SAAS,MAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,IAAI,EAAE,IACN,IAAI,EAAE,IACN,IAAI,EAAE;AACV,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,MAAM,EAAE,MAAM;AAClB,MAAI,MAAM,EAAE,MAAM;AAClB,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,SAAO;AACT;AAWO,SAAS,OAAO,KAAK,GAAG,KAAK,MAAM;AACxC,MAAI,IAAI,KAAK,IACT,IAAI,KAAK,IACT,IAAI,KAAK;AACb,MAAIC,OAAM,KAAK,MAAM,GAAG,GAAG,CAAC;AAC5B,MAAI,GAAG,GAAG;AACV,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,KAAK,KAAK;AACd,MAAI,KAAK,KAAK;AACd,MAAI,KAAK,KAAK;AAEd,MAAIA,OAAe,SAAS;AAC1B,WAAO;AAAA,EACT;AAEA,EAAAA,OAAM,IAAIA;AACV,OAAKA;AACL,OAAKA;AACL,OAAKA;AACL,MAAI,KAAK,IAAI,GAAG;AAChB,MAAI,KAAK,IAAI,GAAG;AAChB,MAAI,IAAI;AACR,QAAM,EAAE;AACR,QAAM,EAAE;AACR,QAAM,EAAE;AACR,QAAM,EAAE;AACR,QAAM,EAAE;AACR,QAAM,EAAE;AACR,QAAM,EAAE;AACR,QAAM,EAAE;AACR,QAAM,EAAE;AACR,QAAM,EAAE;AACR,QAAM,EAAE;AACR,QAAM,EAAE;AAER,QAAM,IAAI,IAAI,IAAI;AAClB,QAAM,IAAI,IAAI,IAAI,IAAI;AACtB,QAAM,IAAI,IAAI,IAAI,IAAI;AACtB,QAAM,IAAI,IAAI,IAAI,IAAI;AACtB,QAAM,IAAI,IAAI,IAAI;AAClB,QAAM,IAAI,IAAI,IAAI,IAAI;AACtB,QAAM,IAAI,IAAI,IAAI,IAAI;AACtB,QAAM,IAAI,IAAI,IAAI,IAAI;AACtB,QAAM,IAAI,IAAI,IAAI;AAElB,MAAI,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AACxC,MAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAExC,MAAI,MAAM,KAAK;AAEb,QAAI,MAAM,EAAE;AACZ,QAAI,MAAM,EAAE;AACZ,QAAI,MAAM,EAAE;AACZ,QAAI,MAAM,EAAE;AAAA,EACd;AAEA,SAAO;AACT;AAUO,SAAS,QAAQ,KAAK,GAAG,KAAK;AACnC,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AAEZ,MAAI,MAAM,KAAK;AAEb,QAAI,KAAK,EAAE;AACX,QAAI,KAAK,EAAE;AACX,QAAI,KAAK,EAAE;AACX,QAAI,KAAK,EAAE;AACX,QAAI,MAAM,EAAE;AACZ,QAAI,MAAM,EAAE;AACZ,QAAI,MAAM,EAAE;AACZ,QAAI,MAAM,EAAE;AAAA,EACd;AAGA,MAAI,KAAK,MAAM,IAAI,MAAM;AACzB,MAAI,KAAK,MAAM,IAAI,MAAM;AACzB,MAAI,KAAK,MAAM,IAAI,MAAM;AACzB,MAAI,KAAK,MAAM,IAAI,MAAM;AACzB,MAAI,KAAK,MAAM,IAAI,MAAM;AACzB,MAAI,KAAK,MAAM,IAAI,MAAM;AACzB,MAAI,MAAM,MAAM,IAAI,MAAM;AAC1B,MAAI,MAAM,MAAM,IAAI,MAAM;AAC1B,SAAO;AACT;AAUO,SAAS,QAAQ,KAAK,GAAG,KAAK;AACnC,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AAEZ,MAAI,MAAM,KAAK;AAEb,QAAI,KAAK,EAAE;AACX,QAAI,KAAK,EAAE;AACX,QAAI,KAAK,EAAE;AACX,QAAI,KAAK,EAAE;AACX,QAAI,MAAM,EAAE;AACZ,QAAI,MAAM,EAAE;AACZ,QAAI,MAAM,EAAE;AACZ,QAAI,MAAM,EAAE;AAAA,EACd;AAGA,MAAI,KAAK,MAAM,IAAI,MAAM;AACzB,MAAI,KAAK,MAAM,IAAI,MAAM;AACzB,MAAI,KAAK,MAAM,IAAI,MAAM;AACzB,MAAI,KAAK,MAAM,IAAI,MAAM;AACzB,MAAI,KAAK,MAAM,IAAI,MAAM;AACzB,MAAI,KAAK,MAAM,IAAI,MAAM;AACzB,MAAI,MAAM,MAAM,IAAI,MAAM;AAC1B,MAAI,MAAM,MAAM,IAAI,MAAM;AAC1B,SAAO;AACT;AAUO,SAAS,QAAQ,KAAK,GAAG,KAAK;AACnC,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AAEZ,MAAI,MAAM,KAAK;AAEb,QAAI,KAAK,EAAE;AACX,QAAI,KAAK,EAAE;AACX,QAAI,MAAM,EAAE;AACZ,QAAI,MAAM,EAAE;AACZ,QAAI,MAAM,EAAE;AACZ,QAAI,MAAM,EAAE;AACZ,QAAI,MAAM,EAAE;AACZ,QAAI,MAAM,EAAE;AAAA,EACd;AAGA,MAAI,KAAK,MAAM,IAAI,MAAM;AACzB,MAAI,KAAK,MAAM,IAAI,MAAM;AACzB,MAAI,KAAK,MAAM,IAAI,MAAM;AACzB,MAAI,KAAK,MAAM,IAAI,MAAM;AACzB,MAAI,KAAK,MAAM,IAAI,MAAM;AACzB,MAAI,KAAK,MAAM,IAAI,MAAM;AACzB,MAAI,KAAK,MAAM,IAAI,MAAM;AACzB,MAAI,KAAK,MAAM,IAAI,MAAM;AACzB,SAAO;AACT;AAaO,SAAS,gBAAgB,KAAK,GAAG;AACtC,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM;AACV,SAAO;AACT;AAaO,SAAS,YAAY,KAAK,GAAG;AAClC,MAAI,KAAK,EAAE;AACX,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK,EAAE;AACX,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,SAAO;AACT;AAcO,SAAS,aAAa,KAAK,KAAK,MAAM;AAC3C,MAAI,IAAI,KAAK,IACT,IAAI,KAAK,IACT,IAAI,KAAK;AACb,MAAIA,OAAM,KAAK,MAAM,GAAG,GAAG,CAAC;AAC5B,MAAI,GAAG,GAAG;AAEV,MAAIA,OAAe,SAAS;AAC1B,WAAO;AAAA,EACT;AAEA,EAAAA,OAAM,IAAIA;AACV,OAAKA;AACL,OAAKA;AACL,OAAKA;AACL,MAAI,KAAK,IAAI,GAAG;AAChB,MAAI,KAAK,IAAI,GAAG;AAChB,MAAI,IAAI;AAER,MAAI,KAAK,IAAI,IAAI,IAAI;AACrB,MAAI,KAAK,IAAI,IAAI,IAAI,IAAI;AACzB,MAAI,KAAK,IAAI,IAAI,IAAI,IAAI;AACzB,MAAI,KAAK;AACT,MAAI,KAAK,IAAI,IAAI,IAAI,IAAI;AACzB,MAAI,KAAK,IAAI,IAAI,IAAI;AACrB,MAAI,KAAK,IAAI,IAAI,IAAI,IAAI;AACzB,MAAI,KAAK;AACT,MAAI,KAAK,IAAI,IAAI,IAAI,IAAI;AACzB,MAAI,KAAK,IAAI,IAAI,IAAI,IAAI;AACzB,MAAI,MAAM,IAAI,IAAI,IAAI;AACtB,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,SAAO;AACT;AAaO,SAAS,cAAc,KAAK,KAAK;AACtC,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,IAAI,KAAK,IAAI,GAAG;AAEpB,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK,CAAC;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,SAAO;AACT;AAaO,SAAS,cAAc,KAAK,KAAK;AACtC,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,IAAI,KAAK,IAAI,GAAG;AAEpB,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK,CAAC;AACV,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,SAAO;AACT;AAaO,SAAS,cAAc,KAAK,KAAK;AACtC,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,IAAI,KAAK,IAAI,GAAG;AAEpB,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK,CAAC;AACV,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,SAAO;AACT;AAiBO,SAAS,wBAAwB,KAAK,GAAG,GAAG;AAEjD,MAAI,IAAI,EAAE,IACN,IAAI,EAAE,IACN,IAAI,EAAE,IACN,IAAI,EAAE;AACV,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,KAAK,KAAK;AACd,MAAI,KAAK,KAAK;AACd,MAAI,KAAK;AACT,MAAI,KAAK,KAAK;AACd,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,KAAK,KAAK;AACd,MAAI,KAAK;AACT,MAAI,KAAK,KAAK;AACd,MAAI,KAAK,KAAK;AACd,MAAI,MAAM,KAAK,KAAK;AACpB,MAAI,MAAM;AACV,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM;AACV,SAAO;AACT;AASO,SAAS,UAAU,KAAK,GAAG;AAChC,MAAI,cAAc,IAAa,WAAW,CAAC;AAC3C,MAAI,KAAK,CAAC,EAAE,IACR,KAAK,CAAC,EAAE,IACR,KAAK,CAAC,EAAE,IACR,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE;AACX,MAAI,YAAY,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAEnD,MAAI,YAAY,GAAG;AACjB,gBAAY,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,IAAI;AAC/D,gBAAY,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,IAAI;AAC/D,gBAAY,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,IAAI;AAAA,EACjE,OAAO;AACL,gBAAY,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM;AAC3D,gBAAY,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM;AAC3D,gBAAY,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM;AAAA,EAC7D;AAEA,0BAAwB,KAAK,GAAG,WAAW;AAC3C,SAAO;AACT;AAWO,SAAS,eAAe,KAAK,KAAK;AACvC,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,SAAO;AACT;AAYO,SAAS,WAAW,KAAK,KAAK;AACnC,MAAI,MAAM,IAAI;AACd,MAAI,MAAM,IAAI;AACd,MAAI,MAAM,IAAI;AACd,MAAI,MAAM,IAAI;AACd,MAAI,MAAM,IAAI;AACd,MAAI,MAAM,IAAI;AACd,MAAI,MAAM,IAAI;AACd,MAAI,MAAM,IAAI;AACd,MAAI,MAAM,IAAI;AACd,MAAI,KAAK,KAAK,MAAM,KAAK,KAAK,GAAG;AACjC,MAAI,KAAK,KAAK,MAAM,KAAK,KAAK,GAAG;AACjC,MAAI,KAAK,KAAK,MAAM,KAAK,KAAK,GAAG;AACjC,SAAO;AACT;AAWO,SAAS,YAAY,KAAK,KAAK;AACpC,MAAI,UAAU,IAAa,WAAW,CAAC;AACvC,aAAW,SAAS,GAAG;AACvB,MAAI,MAAM,IAAI,QAAQ;AACtB,MAAI,MAAM,IAAI,QAAQ;AACtB,MAAI,MAAM,IAAI,QAAQ;AACtB,MAAI,OAAO,IAAI,KAAK;AACpB,MAAI,OAAO,IAAI,KAAK;AACpB,MAAI,OAAO,IAAI,KAAK;AACpB,MAAI,OAAO,IAAI,KAAK;AACpB,MAAI,OAAO,IAAI,KAAK;AACpB,MAAI,OAAO,IAAI,KAAK;AACpB,MAAI,OAAO,IAAI,KAAK;AACpB,MAAI,OAAO,IAAI,KAAK;AACpB,MAAI,OAAO,IAAI,MAAM;AACrB,MAAI,QAAQ,OAAO,OAAO;AAC1B,MAAI,IAAI;AAER,MAAI,QAAQ,GAAG;AACb,QAAI,KAAK,KAAK,QAAQ,CAAG,IAAI;AAC7B,QAAI,KAAK,OAAO;AAChB,QAAI,MAAM,OAAO,QAAQ;AACzB,QAAI,MAAM,OAAO,QAAQ;AACzB,QAAI,MAAM,OAAO,QAAQ;AAAA,EAC3B,WAAW,OAAO,QAAQ,OAAO,MAAM;AACrC,QAAI,KAAK,KAAK,IAAM,OAAO,OAAO,IAAI,IAAI;AAC1C,QAAI,MAAM,OAAO,QAAQ;AACzB,QAAI,KAAK,OAAO;AAChB,QAAI,MAAM,OAAO,QAAQ;AACzB,QAAI,MAAM,OAAO,QAAQ;AAAA,EAC3B,WAAW,OAAO,MAAM;AACtB,QAAI,KAAK,KAAK,IAAM,OAAO,OAAO,IAAI,IAAI;AAC1C,QAAI,MAAM,OAAO,QAAQ;AACzB,QAAI,MAAM,OAAO,QAAQ;AACzB,QAAI,KAAK,OAAO;AAChB,QAAI,MAAM,OAAO,QAAQ;AAAA,EAC3B,OAAO;AACL,QAAI,KAAK,KAAK,IAAM,OAAO,OAAO,IAAI,IAAI;AAC1C,QAAI,MAAM,OAAO,QAAQ;AACzB,QAAI,MAAM,OAAO,QAAQ;AACzB,QAAI,MAAM,OAAO,QAAQ;AACzB,QAAI,KAAK,OAAO;AAAA,EAClB;AAEA,SAAO;AACT;AAmBO,SAAS,6BAA6B,KAAK,GAAG,GAAG,GAAG;AAEzD,MAAI,IAAI,EAAE,IACN,IAAI,EAAE,IACN,IAAI,EAAE,IACN,IAAI,EAAE;AACV,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,MAAM,KAAK,KAAK,OAAO;AAC3B,MAAI,MAAM,KAAK,MAAM;AACrB,MAAI,MAAM,KAAK,MAAM;AACrB,MAAI,KAAK;AACT,MAAI,MAAM,KAAK,MAAM;AACrB,MAAI,MAAM,KAAK,KAAK,OAAO;AAC3B,MAAI,MAAM,KAAK,MAAM;AACrB,MAAI,KAAK;AACT,MAAI,MAAM,KAAK,MAAM;AACrB,MAAI,MAAM,KAAK,MAAM;AACrB,MAAI,OAAO,KAAK,KAAK,OAAO;AAC5B,MAAI,MAAM;AACV,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE;AACZ,MAAI,MAAM;AACV,SAAO;AACT;AAsBO,SAAS,mCAAmC,KAAK,GAAG,GAAG,GAAG,GAAG;AAElE,MAAI,IAAI,EAAE,IACN,IAAI,EAAE,IACN,IAAI,EAAE,IACN,IAAI,EAAE;AACV,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,QAAQ,KAAK,KAAK,OAAO;AAC7B,MAAI,QAAQ,KAAK,MAAM;AACvB,MAAI,QAAQ,KAAK,MAAM;AACvB,MAAI,QAAQ,KAAK,MAAM;AACvB,MAAI,QAAQ,KAAK,KAAK,OAAO;AAC7B,MAAI,QAAQ,KAAK,MAAM;AACvB,MAAI,QAAQ,KAAK,MAAM;AACvB,MAAI,QAAQ,KAAK,MAAM;AACvB,MAAI,SAAS,KAAK,KAAK,OAAO;AAC9B,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM,EAAE,KAAK,MAAM,OAAO,KAAK,OAAO,KAAK,OAAO;AACtD,MAAI,MAAM,EAAE,KAAK,MAAM,OAAO,KAAK,OAAO,KAAK,OAAO;AACtD,MAAI,MAAM,EAAE,KAAK,MAAM,OAAO,KAAK,OAAO,KAAK,QAAQ;AACvD,MAAI,MAAM;AACV,SAAO;AACT;AAUO,SAAS,SAAS,KAAK,GAAG;AAC/B,MAAI,IAAI,EAAE,IACN,IAAI,EAAE,IACN,IAAI,EAAE,IACN,IAAI,EAAE;AACV,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI,KAAK;AAClB,MAAI,KAAK,KAAK;AACd,MAAI,KAAK,KAAK;AACd,MAAI,KAAK;AACT,MAAI,KAAK,KAAK;AACd,MAAI,KAAK,IAAI,KAAK;AAClB,MAAI,KAAK,KAAK;AACd,MAAI,KAAK;AACT,MAAI,KAAK,KAAK;AACd,MAAI,KAAK,KAAK;AACd,MAAI,MAAM,IAAI,KAAK;AACnB,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,SAAO;AACT;AAcO,SAAS,QAAQ,KAAK,MAAM,OAAO,QAAQ,KAAK,MAAM,KAAK;AAChE,MAAI,KAAK,KAAK,QAAQ;AACtB,MAAI,KAAK,KAAK,MAAM;AACpB,MAAI,KAAK,KAAK,OAAO;AACrB,MAAI,KAAK,OAAO,IAAI;AACpB,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK,OAAO,IAAI;AACpB,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,MAAM,QAAQ,QAAQ;AAC1B,MAAI,MAAM,MAAM,UAAU;AAC1B,MAAI,OAAO,MAAM,QAAQ;AACzB,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM,MAAM,OAAO,IAAI;AAC3B,MAAI,MAAM;AACV,SAAO;AACT;AAeO,SAAS,cAAc,KAAK,MAAM,QAAQ,MAAM,KAAK;AAC1D,MAAI,IAAI,IAAM,KAAK,IAAI,OAAO,CAAC,GAC3B;AACJ,MAAI,KAAK,IAAI;AACb,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AAEV,MAAI,OAAO,QAAQ,QAAQ,UAAU;AACnC,SAAK,KAAK,OAAO;AACjB,QAAI,OAAO,MAAM,QAAQ;AACzB,QAAI,MAAM,IAAI,MAAM,OAAO;AAAA,EAC7B,OAAO;AACL,QAAI,MAAM;AACV,QAAI,MAAM,KAAK;AAAA,EACjB;AAEA,SAAO;AACT;AAMO,IAAI,cAAc;AAelB,SAAS,cAAc,KAAK,MAAM,QAAQ,MAAM,KAAK;AAC1D,MAAI,IAAI,IAAM,KAAK,IAAI,OAAO,CAAC,GAC3B;AACJ,MAAI,KAAK,IAAI;AACb,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AAEV,MAAI,OAAO,QAAQ,QAAQ,UAAU;AACnC,SAAK,KAAK,OAAO;AACjB,QAAI,MAAM,MAAM;AAChB,QAAI,MAAM,MAAM,OAAO;AAAA,EACzB,OAAO;AACL,QAAI,MAAM;AACV,QAAI,MAAM,CAAC;AAAA,EACb;AAEA,SAAO;AACT;AAaO,SAAS,2BAA2B,KAAK,KAAK,MAAM,KAAK;AAC9D,MAAI,QAAQ,KAAK,IAAI,IAAI,YAAY,KAAK,KAAK,GAAK;AACpD,MAAI,UAAU,KAAK,IAAI,IAAI,cAAc,KAAK,KAAK,GAAK;AACxD,MAAI,UAAU,KAAK,IAAI,IAAI,cAAc,KAAK,KAAK,GAAK;AACxD,MAAI,WAAW,KAAK,IAAI,IAAI,eAAe,KAAK,KAAK,GAAK;AAC1D,MAAI,SAAS,KAAO,UAAU;AAC9B,MAAI,SAAS,KAAO,QAAQ;AAC5B,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK,GAAG,UAAU,YAAY,SAAS;AAC3C,MAAI,MAAM,QAAQ,WAAW,SAAS;AACtC,MAAI,MAAM,OAAO,OAAO;AACxB,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM,MAAM,QAAQ,OAAO;AAC/B,MAAI,MAAM;AACV,SAAO;AACT;AAgBO,SAAS,QAAQ,KAAK,MAAM,OAAO,QAAQ,KAAK,MAAM,KAAK;AAChE,MAAI,KAAK,KAAK,OAAO;AACrB,MAAI,KAAK,KAAK,SAAS;AACvB,MAAI,KAAK,KAAK,OAAO;AACrB,MAAI,KAAK,KAAK;AACd,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK,KAAK;AACd,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,MAAM,IAAI;AACd,MAAI,MAAM;AACV,MAAI,OAAO,OAAO,SAAS;AAC3B,MAAI,OAAO,MAAM,UAAU;AAC3B,MAAI,OAAO,MAAM,QAAQ;AACzB,MAAI,MAAM;AACV,SAAO;AACT;AAMO,IAAI,QAAQ;AAgBZ,SAAS,QAAQ,KAAK,MAAM,OAAO,QAAQ,KAAK,MAAM,KAAK;AAChE,MAAI,KAAK,KAAK,OAAO;AACrB,MAAI,KAAK,KAAK,SAAS;AACvB,MAAI,KAAK,KAAK,OAAO;AACrB,MAAI,KAAK,KAAK;AACd,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK,KAAK;AACd,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,OAAO,OAAO,SAAS;AAC3B,MAAI,OAAO,MAAM,UAAU;AAC3B,MAAI,MAAM,OAAO;AACjB,MAAI,MAAM;AACV,SAAO;AACT;AAYO,SAAS,OAAO,KAAK,KAAK,QAAQ,IAAI;AAC3C,MAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAIA;AACxC,MAAI,OAAO,IAAI;AACf,MAAI,OAAO,IAAI;AACf,MAAI,OAAO,IAAI;AACf,MAAI,MAAM,GAAG;AACb,MAAI,MAAM,GAAG;AACb,MAAI,MAAM,GAAG;AACb,MAAI,UAAU,OAAO;AACrB,MAAI,UAAU,OAAO;AACrB,MAAI,UAAU,OAAO;AAErB,MAAI,KAAK,IAAI,OAAO,OAAO,IAAa,WAAW,KAAK,IAAI,OAAO,OAAO,IAAa,WAAW,KAAK,IAAI,OAAO,OAAO,IAAa,SAAS;AAC7I,WAAO,SAAS,GAAG;AAAA,EACrB;AAEA,OAAK,OAAO;AACZ,OAAK,OAAO;AACZ,OAAK,OAAO;AACZ,EAAAA,OAAM,IAAI,KAAK,MAAM,IAAI,IAAI,EAAE;AAC/B,QAAMA;AACN,QAAMA;AACN,QAAMA;AACN,OAAK,MAAM,KAAK,MAAM;AACtB,OAAK,MAAM,KAAK,MAAM;AACtB,OAAK,MAAM,KAAK,MAAM;AACtB,EAAAA,OAAM,KAAK,MAAM,IAAI,IAAI,EAAE;AAE3B,MAAI,CAACA,MAAK;AACR,SAAK;AACL,SAAK;AACL,SAAK;AAAA,EACP,OAAO;AACL,IAAAA,OAAM,IAAIA;AACV,UAAMA;AACN,UAAMA;AACN,UAAMA;AAAA,EACR;AAEA,OAAK,KAAK,KAAK,KAAK;AACpB,OAAK,KAAK,KAAK,KAAK;AACpB,OAAK,KAAK,KAAK,KAAK;AACpB,EAAAA,OAAM,KAAK,MAAM,IAAI,IAAI,EAAE;AAE3B,MAAI,CAACA,MAAK;AACR,SAAK;AACL,SAAK;AACL,SAAK;AAAA,EACP,OAAO;AACL,IAAAA,OAAM,IAAIA;AACV,UAAMA;AACN,UAAMA;AACN,UAAMA;AAAA,EACR;AAEA,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM,EAAE,KAAK,OAAO,KAAK,OAAO,KAAK;AACzC,MAAI,MAAM,EAAE,KAAK,OAAO,KAAK,OAAO,KAAK;AACzC,MAAI,MAAM,EAAE,KAAK,OAAO,KAAK,OAAO,KAAK;AACzC,MAAI,MAAM;AACV,SAAO;AACT;AAWO,SAAS,SAAS,KAAK,KAAK,QAAQ,IAAI;AAC7C,MAAI,OAAO,IAAI,IACX,OAAO,IAAI,IACX,OAAO,IAAI,IACX,MAAM,GAAG,IACT,MAAM,GAAG,IACT,MAAM,GAAG;AACb,MAAI,KAAK,OAAO,OAAO,IACnB,KAAK,OAAO,OAAO,IACnB,KAAK,OAAO,OAAO;AACvB,MAAIA,OAAM,KAAK,KAAK,KAAK,KAAK,KAAK;AAEnC,MAAIA,OAAM,GAAG;AACX,IAAAA,OAAM,IAAI,KAAK,KAAKA,IAAG;AACvB,UAAMA;AACN,UAAMA;AACN,UAAMA;AAAA,EACR;AAEA,MAAI,KAAK,MAAM,KAAK,MAAM,IACtB,KAAK,MAAM,KAAK,MAAM,IACtB,KAAK,MAAM,KAAK,MAAM;AAC1B,EAAAA,OAAM,KAAK,KAAK,KAAK,KAAK,KAAK;AAE/B,MAAIA,OAAM,GAAG;AACX,IAAAA,OAAM,IAAI,KAAK,KAAKA,IAAG;AACvB,UAAMA;AACN,UAAMA;AACN,UAAMA;AAAA,EACR;AAEA,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK,KAAK,KAAK,KAAK;AACxB,MAAI,KAAK,KAAK,KAAK,KAAK;AACxB,MAAI,KAAK,KAAK,KAAK,KAAK;AACxB,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,MAAI,MAAM;AACV,SAAO;AACT;AAQO,SAAS,IAAI,GAAG;AACrB,SAAO,UAAU,EAAE,KAAK,OAAO,EAAE,KAAK,OAAO,EAAE,KAAK,OAAO,EAAE,KAAK,OAAO,EAAE,KAAK,OAAO,EAAE,KAAK,OAAO,EAAE,KAAK,OAAO,EAAE,KAAK,OAAO,EAAE,KAAK,OAAO,EAAE,KAAK,OAAO,EAAE,MAAM,OAAO,EAAE,MAAM,OAAO,EAAE,MAAM,OAAO,EAAE,MAAM,OAAO,EAAE,MAAM,OAAO,EAAE,MAAM;AAClP;AAQO,SAAS,KAAK,GAAG;AACtB,SAAO,KAAK,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG;AACxH;AAUO,SAAS,IAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,MAAM,EAAE,MAAM,EAAE;AACpB,MAAI,MAAM,EAAE,MAAM,EAAE;AACpB,MAAI,MAAM,EAAE,MAAM,EAAE;AACpB,MAAI,MAAM,EAAE,MAAM,EAAE;AACpB,MAAI,MAAM,EAAE,MAAM,EAAE;AACpB,MAAI,MAAM,EAAE,MAAM,EAAE;AACpB,SAAO;AACT;AAUO,SAAS,SAAS,KAAK,GAAG,GAAG;AAClC,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,MAAM,EAAE,MAAM,EAAE;AACpB,MAAI,MAAM,EAAE,MAAM,EAAE;AACpB,MAAI,MAAM,EAAE,MAAM,EAAE;AACpB,MAAI,MAAM,EAAE,MAAM,EAAE;AACpB,MAAI,MAAM,EAAE,MAAM,EAAE;AACpB,MAAI,MAAM,EAAE,MAAM,EAAE;AACpB,SAAO;AACT;AAUO,SAAS,eAAe,KAAK,GAAG,GAAG;AACxC,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,MAAM,EAAE,MAAM;AAClB,MAAI,MAAM,EAAE,MAAM;AAClB,MAAI,MAAM,EAAE,MAAM;AAClB,MAAI,MAAM,EAAE,MAAM;AAClB,MAAI,MAAM,EAAE,MAAM;AAClB,MAAI,MAAM,EAAE,MAAM;AAClB,SAAO;AACT;AAWO,SAAS,qBAAqB,KAAK,GAAG,GAAGC,QAAO;AACrD,MAAI,KAAK,EAAE,KAAK,EAAE,KAAKA;AACvB,MAAI,KAAK,EAAE,KAAK,EAAE,KAAKA;AACvB,MAAI,KAAK,EAAE,KAAK,EAAE,KAAKA;AACvB,MAAI,KAAK,EAAE,KAAK,EAAE,KAAKA;AACvB,MAAI,KAAK,EAAE,KAAK,EAAE,KAAKA;AACvB,MAAI,KAAK,EAAE,KAAK,EAAE,KAAKA;AACvB,MAAI,KAAK,EAAE,KAAK,EAAE,KAAKA;AACvB,MAAI,KAAK,EAAE,KAAK,EAAE,KAAKA;AACvB,MAAI,KAAK,EAAE,KAAK,EAAE,KAAKA;AACvB,MAAI,KAAK,EAAE,KAAK,EAAE,KAAKA;AACvB,MAAI,MAAM,EAAE,MAAM,EAAE,MAAMA;AAC1B,MAAI,MAAM,EAAE,MAAM,EAAE,MAAMA;AAC1B,MAAI,MAAM,EAAE,MAAM,EAAE,MAAMA;AAC1B,MAAI,MAAM,EAAE,MAAM,EAAE,MAAMA;AAC1B,MAAI,MAAM,EAAE,MAAM,EAAE,MAAMA;AAC1B,MAAI,MAAM,EAAE,MAAM,EAAE,MAAMA;AAC1B,SAAO;AACT;AASO,SAAS,YAAY,GAAG,GAAG;AAChC,SAAO,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE;AAC9R;AASO,SAASC,QAAO,GAAG,GAAG;AAC3B,MAAI,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE;AACX,MAAI,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE;AACX,MAAI,KAAK,EAAE,IACP,KAAK,EAAE,IACP,MAAM,EAAE,KACR,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE,KACR,MAAM,EAAE,KACR,MAAM,EAAE,KACR,MAAM,EAAE;AACZ,MAAI,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE;AACX,MAAI,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE;AACX,MAAI,KAAK,EAAE,IACP,KAAK,EAAE,IACP,MAAM,EAAE,KACR,MAAM,EAAE;AACZ,MAAI,MAAM,EAAE,KACR,MAAM,EAAE,KACR,MAAM,EAAE,KACR,MAAM,EAAE;AACZ,SAAO,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC;AAC52C;AAMO,IAAI,MAAM;AAMV,IAAI,MAAM;;;ACr3DjB;AAAA;AAAA,aAAAC;AAAA,EAAA;AAAA;AAAA;AAAA,eAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA;AAAA;AAAA,oBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA,iBAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA;AAAA,eAAAC;AAAA,EAAA;AAAA,aAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,aAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAYO,SAASC,UAAS;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AAEnC,MAAa,cAAc,cAAc;AACvC,QAAI,KAAK;AACT,QAAI,KAAK;AACT,QAAI,KAAK;AAAA,EACX;AAEA,SAAO;AACT;AAQO,SAASC,OAAM,GAAG;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,SAAO;AACT;AAQO,SAAS,OAAO,GAAG;AACxB,MAAI,IAAI,EAAE;AACV,MAAI,IAAI,EAAE;AACV,MAAI,IAAI,EAAE;AACV,SAAO,KAAK,MAAM,GAAG,GAAG,CAAC;AAC3B;AAUO,SAASC,YAAW,GAAG,GAAG,GAAG;AAClC,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,SAAO;AACT;AASO,SAASC,MAAK,KAAK,GAAG;AAC3B,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,SAAO;AACT;AAWO,SAASC,KAAI,KAAK,GAAG,GAAG,GAAG;AAChC,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,SAAO;AACT;AAUO,SAAS,OAAO,KAAK,GAAG,GAAG;AAChC,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,SAAO;AACT;AASO,SAAS,KAAK,KAAK,GAAG;AAC3B,MAAI,KAAK,KAAK,KAAK,EAAE,EAAE;AACvB,MAAI,KAAK,KAAK,KAAK,EAAE,EAAE;AACvB,MAAI,KAAK,KAAK,KAAK,EAAE,EAAE;AACvB,SAAO;AACT;AASO,SAAS,MAAM,KAAK,GAAG;AAC5B,MAAI,KAAK,KAAK,MAAM,EAAE,EAAE;AACxB,MAAI,KAAK,KAAK,MAAM,EAAE,EAAE;AACxB,MAAI,KAAK,KAAK,MAAM,EAAE,EAAE;AACxB,SAAO;AACT;AAUO,SAAS,IAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,KAAK,KAAK,IAAI,EAAE,IAAI,EAAE,EAAE;AAC5B,MAAI,KAAK,KAAK,IAAI,EAAE,IAAI,EAAE,EAAE;AAC5B,MAAI,KAAK,KAAK,IAAI,EAAE,IAAI,EAAE,EAAE;AAC5B,SAAO;AACT;AAUO,SAAS,IAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,KAAK,KAAK,IAAI,EAAE,IAAI,EAAE,EAAE;AAC5B,MAAI,KAAK,KAAK,IAAI,EAAE,IAAI,EAAE,EAAE;AAC5B,MAAI,KAAK,KAAK,IAAI,EAAE,IAAI,EAAE,EAAE;AAC5B,SAAO;AACT;AASO,SAAS,MAAM,KAAK,GAAG;AAC5B,MAAI,KAAK,KAAK,MAAM,EAAE,EAAE;AACxB,MAAI,KAAK,KAAK,MAAM,EAAE,EAAE;AACxB,MAAI,KAAK,KAAK,MAAM,EAAE,EAAE;AACxB,SAAO;AACT;AAUO,SAASC,OAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,KAAK,EAAE,KAAK;AAChB,SAAO;AACT;AAWO,SAAS,YAAY,KAAK,GAAG,GAAGA,QAAO;AAC5C,MAAI,KAAK,EAAE,KAAK,EAAE,KAAKA;AACvB,MAAI,KAAK,EAAE,KAAK,EAAE,KAAKA;AACvB,MAAI,KAAK,EAAE,KAAK,EAAE,KAAKA;AACvB,SAAO;AACT;AASO,SAAS,SAAS,GAAG,GAAG;AAC7B,MAAI,IAAI,EAAE,KAAK,EAAE;AACjB,MAAI,IAAI,EAAE,KAAK,EAAE;AACjB,MAAI,IAAI,EAAE,KAAK,EAAE;AACjB,SAAO,KAAK,MAAM,GAAG,GAAG,CAAC;AAC3B;AASO,SAAS,gBAAgB,GAAG,GAAG;AACpC,MAAI,IAAI,EAAE,KAAK,EAAE;AACjB,MAAI,IAAI,EAAE,KAAK,EAAE;AACjB,MAAI,IAAI,EAAE,KAAK,EAAE;AACjB,SAAO,IAAI,IAAI,IAAI,IAAI,IAAI;AAC7B;AAQO,SAAS,cAAc,GAAG;AAC/B,MAAI,IAAI,EAAE;AACV,MAAI,IAAI,EAAE;AACV,MAAI,IAAI,EAAE;AACV,SAAO,IAAI,IAAI,IAAI,IAAI,IAAI;AAC7B;AASO,SAAS,OAAO,KAAK,GAAG;AAC7B,MAAI,KAAK,CAAC,EAAE;AACZ,MAAI,KAAK,CAAC,EAAE;AACZ,MAAI,KAAK,CAAC,EAAE;AACZ,SAAO;AACT;AASO,SAAS,QAAQ,KAAK,GAAG;AAC9B,MAAI,KAAK,IAAM,EAAE;AACjB,MAAI,KAAK,IAAM,EAAE;AACjB,MAAI,KAAK,IAAM,EAAE;AACjB,SAAO;AACT;AASO,SAAS,UAAU,KAAK,GAAG;AAChC,MAAI,IAAI,EAAE;AACV,MAAI,IAAI,EAAE;AACV,MAAI,IAAI,EAAE;AACV,MAAIC,OAAM,IAAI,IAAI,IAAI,IAAI,IAAI;AAE9B,MAAIA,OAAM,GAAG;AAEX,IAAAA,OAAM,IAAI,KAAK,KAAKA,IAAG;AAAA,EACzB;AAEA,MAAI,KAAK,EAAE,KAAKA;AAChB,MAAI,KAAK,EAAE,KAAKA;AAChB,MAAI,KAAK,EAAE,KAAKA;AAChB,SAAO;AACT;AASO,SAAS,IAAI,GAAG,GAAG;AACxB,SAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE;AAC9C;AAUO,SAAS,MAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE;AACX,MAAI,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE;AACX,MAAI,KAAK,KAAK,KAAK,KAAK;AACxB,MAAI,KAAK,KAAK,KAAK,KAAK;AACxB,MAAI,KAAK,KAAK,KAAK,KAAK;AACxB,SAAO;AACT;AAWO,SAAS,KAAK,KAAK,GAAG,GAAG,GAAG;AACjC,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,KAAK,KAAK,EAAE,KAAK;AAC1B,MAAI,KAAK,KAAK,KAAK,EAAE,KAAK;AAC1B,MAAI,KAAK,KAAK,KAAK,EAAE,KAAK;AAC1B,SAAO;AACT;AAaO,SAAS,QAAQ,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG;AAC1C,MAAI,eAAe,IAAI;AACvB,MAAI,UAAU,gBAAgB,IAAI,IAAI,KAAK;AAC3C,MAAI,UAAU,gBAAgB,IAAI,KAAK;AACvC,MAAI,UAAU,gBAAgB,IAAI;AAClC,MAAI,UAAU,gBAAgB,IAAI,IAAI;AACtC,MAAI,KAAK,EAAE,KAAK,UAAU,EAAE,KAAK,UAAU,EAAE,KAAK,UAAU,EAAE,KAAK;AACnE,MAAI,KAAK,EAAE,KAAK,UAAU,EAAE,KAAK,UAAU,EAAE,KAAK,UAAU,EAAE,KAAK;AACnE,MAAI,KAAK,EAAE,KAAK,UAAU,EAAE,KAAK,UAAU,EAAE,KAAK,UAAU,EAAE,KAAK;AACnE,SAAO;AACT;AAaO,SAAS,OAAO,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG;AACzC,MAAI,gBAAgB,IAAI;AACxB,MAAI,wBAAwB,gBAAgB;AAC5C,MAAI,eAAe,IAAI;AACvB,MAAI,UAAU,wBAAwB;AACtC,MAAI,UAAU,IAAI,IAAI;AACtB,MAAI,UAAU,IAAI,eAAe;AACjC,MAAI,UAAU,eAAe;AAC7B,MAAI,KAAK,EAAE,KAAK,UAAU,EAAE,KAAK,UAAU,EAAE,KAAK,UAAU,EAAE,KAAK;AACnE,MAAI,KAAK,EAAE,KAAK,UAAU,EAAE,KAAK,UAAU,EAAE,KAAK,UAAU,EAAE,KAAK;AACnE,MAAI,KAAK,EAAE,KAAK,UAAU,EAAE,KAAK,UAAU,EAAE,KAAK,UAAU,EAAE,KAAK;AACnE,SAAO;AACT;AASO,SAAS,OAAO,KAAKD,QAAO;AACjC,EAAAA,SAAQA,UAAS;AACjB,MAAI,IAAa,OAAO,IAAI,IAAM,KAAK;AACvC,MAAI,IAAa,OAAO,IAAI,IAAM;AAClC,MAAI,SAAS,KAAK,KAAK,IAAM,IAAI,CAAC,IAAIA;AACtC,MAAI,KAAK,KAAK,IAAI,CAAC,IAAI;AACvB,MAAI,KAAK,KAAK,IAAI,CAAC,IAAI;AACvB,MAAI,KAAK,IAAIA;AACb,SAAO;AACT;AAWO,SAAS,cAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,IACN,IAAI,EAAE,IACN,IAAI,EAAE;AACV,MAAI,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,MAAM,IAAI,EAAE;AAC5C,MAAI,KAAK;AACT,MAAI,MAAM,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,OAAO;AACpD,MAAI,MAAM,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,OAAO;AACpD,MAAI,MAAM,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,MAAM,IAAI,EAAE,OAAO;AACrD,SAAO;AACT;AAUO,SAAS,cAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,IACN,IAAI,EAAE,IACN,IAAI,EAAE;AACV,MAAI,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE;AACrC,MAAI,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE;AACrC,MAAI,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE;AACrC,SAAO;AACT;AAWO,SAAS,cAAc,KAAK,GAAG,GAAG;AAEvC,MAAI,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE;AACX,MAAI,IAAI,EAAE,IACN,IAAI,EAAE,IACN,IAAI,EAAE;AAGV,MAAI,MAAM,KAAK,IAAI,KAAK,GACpB,MAAM,KAAK,IAAI,KAAK,GACpB,MAAM,KAAK,IAAI,KAAK;AAExB,MAAI,OAAO,KAAK,MAAM,KAAK,KACvB,OAAO,KAAK,MAAM,KAAK,KACvB,OAAO,KAAK,MAAM,KAAK;AAE3B,MAAI,KAAK,KAAK;AACd,SAAO;AACP,SAAO;AACP,SAAO;AAEP,UAAQ;AACR,UAAQ;AACR,UAAQ;AAER,MAAI,KAAK,IAAI,MAAM;AACnB,MAAI,KAAK,IAAI,MAAM;AACnB,MAAI,KAAK,IAAI,MAAM;AACnB,SAAO;AACT;AAUO,SAASE,SAAQ,KAAK,GAAG,GAAG,KAAK;AACtC,MAAI,IAAI,CAAC,GACL,IAAI,CAAC;AAET,IAAE,KAAK,EAAE,KAAK,EAAE;AAChB,IAAE,KAAK,EAAE,KAAK,EAAE;AAChB,IAAE,KAAK,EAAE,KAAK,EAAE;AAEhB,IAAE,KAAK,EAAE;AACT,IAAE,KAAK,EAAE,KAAK,KAAK,IAAI,GAAG,IAAI,EAAE,KAAK,KAAK,IAAI,GAAG;AACjD,IAAE,KAAK,EAAE,KAAK,KAAK,IAAI,GAAG,IAAI,EAAE,KAAK,KAAK,IAAI,GAAG;AAEjD,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,SAAO;AACT;AAUO,SAASC,SAAQ,KAAK,GAAG,GAAG,KAAK;AACtC,MAAI,IAAI,CAAC,GACL,IAAI,CAAC;AAET,IAAE,KAAK,EAAE,KAAK,EAAE;AAChB,IAAE,KAAK,EAAE,KAAK,EAAE;AAChB,IAAE,KAAK,EAAE,KAAK,EAAE;AAEhB,IAAE,KAAK,EAAE,KAAK,KAAK,IAAI,GAAG,IAAI,EAAE,KAAK,KAAK,IAAI,GAAG;AACjD,IAAE,KAAK,EAAE;AACT,IAAE,KAAK,EAAE,KAAK,KAAK,IAAI,GAAG,IAAI,EAAE,KAAK,KAAK,IAAI,GAAG;AAEjD,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,SAAO;AACT;AAUO,SAASC,SAAQ,KAAK,GAAG,GAAG,KAAK;AACtC,MAAI,IAAI,CAAC,GACL,IAAI,CAAC;AAET,IAAE,KAAK,EAAE,KAAK,EAAE;AAChB,IAAE,KAAK,EAAE,KAAK,EAAE;AAChB,IAAE,KAAK,EAAE,KAAK,EAAE;AAEhB,IAAE,KAAK,EAAE,KAAK,KAAK,IAAI,GAAG,IAAI,EAAE,KAAK,KAAK,IAAI,GAAG;AACjD,IAAE,KAAK,EAAE,KAAK,KAAK,IAAI,GAAG,IAAI,EAAE,KAAK,KAAK,IAAI,GAAG;AACjD,IAAE,KAAK,EAAE;AAET,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,SAAO;AACT;AAQO,SAAS,MAAM,GAAG,GAAG;AAC1B,MAAI,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE,IACP,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE,GAC5C,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE,GAC5C,MAAM,OAAO,MACb,SAAS,OAAO,IAAI,GAAG,CAAC,IAAI;AAChC,SAAO,KAAK,KAAK,KAAK,IAAI,KAAK,IAAI,QAAQ,EAAE,GAAG,CAAC,CAAC;AACpD;AAQO,SAAS,KAAK,KAAK;AACxB,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,SAAO;AACT;AAQO,SAASC,KAAI,GAAG;AACrB,SAAO,UAAU,EAAE,KAAK,OAAO,EAAE,KAAK,OAAO,EAAE,KAAK;AACtD;AASO,SAASC,aAAY,GAAG,GAAG;AAChC,SAAO,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE;AACtD;AASO,SAASC,QAAO,GAAG,GAAG;AAC3B,MAAI,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE;AACX,MAAI,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE;AACX,SAAO,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC;AACnQ;AAMO,IAAIC,OAAMV;AAMV,IAAIW,OAAMV;AAMV,IAAI,MAAM;AAMV,IAAI,OAAO;AAMX,IAAI,UAAU;AAMd,IAAI,MAAM;AAMV,IAAI,SAAS;AAcb,IAAI,UAAU,WAAY;AAC/B,MAAI,MAAMP,QAAO;AACjB,SAAO,SAAU,GAAG,QAAQ,QAAQ,OAAO,IAAI,KAAK;AAClD,QAAI,GAAG;AAEP,QAAI,CAAC,QAAQ;AACX,eAAS;AAAA,IACX;AAEA,QAAI,CAAC,QAAQ;AACX,eAAS;AAAA,IACX;AAEA,QAAI,OAAO;AACT,UAAI,KAAK,IAAI,QAAQ,SAAS,QAAQ,EAAE,MAAM;AAAA,IAChD,OAAO;AACL,UAAI,EAAE;AAAA,IACR;AAEA,SAAK,IAAI,QAAQ,IAAI,GAAG,KAAK,QAAQ;AACnC,UAAI,KAAK,EAAE;AACX,UAAI,KAAK,EAAE,IAAI;AACf,UAAI,KAAK,EAAE,IAAI;AACf,SAAG,KAAK,KAAK,GAAG;AAChB,QAAE,KAAK,IAAI;AACX,QAAE,IAAI,KAAK,IAAI;AACf,QAAE,IAAI,KAAK,IAAI;AAAA,IACjB;AAEA,WAAO;AAAA,EACT;AACF,EAAE;;;AClxBF;AAAA;AAAA,aAAAkB;AAAA,EAAA,YAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,kBAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,iBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,uBAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,YAAAC;AAAA;AAYO,SAASC,UAAS;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AAEnC,MAAa,cAAc,cAAc;AACvC,QAAI,KAAK;AACT,QAAI,KAAK;AACT,QAAI,KAAK;AACT,QAAI,KAAK;AAAA,EACX;AAEA,SAAO;AACT;AAQO,SAASC,OAAM,GAAG;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,SAAO;AACT;AAWO,SAASC,YAAW,GAAG,GAAG,GAAG,GAAG;AACrC,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,SAAO;AACT;AASO,SAASC,MAAK,KAAK,GAAG;AAC3B,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,SAAO;AACT;AAYO,SAASC,KAAI,KAAK,GAAG,GAAG,GAAG,GAAG;AACnC,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,SAAO;AACT;AAUO,SAASC,QAAO,KAAK,GAAG,GAAG;AAChC,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,SAAO;AACT;AASO,SAASC,MAAK,KAAK,GAAG;AAC3B,MAAI,KAAK,KAAK,KAAK,EAAE,EAAE;AACvB,MAAI,KAAK,KAAK,KAAK,EAAE,EAAE;AACvB,MAAI,KAAK,KAAK,KAAK,EAAE,EAAE;AACvB,MAAI,KAAK,KAAK,KAAK,EAAE,EAAE;AACvB,SAAO;AACT;AASO,SAASC,OAAM,KAAK,GAAG;AAC5B,MAAI,KAAK,KAAK,MAAM,EAAE,EAAE;AACxB,MAAI,KAAK,KAAK,MAAM,EAAE,EAAE;AACxB,MAAI,KAAK,KAAK,MAAM,EAAE,EAAE;AACxB,MAAI,KAAK,KAAK,MAAM,EAAE,EAAE;AACxB,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,KAAK,KAAK,IAAI,EAAE,IAAI,EAAE,EAAE;AAC5B,MAAI,KAAK,KAAK,IAAI,EAAE,IAAI,EAAE,EAAE;AAC5B,MAAI,KAAK,KAAK,IAAI,EAAE,IAAI,EAAE,EAAE;AAC5B,MAAI,KAAK,KAAK,IAAI,EAAE,IAAI,EAAE,EAAE;AAC5B,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,KAAK,KAAK,IAAI,EAAE,IAAI,EAAE,EAAE;AAC5B,MAAI,KAAK,KAAK,IAAI,EAAE,IAAI,EAAE,EAAE;AAC5B,MAAI,KAAK,KAAK,IAAI,EAAE,IAAI,EAAE,EAAE;AAC5B,MAAI,KAAK,KAAK,IAAI,EAAE,IAAI,EAAE,EAAE;AAC5B,SAAO;AACT;AASO,SAASC,OAAM,KAAK,GAAG;AAC5B,MAAI,KAAK,KAAK,MAAM,EAAE,EAAE;AACxB,MAAI,KAAK,KAAK,MAAM,EAAE,EAAE;AACxB,MAAI,KAAK,KAAK,MAAM,EAAE,EAAE;AACxB,MAAI,KAAK,KAAK,MAAM,EAAE,EAAE;AACxB,SAAO;AACT;AAUO,SAASC,OAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,KAAK,EAAE,KAAK;AAChB,SAAO;AACT;AAWO,SAASC,aAAY,KAAK,GAAG,GAAGD,QAAO;AAC5C,MAAI,KAAK,EAAE,KAAK,EAAE,KAAKA;AACvB,MAAI,KAAK,EAAE,KAAK,EAAE,KAAKA;AACvB,MAAI,KAAK,EAAE,KAAK,EAAE,KAAKA;AACvB,MAAI,KAAK,EAAE,KAAK,EAAE,KAAKA;AACvB,SAAO;AACT;AASO,SAASE,UAAS,GAAG,GAAG;AAC7B,MAAI,IAAI,EAAE,KAAK,EAAE;AACjB,MAAI,IAAI,EAAE,KAAK,EAAE;AACjB,MAAI,IAAI,EAAE,KAAK,EAAE;AACjB,MAAI,IAAI,EAAE,KAAK,EAAE;AACjB,SAAO,KAAK,MAAM,GAAG,GAAG,GAAG,CAAC;AAC9B;AASO,SAASC,iBAAgB,GAAG,GAAG;AACpC,MAAI,IAAI,EAAE,KAAK,EAAE;AACjB,MAAI,IAAI,EAAE,KAAK,EAAE;AACjB,MAAI,IAAI,EAAE,KAAK,EAAE;AACjB,MAAI,IAAI,EAAE,KAAK,EAAE;AACjB,SAAO,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AACrC;AAQO,SAASC,QAAO,GAAG;AACxB,MAAI,IAAI,EAAE;AACV,MAAI,IAAI,EAAE;AACV,MAAI,IAAI,EAAE;AACV,MAAI,IAAI,EAAE;AACV,SAAO,KAAK,MAAM,GAAG,GAAG,GAAG,CAAC;AAC9B;AAQO,SAASC,eAAc,GAAG;AAC/B,MAAI,IAAI,EAAE;AACV,MAAI,IAAI,EAAE;AACV,MAAI,IAAI,EAAE;AACV,MAAI,IAAI,EAAE;AACV,SAAO,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AACrC;AASO,SAASC,QAAO,KAAK,GAAG;AAC7B,MAAI,KAAK,CAAC,EAAE;AACZ,MAAI,KAAK,CAAC,EAAE;AACZ,MAAI,KAAK,CAAC,EAAE;AACZ,MAAI,KAAK,CAAC,EAAE;AACZ,SAAO;AACT;AASO,SAASC,SAAQ,KAAK,GAAG;AAC9B,MAAI,KAAK,IAAM,EAAE;AACjB,MAAI,KAAK,IAAM,EAAE;AACjB,MAAI,KAAK,IAAM,EAAE;AACjB,MAAI,KAAK,IAAM,EAAE;AACjB,SAAO;AACT;AASO,SAASC,WAAU,KAAK,GAAG;AAChC,MAAI,IAAI,EAAE;AACV,MAAI,IAAI,EAAE;AACV,MAAI,IAAI,EAAE;AACV,MAAI,IAAI,EAAE;AACV,MAAIC,OAAM,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAEtC,MAAIA,OAAM,GAAG;AACX,IAAAA,OAAM,IAAI,KAAK,KAAKA,IAAG;AAAA,EACzB;AAEA,MAAI,KAAK,IAAIA;AACb,MAAI,KAAK,IAAIA;AACb,MAAI,KAAK,IAAIA;AACb,MAAI,KAAK,IAAIA;AACb,SAAO;AACT;AASO,SAASC,KAAI,GAAG,GAAG;AACxB,SAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE;AAC5D;AAWO,SAASC,OAAM,KAAK,GAAG,GAAG,GAAG;AAClC,MAAI,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAC3B,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAC3B,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAC3B,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAC3B,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAC3B,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE;AAC/B,MAAI,IAAI,EAAE;AACV,MAAI,IAAI,EAAE;AACV,MAAI,IAAI,EAAE;AACV,MAAI,IAAI,EAAE;AACV,MAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI;AAC7B,MAAI,KAAK,EAAE,IAAI,KAAK,IAAI,IAAI,IAAI;AAChC,MAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI;AAC7B,MAAI,KAAK,EAAE,IAAI,KAAK,IAAI,IAAI,IAAI;AAChC,SAAO;AACT;AAWO,SAASC,MAAK,KAAK,GAAG,GAAG,GAAG;AACjC,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,KAAK,KAAK,EAAE,KAAK;AAC1B,MAAI,KAAK,KAAK,KAAK,EAAE,KAAK;AAC1B,MAAI,KAAK,KAAK,KAAK,EAAE,KAAK;AAC1B,MAAI,KAAK,KAAK,KAAK,EAAE,KAAK;AAC1B,SAAO;AACT;AASO,SAASC,QAAO,KAAKb,QAAO;AACjC,EAAAA,SAAQA,UAAS;AAIjB,MAAI,IAAI,IAAI,IAAI;AAChB,MAAI,IAAI;AAER,KAAG;AACD,SAAc,OAAO,IAAI,IAAI;AAC7B,SAAc,OAAO,IAAI,IAAI;AAC7B,SAAK,KAAK,KAAK,KAAK;AAAA,EACtB,SAAS,MAAM;AAEf,KAAG;AACD,SAAc,OAAO,IAAI,IAAI;AAC7B,SAAc,OAAO,IAAI,IAAI;AAC7B,SAAK,KAAK,KAAK,KAAK;AAAA,EACtB,SAAS,MAAM;AAEf,MAAI,IAAI,KAAK,MAAM,IAAI,MAAM,EAAE;AAC/B,MAAI,KAAKA,SAAQ;AACjB,MAAI,KAAKA,SAAQ;AACjB,MAAI,KAAKA,SAAQ,KAAK;AACtB,MAAI,KAAKA,SAAQ,KAAK;AACtB,SAAO;AACT;AAUO,SAASc,eAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,IACN,IAAI,EAAE,IACN,IAAI,EAAE,IACN,IAAI,EAAE;AACV,MAAI,KAAK,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,MAAM;AAClD,MAAI,KAAK,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,MAAM;AAClD,MAAI,KAAK,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,MAAM,IAAI,EAAE,MAAM;AACnD,MAAI,KAAK,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE,MAAM,IAAI,EAAE,MAAM;AACnD,SAAO;AACT;AAUO,SAASC,eAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,IACN,IAAI,EAAE,IACN,IAAI,EAAE;AACV,MAAI,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE;AAEX,MAAI,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK;AAChC,MAAI,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK;AAChC,MAAI,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK;AAChC,MAAI,KAAK,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK;AAEjC,MAAI,KAAK,KAAK,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC;AAC/C,MAAI,KAAK,KAAK,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC;AAC/C,MAAI,KAAK,KAAK,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC;AAC/C,MAAI,KAAK,EAAE;AACX,SAAO;AACT;AAQO,SAASC,MAAK,KAAK;AACxB,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,MAAI,KAAK;AACT,SAAO;AACT;AAQO,SAASC,KAAI,GAAG;AACrB,SAAO,UAAU,EAAE,KAAK,OAAO,EAAE,KAAK,OAAO,EAAE,KAAK,OAAO,EAAE,KAAK;AACpE;AASO,SAASC,aAAY,GAAG,GAAG;AAChC,SAAO,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE;AACvE;AASO,SAASC,QAAO,GAAG,GAAG;AAC3B,MAAI,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE;AACX,MAAI,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE;AACX,SAAO,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC;AACxV;AAMO,IAAIC,OAAM5B;AAMV,IAAI6B,OAAM5B;AAMV,IAAI6B,OAAM5B;AAMV,IAAI6B,QAAOrB;AAMX,IAAIsB,WAAUrB;AAMd,IAAIM,OAAML;AAMV,IAAIqB,UAASpB;AAcb,IAAIqB,WAAU,WAAY;AAC/B,MAAI,MAAMxC,QAAO;AACjB,SAAO,SAAU,GAAG,QAAQ,QAAQ,OAAO,IAAI,KAAK;AAClD,QAAI,GAAG;AAEP,QAAI,CAAC,QAAQ;AACX,eAAS;AAAA,IACX;AAEA,QAAI,CAAC,QAAQ;AACX,eAAS;AAAA,IACX;AAEA,QAAI,OAAO;AACT,UAAI,KAAK,IAAI,QAAQ,SAAS,QAAQ,EAAE,MAAM;AAAA,IAChD,OAAO;AACL,UAAI,EAAE;AAAA,IACR;AAEA,SAAK,IAAI,QAAQ,IAAI,GAAG,KAAK,QAAQ;AACnC,UAAI,KAAK,EAAE;AACX,UAAI,KAAK,EAAE,IAAI;AACf,UAAI,KAAK,EAAE,IAAI;AACf,UAAI,KAAK,EAAE,IAAI;AACf,SAAG,KAAK,KAAK,GAAG;AAChB,QAAE,KAAK,IAAI;AACX,QAAE,IAAI,KAAK,IAAI;AACf,QAAE,IAAI,KAAK,IAAI;AACf,QAAE,IAAI,KAAK,IAAI;AAAA,IACjB;AAEA,WAAO;AAAA,EACT;AACF,EAAE;;;ACtpBF;AAAA;AAAA,aAAAyC;AAAA,EAAA,aAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,kBAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,iBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,uBAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA;AAAA;AAAA,uBAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,YAAAC;AAAA;AAYO,SAASC,UAAS;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AAEnC,MAAa,cAAc,cAAc;AACvC,QAAI,KAAK;AACT,QAAI,KAAK;AAAA,EACX;AAEA,SAAO;AACT;AAQO,SAASC,OAAM,GAAG;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,SAAO;AACT;AASO,SAASC,YAAW,GAAG,GAAG;AAC/B,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,KAAK;AACT,MAAI,KAAK;AACT,SAAO;AACT;AASO,SAASC,MAAK,KAAK,GAAG;AAC3B,MAAI,KAAK,EAAE;AACX,MAAI,KAAK,EAAE;AACX,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,KAAK;AACT,MAAI,KAAK;AACT,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,SAAO;AACT;AAUO,SAASC,QAAO,KAAK,GAAG,GAAG;AAChC,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,MAAI,KAAK,EAAE,KAAK,EAAE;AAClB,SAAO;AACT;AASO,SAASC,MAAK,KAAK,GAAG;AAC3B,MAAI,KAAK,KAAK,KAAK,EAAE,EAAE;AACvB,MAAI,KAAK,KAAK,KAAK,EAAE,EAAE;AACvB,SAAO;AACT;AASO,SAASC,OAAM,KAAK,GAAG;AAC5B,MAAI,KAAK,KAAK,MAAM,EAAE,EAAE;AACxB,MAAI,KAAK,KAAK,MAAM,EAAE,EAAE;AACxB,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,KAAK,KAAK,IAAI,EAAE,IAAI,EAAE,EAAE;AAC5B,MAAI,KAAK,KAAK,IAAI,EAAE,IAAI,EAAE,EAAE;AAC5B,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,KAAK,KAAK,IAAI,EAAE,IAAI,EAAE,EAAE;AAC5B,MAAI,KAAK,KAAK,IAAI,EAAE,IAAI,EAAE,EAAE;AAC5B,SAAO;AACT;AASO,SAASC,OAAM,KAAK,GAAG;AAC5B,MAAI,KAAK,KAAK,MAAM,EAAE,EAAE;AACxB,MAAI,KAAK,KAAK,MAAM,EAAE,EAAE;AACxB,SAAO;AACT;AAUO,SAASC,OAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,KAAK,EAAE,KAAK;AAChB,MAAI,KAAK,EAAE,KAAK;AAChB,SAAO;AACT;AAWO,SAASC,aAAY,KAAK,GAAG,GAAGD,QAAO;AAC5C,MAAI,KAAK,EAAE,KAAK,EAAE,KAAKA;AACvB,MAAI,KAAK,EAAE,KAAK,EAAE,KAAKA;AACvB,SAAO;AACT;AASO,SAASE,UAAS,GAAG,GAAG;AAC7B,MAAI,IAAI,EAAE,KAAK,EAAE,IACb,IAAI,EAAE,KAAK,EAAE;AACjB,SAAO,KAAK,MAAM,GAAG,CAAC;AACxB;AASO,SAASC,iBAAgB,GAAG,GAAG;AACpC,MAAI,IAAI,EAAE,KAAK,EAAE,IACb,IAAI,EAAE,KAAK,EAAE;AACjB,SAAO,IAAI,IAAI,IAAI;AACrB;AAQO,SAASC,QAAO,GAAG;AACxB,MAAI,IAAI,EAAE,IACN,IAAI,EAAE;AACV,SAAO,KAAK,MAAM,GAAG,CAAC;AACxB;AAQO,SAASC,eAAc,GAAG;AAC/B,MAAI,IAAI,EAAE,IACN,IAAI,EAAE;AACV,SAAO,IAAI,IAAI,IAAI;AACrB;AASO,SAASC,QAAO,KAAK,GAAG;AAC7B,MAAI,KAAK,CAAC,EAAE;AACZ,MAAI,KAAK,CAAC,EAAE;AACZ,SAAO;AACT;AASO,SAASC,SAAQ,KAAK,GAAG;AAC9B,MAAI,KAAK,IAAM,EAAE;AACjB,MAAI,KAAK,IAAM,EAAE;AACjB,SAAO;AACT;AASO,SAASC,WAAU,KAAK,GAAG;AAChC,MAAI,IAAI,EAAE,IACN,IAAI,EAAE;AACV,MAAIC,OAAM,IAAI,IAAI,IAAI;AAEtB,MAAIA,OAAM,GAAG;AAEX,IAAAA,OAAM,IAAI,KAAK,KAAKA,IAAG;AAAA,EACzB;AAEA,MAAI,KAAK,EAAE,KAAKA;AAChB,MAAI,KAAK,EAAE,KAAKA;AAChB,SAAO;AACT;AASO,SAASC,KAAI,GAAG,GAAG;AACxB,SAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE;AAChC;AAWO,SAASC,OAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE;AAC/B,MAAI,KAAK,IAAI,KAAK;AAClB,MAAI,KAAK;AACT,SAAO;AACT;AAWO,SAASC,MAAK,KAAK,GAAG,GAAG,GAAG;AACjC,MAAI,KAAK,EAAE,IACP,KAAK,EAAE;AACX,MAAI,KAAK,KAAK,KAAK,EAAE,KAAK;AAC1B,MAAI,KAAK,KAAK,KAAK,EAAE,KAAK;AAC1B,SAAO;AACT;AASO,SAASC,QAAO,KAAKb,QAAO;AACjC,EAAAA,SAAQA,UAAS;AACjB,MAAI,IAAa,OAAO,IAAI,IAAM,KAAK;AACvC,MAAI,KAAK,KAAK,IAAI,CAAC,IAAIA;AACvB,MAAI,KAAK,KAAK,IAAI,CAAC,IAAIA;AACvB,SAAO;AACT;AAUO,SAAS,cAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,IACN,IAAI,EAAE;AACV,MAAI,KAAK,EAAE,KAAK,IAAI,EAAE,KAAK;AAC3B,MAAI,KAAK,EAAE,KAAK,IAAI,EAAE,KAAK;AAC3B,SAAO;AACT;AAUO,SAAS,eAAe,KAAK,GAAG,GAAG;AACxC,MAAI,IAAI,EAAE,IACN,IAAI,EAAE;AACV,MAAI,KAAK,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE;AACjC,MAAI,KAAK,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE;AACjC,SAAO;AACT;AAWO,SAASc,eAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,IACN,IAAI,EAAE;AACV,MAAI,KAAK,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE;AACjC,MAAI,KAAK,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE;AACjC,SAAO;AACT;AAYO,SAASC,eAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE;AACV,MAAI,IAAI,EAAE;AACV,MAAI,KAAK,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE;AACjC,MAAI,KAAK,EAAE,KAAK,IAAI,EAAE,KAAK,IAAI,EAAE;AACjC,SAAO;AACT;AAUO,SAASC,QAAO,KAAK,GAAG,GAAG,KAAK;AAErC,MAAI,KAAK,EAAE,KAAK,EAAE,IACd,KAAK,EAAE,KAAK,EAAE,IACd,OAAO,KAAK,IAAI,GAAG,GACnB,OAAO,KAAK,IAAI,GAAG;AAEvB,MAAI,KAAK,KAAK,OAAO,KAAK,OAAO,EAAE;AACnC,MAAI,KAAK,KAAK,OAAO,KAAK,OAAO,EAAE;AACnC,SAAO;AACT;AAQO,SAASC,OAAM,GAAG,GAAG;AAC1B,MAAI,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE,IACP,KAAK,EAAE,IAEX,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE,GAEhE,SAAS,QAAQ,KAAK,KAAK,KAAK,MAAM;AAEtC,SAAO,KAAK,KAAK,KAAK,IAAI,KAAK,IAAI,QAAQ,EAAE,GAAG,CAAC,CAAC;AACpD;AAQO,SAASC,MAAK,KAAK;AACxB,MAAI,KAAK;AACT,MAAI,KAAK;AACT,SAAO;AACT;AAQO,SAASC,KAAI,GAAG;AACrB,SAAO,UAAU,EAAE,KAAK,OAAO,EAAE,KAAK;AACxC;AASO,SAASC,aAAY,GAAG,GAAG;AAChC,SAAO,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE;AACrC;AASO,SAASC,QAAO,GAAG,GAAG;AAC3B,MAAI,KAAK,EAAE,IACP,KAAK,EAAE;AACX,MAAI,KAAK,EAAE,IACP,KAAK,EAAE;AACX,SAAO,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC;AAC9K;AAMO,IAAIZ,OAAML;AAMV,IAAIkB,OAAM9B;AAMV,IAAI+B,OAAM9B;AAMV,IAAI+B,OAAM9B;AAMV,IAAI+B,QAAOvB;AAMX,IAAIwB,WAAUvB;AAMd,IAAIwB,UAAStB;AAcb,IAAIuB,WAAU,WAAY;AAC/B,MAAI,MAAM1C,QAAO;AACjB,SAAO,SAAU,GAAG,QAAQ,QAAQ,OAAO,IAAI,KAAK;AAClD,QAAI,GAAG;AAEP,QAAI,CAAC,QAAQ;AACX,eAAS;AAAA,IACX;AAEA,QAAI,CAAC,QAAQ;AACX,eAAS;AAAA,IACX;AAEA,QAAI,OAAO;AACT,UAAI,KAAK,IAAI,QAAQ,SAAS,QAAQ,EAAE,MAAM;AAAA,IAChD,OAAO;AACL,UAAI,EAAE;AAAA,IACR;AAEA,SAAK,IAAI,QAAQ,IAAI,GAAG,KAAK,QAAQ;AACnC,UAAI,KAAK,EAAE;AACX,UAAI,KAAK,EAAE,IAAI;AACf,SAAG,KAAK,KAAK,GAAG;AAChB,QAAE,KAAK,IAAI;AACX,QAAE,IAAI,KAAK,IAAI;AAAA,IACjB;AAEA,WAAO;AAAA,EACT;AACF,EAAE;;;AC/mBK,IAAM,eAAN,cAA2B,MAAM;AAAA,EACtC,YAAqB,MAAc,SAAiB;AAClD,UAAM,OAAO;AADM;AAAA,EAErB;AACF;;;AC4BA,eAAS,mBAAmB,KAAK;AAM1B,IAAM,eAAN,MAAmB;AAAA,EAExB,YAAqB,UAAwB,gBAAgC;AAAxD;AAAwB;AAC3C,SAAK,cAAc,KAAK,eAAe;AAAA,MACrC,SAAS,SAAS;AAAA,IACpB;AAAA,EACF;AAAA,EALS;AAAA,EAOT,MAAc,YACZ,GACA,GACA,UACA,UACA;AACA,QAAI,EAAE,YAAY,UAAU;AAC1B,UAAI,EAAE,YAAY,UAAU;AAC1B,eAAO,KAAK,aAAa,EAAE,WAAmB,EAAE,SAAiB;AAAA,MACnE;AACA,aAAO,KAAK,eAAe,GAAG,EAAE,WAAmB,QAAQ;AAAA,IAC7D;AACA,QAAI,EAAE,YAAY,UAAU;AAC1B,aAAO,KAAK,eAAe,GAAG,EAAE,WAAmB,QAAQ;AAAA,IAC7D;AAEA,UAAM,cAAc,MAAM,KAAK;AAC/B,UAAM,WAAW;AAAA,MACf,EAAE,QAAQ,GAAG,UAAU,SAAS;AAAA,MAChC,EAAE,QAAQ,GAAG,UAAU,SAAS;AAAA,IAClC;AACA,aAAS,KAAK,CAAC2C,IAAGC,OAAMD,GAAE,OAAO,SAAS,cAAcC,GAAE,OAAO,QAAQ,CAAC;AAC1E,UAAM,CAAC,GAAG,CAAC,IAAI;AACf,UAAM,YAAY,GAAG,EAAE,OAAO,YAAY,EAAE,OAAO;AACnD,YAAQ;AAAA,WACD;AACH,eAAO,MAAM,YAAY;AAAA,UACvB,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,QACX;AAAA,WACG;AACH,eAAO,MAAM,YAAY;AAAA,UACvB,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,QACX;AAAA,WACG;AACH,eAAO,MAAM,YAAY;AAAA,UACvB,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE;AAAA,QACJ;AAAA,WACG;AACH,eAAO,MAAM,YAAY;AAAA,UACvB,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,QACJ;AAAA,WACG;AACH,eAAO,MAAM,YAAY;AAAA,UACvB,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE,OAAO;AAAA,UACT,EAAE;AAAA,QACJ;AAAA,WACG;AACH,eAAO,MAAM,YAAY;AAAA,UACvB,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,QACJ;AAAA;AAAA,EAEN;AAAA,EAEA,MAAc,cAAc,GAAkB,SAA2B;AACvE,UAAM,cAAc,MAAM,KAAK;AAC/B,YAAQ,EAAE;AAAA,WACH;AACH,eAAO,MAAM,YAAY;AAAA,UACvB,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF;AAAA,QACF;AAAA,WACG;AACH,eAAO,MAAM,YAAY;AAAA,UACvB,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF;AAAA,QACF;AAAA,WACG;AACH,eAAO,MAAM,YAAY;AAAA,UACvB,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF;AAAA,QACF;AAAA;AAAA,EAEN;AAAA,EAGA,MAAM,QACJ,GACA,GACA,UACA,UACwC;AACxC,WAAO,IACH,MAAM,KAAK,YAAY,GAAG,GAAG,UAAU,QAAQ,IAC/C,MAAM,KAAK,cAAc,GAAG,QAAQ;AAAA,EAC1C;AAAA,EAGA,MAAM,eACJ,GACA,GACA,SAC2C;AAC3C,UAAM,QAAQ,aAAK,KAAK,aAAK,OAAO,GAAG,CAAC;AACxC,QAAI,EAAE,YAAY,UAAU;AAC1B,aAAO,KAAK,aAAa,EAAE,WAAmB,KAAK;AAAA,IACrD;AACA,UAAM,cAAc,MAAM,KAAK;AAC/B,YAAQ,EAAE;AAAA,WACH;AACH,eAAO,MAAM,YAAY;AAAA,UACvB,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF;AAAA,QACF;AAAA,WACG;AACH,eAAO,MAAM,YAAY;AAAA,UACvB,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF;AAAA,QACF;AAAA,WACG;AACH,eAAO,MAAM,YAAY;AAAA,UACvB,EAAE;AAAA,UACF,EAAE;AAAA,UACF,EAAE;AAAA,UACF;AAAA,UACA;AAAA,QACF;AAAA;AAAA,EAEN;AAAA,EAGA,aAAa,GAAiB,GAAuC;AACnE,UAAM,OAAO,aAAK,IAAI,aAAK,OAAO,GAAG,GAAG,CAAC;AACzC,WAAO;AAAA,MACL,UAAU;AAAA,MACV,UAAU,aAAK,IAAI,IAAI;AAAA,MACvB,WAAW,KAAK,IAAI,KAAK,EAAE;AAAA,MAC3B,WAAW,KAAK,IAAI,KAAK,EAAE;AAAA,MAC3B,WAAW,KAAK,IAAI,KAAK,EAAE;AAAA,MAC3B,cAAc,EAAE,OAAO,aAAK,KAAK,aAAK,OAAO,GAAG,CAAC,EAAE;AAAA,MACnD,cAAc,EAAE,OAAO,aAAK,KAAK,aAAK,OAAO,GAAG,CAAC,EAAE;AAAA,IACrD;AAAA,EACF;AAAA,EAEA,MAAM,UACJ,GACA,GACA,SACsC;AACtC,QAAI,EAAE,YAAY,UAAU,EAAE,YAAY,QAAQ;AAChD,YAAM,cAAc,MAAM,KAAK;AAC/B,aAAO,MAAM,YAAY;AAAA,QAAoB,EAAE;AAAA,QAC7C,EAAE;AAAA,QACF,EAAE;AAAA,QACF,EAAE;AAAA,QACF,EAAE;AAAA,QACF,EAAE;AAAA,QACF;AAAA,MAAO;AAAA,IACX;AACA,WAAO;AAAA,EACT;AAAA,EAKA,MAAM,gBACJ,GACA,WACmC;AACnC,UAAM,cAAc,MAAM,KAAK;AAC/B,WAAO,YAAY;AAAA,MACjB,EAAE;AAAA,MACF,EAAE;AAAA,MACF,EAAE;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAGA,MAAM,kBACJ,IACA,mBACA,WACgF;AAChF,UAAM,cAAc,MAAM,KAAK;AAC/B,UAAM,MAAM,aAAK,KAAK,aAAK,OAAO,GAAG,iBAAiB;AACtD,WAAO,MAAM,YAAY,WAAW,IAAI,KAAK,SAAS;AAAA,EACxD;AAAA,EAGA,MAAM,iCACJ,IACA,mBACA,WAC4F;AAC5F,UAAM,cAAc,MAAM,KAAK;AAC/B,UAAM,MAAM,aAAK,KAAK,aAAK,OAAO,GAAG,iBAAiB;AACtD,WAAO,MAAM,YAAY,0BAA0B,IAAI,KAAK,SAAS;AAAA,EACvE;AAAA,EAEA,MAAM,aACJ,QACA,IACoC;AACpC,QAAI,OAAO,YAAY,QAAQ;AAC7B,YAAM,cAAc,MAAM,KAAK;AAC/B,YAAM,UAAU,MAAM,YAAY;AAAA,QAChC,OAAO;AAAA,QACP,OAAO;AAAA,QACP,OAAO;AAAA,QACP;AAAA,MACF;AACA,UAAI,WAAW,QAAW;AACxB,eAAO;AAAA,UACL,GAAG;AAAA,UACH,WAAW;AAAA,QACb;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAc,uBACZ,IACA,QACA,SACA;AACA,UAAM,cAAc,MAAM,KAAK;AAC/B,QAAI,kBAA+C;AACnD,QAAI,gBACF;AACF,QAAI,OAAkD;AACtD,YAAQ,OAAO;AAAA,WACR,QAAQ;AACX,eAAO;AACP,0BAAkB,MAAM,YAAY;AAAA,UAClC;AAAA,UACA,OAAO;AAAA,UACP;AAAA,QACF;AACA;AAAA,MACF;AAAA,WACK,QAAQ;AACX,cAAM,eAAe,MAAM,YAAY;AAAA,UACrC;AAAA,UACA,OAAO;AAAA,UACP,OAAO;AAAA,UACP;AAAA,QACF;AACA,YAAI,cAAc;AAChB,iBAAO;AACP,4BAAkB,aAAa;AAC/B,0BAAgB;AAAA,YACd,OAAO,aAAa,GAAG;AAAA,YACvB,KAAK,aAAK;AAAA,cACR,aAAK,OAAO;AAAA,cACZ,aAAK;AAAA,gBACH,aAAK,OAAO;AAAA,gBACZ,aAAa,GAAG;AAAA,gBAChB,aAAa,GAAG;AAAA,cAClB;AAAA,YACF;AAAA,UACF;AAAA,QACF;AACA;AAAA,MACF;AAAA,WACK,gBAAgB;AACnB,eAAO;AACP,0BAAkB,MAAM,YAAY;AAAA,UAClC;AAAA,UACA,OAAO;AAAA,UACP;AAAA,QACF;AACA;AAAA,MACF;AAAA;AAGF,QAAI,mBAAmB,MAAM;AAC3B,qBAAe,gBACb,GACmC;AACnC,YAAI,eAAe;AACjB,gBAAM,QACJ,IAAI,IAAI,IAAI,IAAI,gBAAiB,MAAM,gBAAiB,MAAM;AAChE,iBAAO;AAAA,YACL,UAAU,aAAK;AAAA,cACb,aAAK,OAAO;AAAA,cACZ,cAAc;AAAA,cACd,cAAc;AAAA,cACd;AAAA,YACF;AAAA,YACA,QAAQ,aAAK,OAAO,aAAK,OAAO,GAAG,cAAc,GAAG;AAAA,UACtD;AAAA,QACF;AACA,cAAM,aAAa,MAAM,YAAY;AAAA,UACnC;AAAA,UACA,OAAQ;AAAA,UACR,OAAQ;AAAA,UACR;AAAA,UACA,OAAQ,YAAY,SAAS,SAAS;AAAA,QACxC;AACA,YAAI,YAAY;AACd,iBAAO,EAAE,UAAU,WAAW,IAAI,QAAQ,WAAW,GAAG;AAAA,QAC1D;AAAA,MACF;AACA,YAAM,iBAAgC;AAAA,QACpC,GAAG;AAAA,QACH,UAAU;AAAA,QACV,UAAU,OAAO;AAAA,MACnB;AACA,aAAO;AAAA,QACL;AAAA,QACA,KAAK,CAAC,EAAE;AAAA,QACR;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,mCACJ,IACA,mBACA,SAC6C;AAC7C,UAAM,cAAc,MAAM,KAAK;AAC/B,UAAM,MAAM,aAAK,KAAK,aAAK,OAAO,GAAG,iBAAiB;AACtD,UAAM,eAAe,MAAM,YAAY,WAAW,IAAI,GAAG;AACzD,QAAI,aAAa,UAAU,aAAa,OAAO,YAAY,UAAU;AACnE,aAAO,KAAK,uBAAuB,IAAI,aAAa,QAAQ,OAAO;AAAA,IACrE;AACA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,wBACJ,KACA,SAC6C;AAC7C,UAAM,cAAc,MAAM,KAAK;AAC/B,QAAI,IAAI,UAAU,GAAG;AACnB,YAAM,SAAS,MAAM,YAAY,uBAAuB,IAAI,EAAE;AAC9D,UAAI,UAAU,UAAa,OAAO,YAAY,UAAU;AACtD,eAAO,KAAK,uBAAuB,IAAI,IAAI,MAAM;AAAA,MACnD;AAAA,IACF;AAEA,UAAM,YAAY,MAAM,YAAY,0BAA0B,KAAK,OAAO;AAC1E,QAAI,UAAU,SAAS,GAAG;AACxB,UAAIC,OAAM;AACV,eAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,EAAE,GAAG;AACzC,QAAAA,QAAO,aAAK,KAAK,UAAU,IAAI,IAAI,UAAU,EAAE;AAAA,MACjD;AAEA,YAAM,kBAAkB,EAAE,OAAO,GAAG,KAAKA,KAAI;AAC7C,qBAAe,gBACb,GACmC;AACnC,cAAM,QACJ,IAAI,IAAI,IAAI,IAAI,gBAAiB,MAAM,gBAAiB,MAAM;AAChE,YAAI,IAAI;AACR,YAAIC,UAAS;AACb,YAAI,aAAa;AACjB,YAAI,aAAa;AACjB,eAAO,IAAI,UAAU,QAAQ,EAAE,GAAG;AAChC,uBAAa,aAAK,KAAK,UAAU,IAAI,IAAI,UAAU,EAAE;AACrD,UAAAA,WAAU;AACV,cAAIA,UAAS,OAAO;AAClB;AAAA,UACF;AACA,uBAAaA;AAAA,QACf;AACA,YAAI,KAAK,UAAU,QAAQ;AACzB,gBAAMC,OAAM,aAAK;AAAA,YACf,aAAK,OAAO;AAAA,YACZ,UAAU,IAAI;AAAA,YACd,UAAU,IAAI;AAAA,UAChB;AACA,iBAAO;AAAA,YACL,UAAU,UAAU,IAAI;AAAA,YACxB,QAAQ,aAAK,UAAUA,MAAKA,IAAG;AAAA,UACjC;AAAA,QACF;AAEA,cAAM,MAAM,aAAK;AAAA,UACf,aAAK,OAAO;AAAA,UACZ,UAAU,IAAI;AAAA,UACd,UAAU;AAAA,QACZ;AAEA,eAAO;AAAA,UACL,UAAU,aAAK;AAAA,YACb,aAAK,OAAO;AAAA,YACZ,UAAU,IAAI;AAAA,YACd,UAAU;AAAA,aACT,QAAQ,cAAc;AAAA,UACzB;AAAA,UACA,QAAQ,aAAK,UAAU,KAAK,GAAG;AAAA,QACjC;AAAA,MACF;AAEA,aAAO;AAAA,QACL,MAAM,UAAU,UAAU,IAAI,aAAa;AAAA,QAC3C;AAAA,QACA,gBAAgB;AAAA,QAChB;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,qBACJ,WACwC;AACxC,UAAM,cAAc,MAAM,KAAK;AAC/B,WAAO,MAAM,YAAY,iBAAiB,SAAS;AAAA,EACrD;AAAA,EAEA,MAAM,yBACJ,QACA,SAC8B;AAC9B,UAAM,cAAc,MAAM,KAAK;AAC/B,YAAQ,OAAO;AAAA,WACR,gBAAgB;AACnB,eAAO,MAAM,YAAY;AAAA,UACvB,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,QACT;AAAA,MACF;AAAA,WACK,QAAQ;AACX,eAAO,MAAM,YAAY;AAAA,UACvB,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP;AAAA,QACF;AAAA,MACF;AAAA;AAEF,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,8BACJ,UACA,SAC8B;AAC9B,UAAM,cAAc,MAAM,KAAK;AAC/B,UAAM,UAAU,MAAM,YAAY,mBAAmB,UAAU,OAAO;AACtE,QAAI,OAAO,YAAY,UAAU;AAC/B,YAAM,IAAI,aAAa,iBAAiB,OAAO;AAAA,IACjD;AACA,WAAO;AAAA,EACT;AAAA,EAEA,eAAe,WAA6B;AAC1C,UAAM,WACJ,UAAU,cAAc,UAAU,cAAc,SAAS,GAAG;AAC9D,UAAM,WAA2B,CAAC;AAClC,aAAS,IAAI,UAAU,cAAc,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AAC5D,YAAM,IAAI,UAAU,cAAc;AAClC,eAAS,KAAK,aAAK,YAAY,EAAE,KAAK,YAAY,IAAI,EAAE,EAAE,CAAC;AAAA,IAC7D;AACA,WAAO;AAAA,MACL,eAAe;AAAA,MACf,QAAQ,UAAU,OAAO,QAAQ;AAAA,MACjC,gBAAgB,UAAU;AAAA,MAC1B,cAAc,UAAU;AAAA,MACxB,KAAK,UAAU;AAAA,MACf,QAAQ,UAAU;AAAA,IACpB;AAAA,EACF;AAAA,EAEA,gBACE,UACA,SACuD;AACvD,QAAI,SAAS,UAAU,GAAG;AACxB,aAAO,EAAE,MAAM,QAAW,SAAS,CAAC,EAAE;AAAA,IACxC;AACA,QAAI,SAAS,UAAU,QAAQ,QAAQ;AACrC,YAAM,IAAI;AAAA,QACR;AAAA,QACA;AAAA,MACF;AAAA,IACF;AACA,QAAI,aAAa;AACjB,UAAM,UAAU;AAChB,UAAM,SAAS,QAAQ;AACvB,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,EAAE,GAAG;AACvC,UAAI,IAAI,KAAK,IAAI,aAAK,IAAI,QAAQ,QAAQ,EAAE,CAAC,IAAI,SAAS;AACxD,qBAAa;AACb;AAAA,MACF;AAAA,IACF;AAEA,QAAI,YAAY;AACd,UAAIC,SAAQ;AACZ,YAAMC,WAA0B,CAAC;AACjC,eAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,YAAI,OAAO,SAAS,GAAG;AACvB,YAAI,OAAO,SAAS,KAAK,SAAS,SAAS,IAAI,IAAI,IAAI,GAAG;AAC1D,YAAI,OAAO,SAAS,KAAK,SAAS,SAAS,IAAI,IAAI,IAAI,GAAG;AAC1D,YAAI,OAAO,SAAS,GAAG;AAEvB,QAAAD,UAAS,OAAO,OAAO;AACvB,QAAAA,UAAS,OAAO,OAAO;AACvB,QAAAC,SAAQ;AAAA,UACN,aAAK,WAAW,SAAS,GAAG,IAAI,SAAS,GAAG,IAAI,SAAS,GAAG,EAAE;AAAA,QAChE;AAAA,MACF;AACA,aAAO,EAAE,MAAM,KAAK,IAAID,MAAK,GAAG,SAAAC,SAAQ;AAAA,IAC1C;AAEA,UAAM,UAA0B,CAAC;AACjC,YAAQ,KAAK,SAAS,EAAE;AACxB,UAAM,SAAS,SAAS;AACxB,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,EAAE,GAAG;AACxC,YAAM,IAAI,SAAS;AACnB,YAAM,KAAK,aAAK,SAAS,aAAK,OAAO,GAAG,GAAG,MAAM;AACjD,YAAMC,QAAO,aAAK,IAAI,IAAI,MAAM,IAAI;AACpC,cAAQ,KAAK,aAAK,YAAY,aAAK,OAAO,GAAG,GAAG,QAAQA,KAAI,CAAC;AAAA,IAC/D;AAEA,QAAI,QAAQ,UAAU,GAAG;AACvB,aAAO,EAAE,MAAM,GAAG,QAAQ;AAAA,IAC5B;AACA,UAAM,OAAO,aAAK,SAAS,aAAK,OAAO,GAAG,QAAQ,IAAI,QAAQ,EAAE;AAChE,iBAAK,UAAU,MAAM,IAAI;AACzB,UAAM,OAAO,aAAK,MAAM,aAAK,OAAO,GAAG,QAAQ,IAAI;AACnD,iBAAK,UAAU,MAAM,IAAI;AAEzB,UAAM,YAA4B,CAAC;AACnC,cAAU,KAAK,aAAK,WAAW,GAAG,CAAC,CAAC;AACpC,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,EAAE,GAAG;AACxC,YAAM,IAAI,QAAQ;AAClB,YAAM,KAAK,aAAK,SAAS,aAAK,OAAO,GAAG,GAAG,MAAM;AACjD,gBAAU,KAAK,aAAK,WAAW,aAAK,IAAI,IAAI,IAAI,GAAG,aAAK,IAAI,IAAI,IAAI,CAAC,CAAC;AAAA,IACxE;AAEA,QAAI,QAAQ;AACZ,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACzC,UAAI,OAAO,UAAU,GAAG;AACxB,UAAI,OAAO,UAAU,KAAK,SAAS,SAAS,IAAI,IAAI,IAAI,GAAG;AAC3D,UAAI,OAAO,UAAU,KAAK,SAAS,SAAS,IAAI,IAAI,IAAI,GAAG;AAC3D,UAAI,OAAO,UAAU,GAAG;AAExB,eAAS,OAAO,OAAO;AACvB,eAAS,OAAO,OAAO;AAAA,IACzB;AACA,WAAO,EAAE,MAAM,KAAK,IAAI,KAAK,GAAG,QAAQ;AAAA,EAC1C;AAAA,EAEA,iBAAiB,UAAkD;AACjE,QAAI,cAAc;AAClB,QAAI,gBAA0B,CAAC;AAC/B,QAAI,SAAmB,CAAC;AACxB,QAAI,UAAoC;AACxC,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,EAAE,GAAG;AACxC,YAAM,IAAI,aAAK,KAAK,SAAS,IAAI,IAAI,SAAS,EAAE;AAChD,qBAAe;AACf,oBAAc,KAAK,CAAC;AACpB,YAAM,MAAM,aAAK,IAAI,aAAK,OAAO,GAAG,SAAS,IAAI,SAAS,IAAI,EAAE;AAChE,mBAAK,UAAU,KAAK,GAAG;AACvB,UAAI,WAAW,QAAW;AACxB,YAAIC,SAAQ,aAAK,MAAM,SAAS,GAAG;AACnC,YAAIA,SAAQ,KAAK,IAAI;AACnB,UAAAA,SAAQ,KAAK,KAAK,IAAIA;AAAA,QACxB;AACA,eAAO,KAAKA,MAAK;AAAA,MACnB;AACA,mBAAK,OAAO,KAAK,GAAG;AACpB,gBAAU;AAAA,IACZ;AAEA,WAAO,EAAE,aAAa,WAAW,UAAU,eAAe,OAAO;AAAA,EACnE;AAAA,EAEA,MAAM,cAAc,WAAmB,YAAkE;AACvG,UAAM,cAAc,MAAM,KAAK;AAC/B,WAAO,YAAY,iBAAiB,SAAS;AAAA,EAC/C;AAAA,EAEA,MAAM,qBAAqB,QAAqD;AAC9E,UAAM,cAAc,MAAM,KAAK;AAC/B,WAAO,YAAY,qBAAqB,MAAM;AAAA,EAChD;AAAA,EAEA,MAAM,sBACJ,QACA,SACiC;AACjC,UAAM,cAAc,MAAM,KAAK;AAE/B,YAAQ,OAAO;AAAA,WACR,QAAQ;AACX,cAAM,aAAa,MAAM,YAAY;AAAA,UACnC,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,QACT;AACA,eAAO;AAAA,UACL,MAAM;AAAA,UAAQ,OAAO,CAAC,EAAE,YAAY,YAAY,UAAU,QAAQ,CAAC;AAAA,QACrE;AAAA,MACF;AAAA,WACK,QAAQ;AACX,cAAM,cAAc,MAAM,YAAY;AAAA,UACpC,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,UACP;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,WACK,UAAU;AACb,eAAO;AAAA,UACL,MAAM;AAAA,UACN,OAAO,CAAC,EAAE,YAAY,CAAC,OAAO,SAAiB,GAAG,UAAU,SAAS,CAAC;AAAA,QACxE;AAAA,MACF;AAAA,WACK,gBAAgB;AACnB,cAAM,aAAa,MAAM,YAAY;AAAA,UACnC,OAAO;AAAA,UACP,OAAO;AAAA,UACP,OAAO;AAAA,QACT;AACA,eAAO;AAAA,UACL,MAAM;AAAA,UACN,OAAO,CAAC,EAAE,YAAY,YAAY,UAAU,QAAQ,CAAC;AAAA,QACvD;AAAA,MACF;AAAA;AAAA,EAEJ;AAAA,EAEA,MAAM,eAAe,QAAmD;AACtE,UAAM,cAAc,MAAM,KAAK;AAC/B,WAAO,YAAY,eAAe,MAAM;AAAA,EAC1C;AAAA,EAEA,MAAM,cAAc,QAAiD;AACnE,UAAM,cAAc,MAAM,KAAK;AAC/B,WAAO,YAAY,kBAAkB,MAAM;AAAA,EAC7C;AAAA,EAEA,MAAM,iBAAiB,SAAmB,eAAoD;AAC5F,UAAM,cAAc,MAAM,KAAK;AAC/B,UAAM,WAAW,MAAM,QAAQ,IAAI,QAAQ,IAAI,CAAC,QAAQ,YAAY,gBAAgB,KAAK,aAAa,CAAC,CAAC;AACxG,UAAM,IAAI,SAAS,OAAO,CAAAC,OAAKA,MAAK,MAAS;AAC7C,WAAO;AAAA,EACT;AAYF;AAEA,eAAsB,UACpB,gBACA,WACA;AACA,SAAO,IAAI,aAAa,WAAW,cAAc;AACnD;;;ACjuBO,SAAS,sBAAsB,OAAmD,OAA+E;AAEpK,QAAM,OAAO,aAAK,IAAI,aAAK,OAAO,GAAG,MAAM,KAAK,MAAM,KAAK;AAC3D,QAAM,OAAO,aAAK,IAAI,aAAK,OAAO,GAAG,MAAM,KAAK,MAAM,KAAK;AAE3D,QAAM,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC/C,QAAM,WAAW,aAAK,IAAI,aAAK,OAAO,GAAG,MAAM,OAAO,MAAM,KAAK;AAGjE,MAAI,OAAO,GAAG;AACV,WAAO;AAAA,EACX;AAEA,QAAM,KAAK,SAAS,KAAK,KAAK,KAAK,SAAS,KAAK,KAAK,MAAM;AAC5D,QAAM,KAAK,SAAS,KAAK,KAAK,KAAK,SAAS,KAAK,KAAK,MAAM;AAE5D,MAAK,KAAK,KAAK,KAAK,MAAO,KAAK,KAAK,KAAK,IAAI;AAC1C,WAAO;AAAA,MACH,GAAG,aAAK,YAAY,aAAK,OAAO,GAAG,MAAM,OAAO,MAAM,CAAC;AAAA,MAAG;AAAA,MAAG;AAAA,IACjE;AAAA,EACJ;AAEA,SAAO;AACX;;;AC1BO,IAAM,uBAAuB;AAE7B,SAAS,oBAAoB,QAA0C;AAC1E,QAAM,QAAoB,CAAC;AAC3B,MAAI,OAAO,cAAc,SAAS,OAAO,cAAc,OAAO;AAC1D,UAAM,gBAAgB,CAAC,OAAO,cAAc,OAAO,OAAO,cAAc,KAAK;AAC7E,UAAM,OAAO,cAAc,GAAG,KAAK,cAAc,GAAG;AACpD,QAAI,MAAM,OAAO,CAAC,cAAc,IAAI,cAAc,EAAE,IAAI,CAAC,cAAc,IAAI,cAAc,EAAE;AAC3F,UAAM,OAAO,aAAK,IAAI,aAAK,OAAO,GAAG,IAAI,IAAI,IAAI,EAAE;AACnD,UAAM,aAAa,aAAK,IAAI,IAAI;AAChC,UAAM,KAAK,EAAE,MAAM,UAAU,MAAM,WAAW,QAAQ,CAAC,GAAG,UAAU,SAAS,YAAY,CAAC,aAAK,MAAM,cAAc,EAAE,GAAG,aAAK,MAAM,cAAc,EAAE,CAAC,EAAE,CAAC;AAEvJ,UAAM;AAAA,MACF,IAAI;AAAA,MACJ,aAAK,WAAW,IAAI,GAAG,IAAI,IAAI,GAAG,IAAI,IAAI,GAAG,EAAE;AAAA,MAC/C,aAAK,WAAW,IAAI,GAAG,IAAI,IAAI,GAAG,IAAI,IAAI,GAAG,EAAE;AAAA,MAC/C,IAAI;AAAA,IACR;AAEA,UAAM,KAAK,EAAE,MAAM,UAAU,MAAM,KAAK,IAAI,KAAK,EAAE,EAAE,QAAQ,CAAC,GAAG,UAAU,SAAS,YAAY,CAAC,aAAK,MAAM,IAAI,EAAE,GAAG,aAAK,MAAM,IAAI,EAAE,CAAC,EAAE,CAAC;AAC1I,UAAM,KAAK,EAAE,MAAM,UAAU,MAAM,KAAK,IAAI,KAAK,EAAE,EAAE,QAAQ,CAAC,GAAG,UAAU,SAAS,YAAY,CAAC,aAAK,MAAM,IAAI,EAAE,GAAG,aAAK,MAAM,IAAI,EAAE,CAAC,EAAE,CAAC;AAC1I,UAAM,KAAK,EAAE,MAAM,UAAU,MAAM,KAAK,IAAI,KAAK,EAAE,EAAE,QAAQ,CAAC,GAAG,UAAU,SAAS,YAAY,CAAC,aAAK,MAAM,IAAI,EAAE,GAAG,aAAK,MAAM,IAAI,EAAE,CAAC,EAAE,CAAC;AAG1I,UAAM,aAAa,aAAK,IAAI,aAAK,WAAW,KAAK,IAAI,KAAK,EAAE,CAAC;AAC7D,UAAM,QAAQ,aAAK,WAAW,IAAI,GAAG,IAAI,KAAK,IAAI,IAAI,GAAG,IAAI,IAAI,GAAG,EAAE,GAAG,IAAI,GAAG,EAAE;AAClF,UAAM,QAAQ,aAAK,WAAW,IAAI,GAAG,IAAI,KAAK,IAAI,IAAI,GAAG,IAAI,IAAI,GAAG,EAAE,GAAG,IAAI,GAAG,EAAE;AAClF,UAAM,KAAK,EAAE,MAAM,YAAY,MAAM,WAAW,QAAQ,CAAC,GAAG,UAAU,SAAS,YAAY,CAAC,OAAO,KAAK,EAAE,CAAC;AAG3G,UAAM,QAAQ,aAAK,IAAI,aAAK,OAAO,GAAG,IAAI,IAAI,IAAI,EAAE;AACpD,UAAMC,SAAQ,aAAK,MAAM,MAAM,KAAK,KAAK,MAAM,KAAK;AACpD,QAAIA,SAAQ,KAAK;AACb,YAAM,QAAQ,OAAO,aAAK,MAAM,cAAc,EAAE,IAAI,aAAK,MAAM,cAAc,EAAE;AAC/E,YAAM,MAAM,aAAK,MAAM,IAAI,EAAE;AAC7B,YAAM,KAAK,EAAE,MAAM,WAAW,MAAMA,OAAM,QAAQ,CAAC,IAAI,QAAK,UAAU,SAAS,YAAY,CAAC,aAAK,MAAM,IAAI,EAAE,GAAG,OAAO,GAAG,EAAE,CAAC;AAAA,IACjI;AAEA,UAAM,SAAS,aAAK,IAAI,aAAK,OAAO,GAAG,OAAO,KAAK;AACnD,UAAM,UAAU,aAAK,MAAM,MAAM,MAAM,KAAK,MAAM,KAAK;AACvD,QAAI,UAAU,KAAK;AACf,YAAM,QAAQ,OAAO,aAAK,MAAM,cAAc,EAAE,IAAI,aAAK,MAAM,cAAc,EAAE;AAC/E,YAAM,KAAK,EAAE,MAAM,YAAY,MAAM,QAAQ,QAAQ,CAAC,IAAI,QAAK,UAAU,SAAS,YAAY,CAAC,aAAK,MAAM,KAAK,GAAG,OAAO,aAAK,MAAM,KAAK,CAAC,EAAE,CAAC;AAAA,IACjJ;AAAA,EACJ;AAEA,MAAI,OAAO,OAAO;AACd,UAAM,KAAK;AAAA,MACP,MAAM;AAAA,MAAkB,OAAO,OAAO,MAAM,WAAW,MAAM,KAAK,KAAK,QAAQ,CAAC,IAAI;AAAA,MAAK,UAAU;AAAA,MACnG,YAAY,CAAC,aAAK,MAAM,OAAO,MAAM,cAAc,EAAE,GAAG,aAAK,MAAM,OAAO,MAAM,cAAc,EAAE,GAAG,aAAK,MAAM,OAAO,MAAM,cAAc,EAAE,CAAC;AAAA,IAChJ,CAAC;AACD,QAAI,OAAO,MAAM,gBAAgB;AAC7B,YAAM,KAAK,EAAE,MAAM,uBAAuB,UAAU,SAAS,YAAY,CAAC,aAAK,MAAM,OAAO,MAAM,eAAe,EAAE,GAAG,aAAK,MAAM,OAAO,MAAM,eAAe,EAAE,CAAC,EAAE,CAAC;AAAA,IACvK;AAAA,EACJ;AAEA,MAAI,OAAO,cAAc;AACrB,UAAMC,QAAO,aAAK,IAAI,aAAK,IAAI,aAAK,OAAO,GAAG,OAAO,aAAa,IAAI,OAAO,aAAa,EAAE,CAAC;AAC7F,UAAM,KAAK,EAAE,MAAM,UAAU,MAAMA,MAAK,QAAQ,CAAC,GAAG,UAAU,SAAS,YAAY,CAAC,aAAK,MAAM,OAAO,aAAa,EAAE,GAAG,aAAK,MAAM,OAAO,aAAa,EAAE,CAAC,EAAE,CAAC;AAAA,EACjK;AACA,SAAO,EAAE,OAAO,MAAM,UAAU;AACpC;AAEO,SAAS,4BAA4B,MAAmB,QAAwB,QAAiB,QAAiB,oBAAsD;AAC3K,MAAI,OAAO,WAAW,GAAG;AACrB,WAAO;AAAA,EACX;AACA,QAAM,QAAoB,CAAC;AAC3B,MAAI,OAAO,WAAW,GAAG;AACrB,UAAM,KAAK,EAAE,UAAU,UAAU,YAAY,OAAO,CAAC;AAAA,EACzD,OAAO;AACH,QAAI,OAA+B;AACnC,QAAI,oBAAoB;AACpB,YAAM,SAAmB,CAAC;AAC1B,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,EAAE,GAAG;AACpC,eAAO,KAAK,aAAK,KAAK,OAAO,IAAI,IAAI,OAAO,EAAE,EAAE,QAAQ,CAAC,CAAC;AAAA,MAC9D;AACA,aAAO,CAAC,MAAM;AAAA,IAClB;AACA,UAAM,KAAK,EAAE,UAAU,SAAS,WAAW,SAAS,YAAY,QAAQ,KAAK,CAAC;AAAA,EAClF;AAEA,QAAM,cAA4B,CAAC;AACnC,cAAY,KAAK,EAAE,MAAM,WAAW,MAAM,CAAC;AAC3C,MAAI,QAAQ;AACR,UAAM,SAAS,SAAS,OAAO,SAAS,OAAO,SAAS;AACxD,aAAS,IAAI,SAAS,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC1C,YAAM,UAAU,OAAO;AACvB,YAAM,WAAW,MAAM,IAAI,OAAO,SAAS,IAAI,IAAI;AACnD,YAAM,SAAS,MAAM,OAAO,SAAS,IAAI,IAAI,IAAI;AACjD,YAAM,QAAQ,OAAO;AACrB,YAAM,MAAM,OAAO;AACnB,YAAM,QAAQ,aAAK,IAAI,aAAK,OAAO,GAAG,OAAO,WAAW,OAAO;AAC/D,YAAM,QAAQ,aAAK,IAAI,aAAK,OAAO,GAAG,OAAO,SAAS,OAAO;AAC7D,YAAMD,SAAQ,aAAK,MAAM,OAAO,KAAK,KAAK,MAAM,KAAK;AACrD,UAAIA,SAAQ,KAAK;AACb,cAAM,KAAK,EAAE,MAAMA,OAAM,QAAQ,CAAC,IAAI,QAAK,UAAU,SAAS,YAAY,CAAC,aAAK,MAAM,OAAO,GAAG,aAAK,MAAM,KAAK,GAAG,aAAK,MAAM,GAAG,CAAC,EAAE,CAAC;AAAA,MACzI;AAAA,IACJ;AAAA,EACJ;AAEA,iBAAe,MAAM,WAAW;AAChC,SAAO,EAAE,MAAM,SAAS,SAAS,YAAY;AACjD;AAEO,SAAS,kBAAkB,MAAmB,QAAwB,MAAuC;AAChH,MAAI,OAAO,WAAW,GAAG;AACrB,WAAO;AAAA,EACX;AACA,QAAM,QAAoB,CAAC;AAC3B,QAAM,KAAK,EAAE,UAAU,QAAQ,YAAY,QAAQ,KAAK,CAAC;AAEzD,QAAM,cAA4B,CAAC;AACnC,cAAY,KAAK,EAAE,MAAM,WAAW,MAAM,CAAC;AAE3C,iBAAe,MAAM,WAAW;AAChC,SAAO,EAAE,MAAM,SAAS,SAAS,YAAY;AACjD;AAEO,SAAS,YAAY,QAAqB,MAAgH;AAC7J,MAAI,OAAO,QAAQ,SAAS;AACxB,WAAO;AAAA,EACX;AACA,QAAM,gBAEA,CAAC;AACP,QAAM,cAAc,aAAK,OAAO;AAChC,SAAO,QAAQ,QAAQ,aAAW;AAC9B,QAAI,QAAQ,QAAQ,aAAa,QAAQ,QAAQ,kBAAkB,QAAQ,QAAQ,QAAQ;AACvF,cAAQ,MAAM,QAAQ,UAAQ;AAC1B,YAAI,KAAK,eAAe,KAAK,YAAY,WAAW,KAAK,YAAY,kBAAkB,KAAK,YAAY,WAAW;AAC/G,mBAAS,IAAI,GAAG,IAAI,KAAK,WAAW,QAAQ,EAAE,GAAG;AAC7C,gBAAI,aAAK,OAAO,KAAK,WAAW,IAAI,IAAI,WAAW,KAAK,aAAK,OAAO,KAAK,WAAW,IAAI,WAAW,GAAG;AAClG;AAAA,YACJ;AACA,kBAAM,QAAQ,EAAE,OAAO,KAAK,WAAW,IAAI,IAAI,KAAK,KAAK,WAAW,GAAG;AACvE,kBAAM,eAAe,sBAAsB,MAAM,KAAK;AACtD,gBAAI,cAAc;AACd,4BAAc,KAAK,EAAE,cAAc,MAAM,MAAM,CAAC;AAAA,YACpD;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ,CAAC;AACD,MAAI,cAAc,SAAS,GAAG;AAC1B,kBAAc,KAAK,CAAC,GAAG,MAAM,EAAE,aAAa,IAAI,EAAE,aAAa,CAAC;AAChE,UAAME,QAAO,cAAc,GAAG;AAC9B,UAAM,KAAKA,MAAK,IAAI,KAAKA,MAAK,MAAM;AACpC,UAAM,KAAKA,MAAK,IAAI,KAAKA,MAAK,MAAM;AACpC,UAAM,SAAS,aAAK,WAAW,CAAC,IAAI,EAAE;AACtC,iBAAK,UAAU,QAAQ,MAAM;AAC7B,WAAO;AAAA,MACH;AAAA,MAAQ,UAAU,cAAc,GAAG,aAAa;AAAA,IACpD;AAAA,EACJ;AACA,SAAO;AACX;AAGO,SAAS,kBAAkB,SAAwB,MAA+D;AACrH,MAAI,QAAQ,SAAS,GAAG;AACpB,UAAM,gBAEA,CAAC;AACP,UAAM,cAAc,aAAK,OAAO;AAChC,YAAQ,QAAQ,SAAO;AACnB,UAAI,IAAI,QAAQ,SAAS;AACrB,YAAI,QAAQ,QAAQ,aAAW;AAC3B,cAAI,QAAQ,QAAQ,aAAa,QAAQ,QAAQ,kBAAkB,QAAQ,QAAQ,QAAQ;AACvF,oBAAQ,MAAM,QAAQ,UAAQ;AAC1B,kBAAI,KAAK,eAAe,KAAK,YAAY,WAAW,KAAK,YAAY,kBAAkB,KAAK,YAAY,WAAW;AAC/G,yBAAS,IAAI,GAAG,IAAI,KAAK,WAAW,QAAQ,EAAE,GAAG;AAC7C,sBAAI,aAAK,OAAO,KAAK,WAAW,IAAI,IAAI,WAAW,KAAK,aAAK,OAAO,KAAK,WAAW,IAAI,WAAW,GAAG;AAClG;AAAA,kBACJ;AACA,wBAAM,QAAQ,EAAE,OAAO,KAAK,WAAW,IAAI,IAAI,KAAK,KAAK,WAAW,GAAG;AACvE,wBAAM,eAAe,sBAAsB,MAAM,KAAK;AACtD,sBAAI,cAAc;AACd,0BAAM,MAAM,aAAK,IAAI,aAAK,OAAO,GAAG,KAAK,WAAW,IAAI,KAAK,WAAW,IAAI,EAAE;AAC9E,kCAAc,KAAK,EAAE,cAAc,SAAS,aAAK,YAAY,aAAK,OAAO,GAAG,KAAK,WAAW,IAAI,IAAI,KAAK,aAAa,CAAC,EAAE,CAAC;AAAA,kBAC9H;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ,CAAC;AAAA,UACL;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,IACJ,CAAC;AACD,QAAI,cAAc,SAAS,GAAG;AAC1B,oBAAc,KAAK,CAAC,GAAG,MAAM,EAAE,aAAa,IAAI,EAAE,aAAa,CAAC;AAChE,YAAM,aAA6B,CAAC,aAAK,OAAO,CAAC;AACjD,YAAM,aAA6B,CAAC,KAAK,KAAK;AAC9C,YAAM,SAAmB,CAAC,EAAE;AAC5B,oBAAc,QAAQ,kBAAgB;AAClC,mBAAW,KAAK,aAAa,aAAa,CAAC;AAAA,MAC/C,CAAC;AACD,iBAAW,KAAK,KAAK,GAAG;AACxB,eAAS,IAAI,GAAG,IAAI,cAAc,QAAQ,EAAE,GAAG;AAC3C,YAAI,KAAK,GAAG;AACR,iBAAO,KAAK,aAAK,KAAK,cAAc,GAAG,SAAS,cAAc,IAAI,GAAG,OAAO,EAAE,QAAQ,CAAC,IAAI,GAAG;AAAA,QAClG;AACA,mBAAW,KAAK,cAAc,GAAG,OAAO;AAAA,MAC5C;AACA,iBAAW,KAAK,aAAK,OAAO,CAAC;AAC7B,aAAO,KAAK,EAAE;AAEd,YAAMC,SAAoB,CAAC;AAC3B,MAAAA,OAAM,KAAK,EAAE,UAAU,SAAS,YAAY,YAAY,MAAM,CAAC,MAAM,EAAE,CAAC;AAExE,YAAMC,eAA4B,CAAC;AACnC,MAAAA,aAAY,KAAK,EAAE,MAAM,WAAW,OAAAD,OAAM,CAAC;AAC3C,aAAO,EAAE,MAAM,SAAS,SAASC,aAAY;AAAA,IACjD;AAAA,EAEJ;AACA,QAAM,QAAoB,CAAC;AAC3B,QAAM,KAAK,EAAE,UAAU,SAAS,YAAY,CAAC,GAAG,YAAY,CAAC,KAAK,OAAO,KAAK,GAAG,EAAE,CAAC;AAEpF,QAAM,cAA4B,CAAC;AACnC,cAAY,KAAK,EAAE,MAAM,WAAW,MAAM,CAAC;AAC3C,SAAO,EAAE,MAAM,SAAS,SAAS,YAAY;AACjD;;;ACtNO,SAAS,gBACd,MAAoD;AACpD,QAAM,EAAE,OAAO,IAAI;AACnB,QAAM,EAAE,OAAO,OAAO,IAAI,KAAK,SAAS;AACxC,QAAM,SAAS,aAAK;AAAA,IAClB,aAAK,OAAO;AAAA,IACZ,OAAO;AAAA,IACP,OAAO;AAAA,EACT;AACA,eAAK,OAAO,QAAQ,MAAM;AAC1B,MAAI,KAAK,OAAO,QAAQ,WAAW;AACjC,UAAM,UAAU,aAAK;AAAA,MACnB,aAAK,OAAO;AAAA,MACZ,eAAS,SAAS,OAAO,WAAW;AAAA,MACpC,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,OAAO;AAAA,IACT;AACA,WAAO,EAAE,QAAQ,QAAQ;AAAA,EAC3B,OAAO;AACL,UAAM,SAAS,QAAQ;AACvB,UAAM,aAAa,OAAO,cAAc;AACxC,UAAM,YAAY,aAAa;AAC/B,UAAM,UAAU,aAAK;AAAA,MACnB,aAAK,OAAO;AAAA,MACZ,CAAC;AAAA,MACD;AAAA,MACA,CAAC;AAAA,MACD;AAAA,MACA,OAAO;AAAA,MACP,OAAO;AAAA,IACT;AACA,WAAO,EAAE,QAAQ,QAAQ;AAAA,EAC3B;AACF;AAEO,SAAS,SAAS,SAAe,OAAe,QAAgB,GAA+B;AACpG,QAAM,KAAK,aAAK;AAAA,IACd,aAAK,OAAO;AAAA,IACZ,aAAK,WAAW,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;AAAA,IACnC;AAAA,EACF;AAEA,QAAM,KAAK,aAAK;AAAA,IACd,KAAK,OAAQ,GAAG,KAAK,MAAO,GAAG,KAAK,OAAO,KAAK;AAAA,IAChD,KAAK,OAAO,MAAO,GAAG,KAAK,MAAO,GAAG,MAAM,MAAM;AAAA,EACnD;AAEA,SAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,MAAM,GAAG,KAAK,OAAO,SAAS,GAAG,CAAC,IAAI,KAAK,aAAK,WAAW,MAAM,IAAI;AACxG;AAEO,SAAS,yBACd,QACA,QACA,SACA,MACA,OACA,QACAC,QAC0H;AAC1H,QAAM,OAAO,CAAC,GAAS,OAAa;AAClC,UAAM,IAAI,aAAK,IAAI,aAAK,OAAO,GAAG,IAAI,CAAC;AACvC,iBAAK,MAAM,GAAG,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;AACtC,WAAO,aAAK,IAAI,GAAG,GAAG,CAAC;AAAA,EACzB;AAEA,QAAM,WAA2B,CAAC;AAClC,QAAM,iBAA2B,CAAC;AAClC,QAAM,eAAyB,CAAC;AAChC,QAAM,KAAK,OAAO,IAAI,CAAC,MAAM,aAAK,cAAc,aAAK,OAAO,GAAG,GAAG,MAAM,CAAC;AACzE,MAAIA,QAAO;AACT,eAAW,KAAK,IAAI;AAClB,UAAI,EAAE,KAAK,KAAK,EAAE,KAAK,KAAK;AAC1B,UAAE,KAAK;AAAA,MACT;AAAA,IACF;AAAA,EACF;AACA,QAAM,eAAe,GAAG,OAAO,CAAC,MAAM,MAAM,MAAM;AAChD,QAAI,KAAK,KAAK,sBAAsB;AAClC,UAAI,MAAM,KAAK,GAAG,IAAI,GAAG,KAAK,GAAG;AAC/B,uBAAe,KAAK,CAAC;AACrB,eAAO;AAAA,MACT;AACA,YAAM,KAAK,KAAK,GAAG,IAAI,IAAI,IAAI;AAC/B,YAAMC,MAAK,SAAS,SAAS,OAAO,QAAQ,EAAE;AAC9C,eAAS,KAAKA,GAAE;AAChB,aAAO,KAAK,OAAO,CAACA,GAAE,CAAC;AAAA,IACzB;AACA,UAAM,KAAK,SAAS,SAAS,OAAO,QAAQ,IAAI;AAChD,aAAS,KAAK,EAAE;AAChB,QAAI,MAAM,KAAK,GAAG,IAAI,GAAG,KAAK,sBAAsB;AAClD,YAAM,KAAK,KAAK,MAAM,GAAG,IAAI,EAAE;AAC/B,YAAM,MAAM,SAAS,SAAS,OAAO,QAAQ,EAAE;AAC/C,mBAAa,KAAK,CAAC;AACnB,aAAO,KAAK,OAAO,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC;AAAA,IAChC;AACA,WAAO,KAAK,OAAO,CAAC,EAAE,CAAC;AAAA,EACzB,GAAG,CAAC,CAAmB;AACvB,MAAI,aAAa,QAAQ;AACvB,WAAO,EAAE,cAAc,UAAU,gBAAgB,aAAa;AAAA,EAChE;AACA,SAAO;AACT;AAGO,SAAS,eAAe,MAAmB,aAA2B;AAC3E,QAAM,EAAE,OAAO,IAAI;AACnB,QAAM,EAAE,OAAO,OAAO,IAAI,KAAK,SAAS;AACxC,QAAM,EAAE,QAAQ,QAAQ,IAAI,gBAAgB,IAAI;AAEhD,aAAW,cAAc,aAAa;AACpC,eAAW,YAAY,WAAW,OAAO;AAEvC,YAAM,SAAS;AAAA,QACb,SAAS;AAAA,QACT;AAAA,QACA;AAAA,QACA,OAAO;AAAA,QACP;AAAA,QACA;AAAA,QACA,OAAO,QAAQ;AAAA,MACjB;AACA,UAAI,QAAQ;AACV,cAAM,EAAE,cAAc,gBAAgB,aAAa,IAAI;AACvD,iBAAS,aAAa;AACtB,YAAK,eAAe,SAAS,KAAK,aAAa,SAAS,GAAI;AAC1D,cAAI,SAAS,QAAQ,MAAM,QAAQ,SAAS,IAAI,GAAG;AACjD,qBAAS,KAAK,KAAK,SAAS,KAAK,GAAG,OAAO,CAAC,MAAM,MAAM,MAAM;AAC5D,kBAAI,aAAa,KAAK,CAAC,MAAM,KAAK,CAAC,KAAK,UAAa,eAAe,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK,QAAW;AACxG,uBAAO,KAAK,OAAO,CAAC,IAAI,IAAI,CAAC;AAAA,cAC/B;AACA,kBAAI,eAAe,KAAK,CAAC,MAAM,KAAK,CAAC,KAAK,UAAa,eAAe,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK,QAAW;AAC1G,uBAAO;AAAA,cACT,OAAO;AACL,uBAAO,KAAK,OAAO,IAAI;AAAA,cACzB;AAAA,YACF,GAAG,CAAC,CAAa;AAAA,UACnB;AACA,mBAAS,aAAa,SAAS,WAAW,OAAO,CAAC,MAAM,MAAM,MAAM;AAClE,gBAAI,aAAa,KAAK,CAAC,MAAM,KAAK,CAAC,KAAK,UAAa,eAAe,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK,QAAW;AACxG,qBAAO,KAAK,OAAO,CAAC,aAAK,OAAO,GAAG,IAAI,CAAC;AAAA,YAC1C;AACA,gBAAI,eAAe,KAAK,CAAC,MAAM,KAAK,CAAC,KAAK,UAAa,eAAe,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK,QAAW;AAC1G,qBAAO;AAAA,YACT,OAAO;AACL,qBAAO,KAAK,OAAO,IAAI;AAAA,YACzB;AAAA,UACF,GAAG,CAAC,CAAmB;AAAA,QACzB;AAAA,MACF;AACA,UAAI,SAAS,OAAO;AAClB,iBAAS,MAAM,QAAQ,CAAC,UAAU,MAAM;AACtC,gBAAM,aAAa;AAAA,YACjB,SAAS;AAAA,YACT;AAAA,YACA;AAAA,YACA,OAAO;AAAA,YACP;AAAA,YACA;AAAA,YACA,OAAO,QAAQ;AAAA,UACjB;AACA,cAAI,YAAY;AACd,kBAAM,EAAE,cAAc,gBAAgB,aAAa,IAAI;AACvD,qBAAS,aAAa;AACtB,iBAAK,eAAe,SAAS,KAAK,aAAa,SAAS,MAAM,SAAS,QAAQ,MAAM,QAAQ,SAAS,IAAI,GAAG;AAC3G,uBAAS,KAAK,IAAI,KAAK,SAAS,KAAK,IAAI,GAAG,OAAO,CAAC,MAAM,MAAM,MAAM;AACpE,oBAAI,aAAa,KAAK,CAAC,MAAM,KAAK,CAAC,KAAK,UAAa,eAAe,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK,QAAW;AACxG,yBAAO,KAAK,OAAO,CAAC,IAAI,IAAI,CAAC;AAAA,gBAC/B;AACA,oBAAI,eAAe,KAAK,CAAC,MAAM,KAAK,CAAC,KAAK,UAAa,eAAe,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK,QAAW;AAC1G,yBAAO;AAAA,gBACT,OAAO;AACL,yBAAO,KAAK,OAAO,IAAI;AAAA,gBACzB;AAAA,cACF,GAAG,CAAC,CAAa;AAAA,YACnB;AAAA,UAEF;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AACF;AAGA,eAAsB,oBACpB,MACA,OACA,QACA,SACgD;AAChD,MAAI,QAAQ;AACV,QAAI,cAA4B,CAAC;AACjC,QAAI,OAA0D;AAC9D,QAAI,OAAO,YAAY,WAAW;AAChC,oBAAc,MAAM,MAAM,qBAAqB,MAA8B;AAC7E,aAAO;AAAA,IACT,WACS,OAAO,YAAY,iBAAiB;AAC3C,oBAAc,CAAC,oBAAoB,MAA8B,CAAC;AAClE,aAAO;AAAA,IACT,OACK;AACH,YAAM,aAAa,MAAM,MAAM,sBAAsB,QAAyB,OAAO;AACrF,UAAI,YAAY;AACd,sBAAc,CAAC,UAAU;AAAA,MAC3B;AACA,aAAO;AAAA,IACT;AAEA,QAAI,aAAa;AACf,qBAAe,MAAM,WAAW;AAAA,IAClC;AACA,WAAO;AAAA,MACL;AAAA,MAAM,SAAS;AAAA,IACjB;AAAA,EACF;AACA,SAAO;AACT;;;AC7NA,IAAM,mBACH,SAAS,eAA4C,OAAO,YAAY;AAGpE,IAAM,aAAN,MAAiB;AAAA,EACL;AAAA,EAET;AAAA,EASR,YAAY,eAAwB;AAClC,UAAM,MAAM,IAAI,IAAI,iBAAiB,gBAAgB;AACrD,SAAK,YAAY,IAAI,IAAI,MAAM,GAAG,EAAE,KAAK,MAAM,GAAG,EAAE;AAAA,EACtD;AAAA,EAEQ,gBAAgB;AACtB,UAAM,eAAe,CAAC,KAAa,SAAmC;AACpE,UAAI,KAAK,UAAU,WAAW,KAAK,SAAS,MAAM,GAAG;AACnD,eAAO,IAAI,OAAO,KAAK,EAAE,MAAM,WAAW,KAAK,CAAC;AAAA,MAClD,OAAO;AACL,cAAM,aAAa,IAAI;AAAA,UACrB,CAAC,iBAAiB,KAAK,UAAU,GAAG,KAAK;AAAA,UACzC,EAAE,MAAM,kBAAkB;AAAA,QAC5B;AACA,cAAM,UAAU,IAAI,gBAAgB,UAAU;AAC9C,cAAM,SAAS,IAAI,OAAO,SAAS,EAAE,MAAM,WAAW,KAAK,CAAC;AAC5D,YAAI,gBAAgB,OAAO;AAC3B,eAAO;AAAA,MACT;AAAA,IACF;AACA,UAAM,gBAAgB;AAAA,MACpB,GAAG,KAAK;AAAA,MACR;AAAA,IACF;AACA,UAAM,iBAAyB,KAAc,aAAa;AAC1D,SAAK,UAAU;AAAA,MACb,SAAS;AAAA,QACP,QAAQ;AAAA,QACR,SAAS;AAAA,MACX;AAAA,IACF;AACA,mBAAe,WAAW,KAAK,SAAS;AAAA,EAC1C;AAAA,EAEA,UAAU,KAAmB;AAC3B,QAAI,CAAC,KAAK,SAAS;AACjB,WAAK,cAAc;AAAA,IACrB;AACA,QAAI,OAAO,QAAQ,UAAU;AAC3B,YAAM,IAAI,IAAI,IAAI,SAAS,CAAC;AAAA,IAC9B;AACA,WAAO,IAAI,aAAa,KAAK,KAAK,QAAS,QAAQ,OAAO;AAAA,EAC5D;AAAA,EAEA,MAAM,UAAyB;AAC7B,UAAM,EAAE,QAAQ,IAAI;AACpB,QAAI,SAAS;AACX,YAAM,EAAE,QAAQ,IAAI;AACpB,YAAM,QAAQ,QAAQ,UAAU;AAChC,cAAQ,QAAgB,cAAc;AACtC,WAAK,UAAU;AAAA,IACjB;AAAA,EACF;AAAA,EAGA,aACE,QACA,MACkG;AAClG,UAAM,EAAE,OAAO,IAAI;AACnB,UAAM,EAAE,QAAQ,QAAQ,IAAI,gBAAgB,IAAI;AAChD,UAAM,EAAE,OAAO,OAAO,IAAI,KAAK,SAAS;AAExC,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA,OAAO;AAAA,MACP;AAAA,MAAO;AAAA,MACP,OAAO,QAAQ;AAAA,IACjB;AAAA,EACF;AAAA,EAGA,eAAe,MAAmB,QAAsD;AACtF,UAAM,EAAE,OAAO,IAAI;AACnB,UAAM,EAAE,QAAQ,QAAQ,IAAI,gBAAgB,IAAI;AAChD,UAAM,EAAE,OAAO,OAAO,IAAI,KAAK,SAAS;AAExC,WAAO,OACJ,IAAI,CAAC,MAAM,aAAK,cAAc,aAAK,OAAO,GAAG,GAAG,MAAM,CAAC,EACvD,IAAI,CAAC,GAAG,GAAG,QAAQ;AAClB,UAAI,OAAO,SAAS,gBAAgB;AAClC,YAAI,EAAE,KAAK,KAAK,EAAE,KAAK,KAAK;AAC1B,YAAE,KAAK;AAAA,QACT;AAAA,MACF;AAEA,UAAI,EAAE,KAAK,sBAAsB;AAC/B,eAAO;AAAA,MACT;AAEA,aAAO,SAAS,SAAS,OAAO,QAAQ,CAAC;AAAA,IAC3C,CAAC;AAAA,EACL;AAAA,EAEA,MAAM,qBACJ,MACA,OACA,QACA,SACgD;AAChD,WAAO,oBAAoB,MAAM,OAAO,QAAQ,OAAO;AAAA,EACzD;AAAA,EAEA,wBAAwB,MAAmB,QAAwB,SAAS,MAAM,SAAS,MAAM,qBAAqB,OAAgC;AACpJ,WAAO,4BAA4B,MAAM,QAAQ,QAAQ,QAAQ,kBAAkB;AAAA,EACrF;AAAA,EAEA,YAAY,MAAmB,QAAwB,MAAuC;AAC5F,WAAO,kBAAkB,MAAM,QAAQ,IAAI;AAAA,EAC7C;AAAA,EAEA,iBAAiB,SAAwB,MAA+D;AACtG,WAAO,kBAAkB,SAAS,IAAI;AAAA,EACxC;AAAA,EAEA,YAAY,QAAqB,MAAgH;AAC/I,WAAO,YAAY,QAAQ,IAAI;AAAA,EACjC;AAGF;;;ACpIO,SAAS,wBAAwB,GAAwB,GAAwB;AACpF,MAAK,CAAC,KAAK,KAAO,KAAK,CAAC,GAAI;AACxB,WAAO;AAAA,EACX;AACA,MAAI,KAAK,GAAG;AACR,WAAO,EAAE,aAAa,EAAE,aAAa,EAAE,YAAY,EAAE;AAAA,EACzD;AACA,SAAO;AACX;AAEO,SAAS,mBAAmB,GAAmB,GAAmB;AACrE,MAAK,CAAC,KAAK,KAAO,KAAK,CAAC,GAAI;AACxB,WAAO;AAAA,EACX;AACA,MAAI,KAAK,GAAG;AACR,WAAO,EAAE,YAAY,EAAE,YAAY,EAAE,aAAa,EAAE,aAAa,EAAE,YAAY,EAAE;AAAA,EACrF;AACA,SAAO;AACX;;;ACjBA,eAAS,mBAAmB,KAAK;AASjC,SAAS,OAAO,iBAA+B;AAC7C,QAAM,MAAM,aAAK,WAAW,GAAG,GAAG,GAAG,CAAC;AACtC,eAAK,cAAc,KAAK,KAAK,eAAe;AAC5C,SAAO,aAAK,WAAW,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAC/C;AAQO,IAAM,gBAAN,MAAoB;AAAA,EAYzB,YACW,IACA,UAGA,uBAUA,sBAIT,gBACA;AAnBS;AACA;AAGA;AAUA;AAMT,SAAK,WAAW;AAAA,EAClB;AAAA,EAjCQ;AAAA,EACA,YAAmC,CAAC;AAAA,EACpC,YAAmC,CAAC;AAAA,EACpC,aAAa,aAAK,OAAO;AAAA,EACzB,gBAAgB,aAAK,OAAO;AAAA,EAEpC;AAAA,EAEA;AAAA,EACA,QAAQ;AAAA,EA0BR,IAAI,iBAA4C;AAC9C,QAAI,KAAK,UAAU;AACjB,aAAO,KAAK,oBAAoB,KAAK,QAAQ;AAAA,IAC/C;AAAA,EACF;AAAA,EAEA,IAAI,YAA6B;AAC/B,WAAO,KAAK;AAAA,EACd;AAAA,EAGA,MAAM,aAAa,IAAyC;AAC1D,UAAM,SAAS,KAAK;AACpB,QAAI,QAAQ;AACV,YAAM,UAAU,MAAM,KAAK;AAAA,QACzB,KAAK,oBAAoB,MAAM;AAAA,QAC/B;AAAA,MACF;AACA,UAAI,WAAW,QAAW;AACxB,aAAK,SAAU,YAAY;AAAA,MAC7B;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,oBAAoB,OAA0C;AAC5D,UAAM,OAAO,MAAM;AACnB,WAAO,EAAE,GAAG,OAAO,UAAU,KAAK,IAAI,KAAK;AAAA,EAC7C;AAAA,EAEA,IAAI,aAAa,OAA4B;AAC3C,UAAM,eAAe;AACrB,QAAI,gBAAgB,KAAK,eAAe;AACtC,WAAK,gBAAgB;AACrB,UAAI,OAAO;AACT,cAAM,SAAS,OAAO,MAAM,eAAe;AAC3C,YAAI,aAAK,IAAI,QAAQ,KAAK,UAAU,IAAI,YAAY;AAClD,eAAK,aAAa;AAClB,uBAAK;AAAA,YACH,KAAK;AAAA,YACL;AAAA,YACA,aAAK,OAAO;AAAA,YACZ,aAAK,WAAW,GAAG,GAAG,CAAC;AAAA,UACzB;AACA,eAAK,SAAS,KAAK,aAAa,EAAE,KAAK,CAAC,MAAM;AAC5C,iBAAK,YAAY,EAAE,OAAO,CAAC,MAAM,EAAE,QAAQ,MAAM;AACjD,iBAAK,YAAY,EAAE,OAAO,CAAC,MAAM,EAAE,QAAQ,MAAM;AAAA,UACnD,CAAC;AAAA,QACH;AAAA,MACF,OAAO;AACL,aAAK,YAAY,CAAC;AAClB,aAAK,YAAY,CAAC;AAAA,MACpB;AAAA,IACF;AAAA,EACF;AAAA,EAEA,iBACE,SACA,OACA,QACA,cACA;AACA,UAAM,YAAY,QAAQ;AAC1B,UAAM,aAAa,SAAS;AAC5B,UAAMC,SAAQ,aAAa,eAAe,KAAK;AAC/C,QAAI,cAAc,IAAI,aAAa,gBAAgB,OAAO;AAC1D,QAAI,cAAc,IAAI,aAAa,gBAAgB,OAAO;AAC1D,UAAM,MAAM,IAAI,UAAU,CAACA,QAAO,GAAG,GAAG,CAACA,QAAO,YAAY,UAAU,CAAC;AACvE,YAAQ,aAAa,GAAG;AACxB,YAAQ,YAAY,IAAIA;AAAA,EAC1B;AAAA,EAEA,aACE,SACA,OACA,QACA,QACA;AACA,QAAI,KAAK,eAAe;AACtB,YAAM,eAAe,KAAK;AAC1B,WAAK,iBAAiB,SAAS,OAAO,QAAQ,YAAY;AAC1D,YAAMA,SAAS,aAAa,eAAe,KAAK,SAAU;AAC1D,YAAM,EAAE,cAAc,IAAI;AAE1B,YAAM,MAAM,IAAIA;AAChB,cAAQ,YAAY;AACpB,iBAAW,SAAS,QAAQ;AAC1B,cAAM,IAAI,aAAK,cAAc,aAAK,OAAO,GAAG,OAAO,aAAa;AAChE,cAAM,CAAC,GAAG,CAAC,IAAI;AACf,gBAAQ,UAAU;AAClB,gBAAQ,QAAQ,GAAG,GAAG,KAAK,KAAK,GAAG,GAAG,IAAI,KAAK,EAAE;AACjD,gBAAQ,KAAK;AAAA,MACf;AACA,cAAQ,eAAe;AAAA,IACzB;AAAA,EACF;AAAA,EAEA,YACE,SACA,OACA,QACA;AACA,UAAM,EAAE,WAAW,UAAU,IAAI;AACjC,UAAM,EAAE,WAAW,kBAAkB,UAAU,gBAAgB,IAC7D,KAAK,eAAe,CAAC;AACvB,UAAM,EAAE,WAAW,eAAe,UAAU,aAAa,IACvD,KAAK,YAAY,CAAC;AAEpB,QAAI,KAAK,eAAe;AACtB,WAAK,iBAAiB,SAAS,OAAO,QAAQ,KAAK,aAAa;AAEhE,iBAAW,YAAY,WAAW;AAChC,cAAM,EAAE,MAAM,cAAc,IAAI;AAChC,YAAI,mBAAmB,UAAU,kBAAkB,kBAAkB;AACnE,kBAAQ,YAAY;AAAA,QACtB,WAAW,gBAAgB,UAAU,kBAAkB,eAAe;AACpE,kBAAQ,YAAY;AAAA,QACtB,OAAO;AACL,kBAAQ,YAAY;AAAA,QACtB;AACA,gBAAQ,KAAK,IAAI;AACjB,gBAAQ,cAAc;AACtB,gBAAQ,OAAO,IAAI;AAAA,MACrB;AAEA,iBAAW,YAAY,WAAW;AAChC,cAAM,EAAE,MAAM,cAAc,IAAI;AAEhC,YAAI,mBAAmB,UAAU,kBAAkB,kBAAkB;AACnE,kBAAQ,cAAc;AAAA,QACxB,WAAW,gBAAgB,UAAU,kBAAkB,eAAe;AACpE,kBAAQ,cAAc;AAAA,QACxB,OAAO;AACL,kBAAQ,cAAc;AAAA,QACxB;AACA,gBAAQ,OAAO,IAAI;AAAA,MACrB;AAEA,cAAQ,eAAe;AAAA,IACzB;AACA,SAAK,QAAQ;AAAA,EACf;AAAA,EAEA,MACE,SACA,GACA,GACA,OACA,QACS;AACT,UAAM,MAAM,KAAK,SAAS,SAAS,GAAG,GAAG,OAAO,MAAM;AACtD,QAAI,wBAAwB,KAAK,aAAa,GAAG,GAAG;AAClD,aAAO;AAAA,IACT;AACA,SAAK,cAAc;AACnB,SAAK,QAAQ;AACb,WAAO;AAAA,EACT;AAAA,EAEA,SAAkB;AAChB,QACE,wBAAwB,KAAK,aAAa,KAAK,QAAQ,KACvD,CAAC,KAAK,aACN;AACA,aAAO;AAAA,IACT;AACA,SAAK,WAAW,KAAK;AACrB,SAAK,QAAQ;AACb,WAAO;AAAA,EACT;AAAA,EAEQ,SACN,SACA,GACA,GACA,OACA,QACgC;AAChC,QAAI,KAAK,eAAe;AACtB,WAAK,iBAAiB,SAAS,OAAO,QAAQ,KAAK,aAAa;AAEhE,YAAM,EAAE,WAAW,UAAU,IAAI;AAEjC,eAAS,IAAI,UAAU,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AAC9C,cAAM,WAAW,UAAU;AAC3B,cAAM,EAAE,KAAK,IAAI;AACjB,YAAI,QAAQ,gBAAgB,MAAM,GAAG,CAAC,GAAG;AACvC,iBAAO;AAAA,YACL,UAAU;AAAA,YACV,WAAW,SAAS;AAAA,YACpB,eAAe,SAAS;AAAA,YACxB,WAAW;AAAA,UACb;AAAA,QACF;AAAA,MACF;AAEA,eAAS,IAAI,UAAU,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AAC9C,cAAM,WAAW,UAAU;AAC3B,cAAM,EAAE,KAAK,IAAI;AACjB,YAAI,QAAQ,cAAc,MAAM,GAAG,CAAC,GAAG;AACrC,iBAAO;AAAA,YACL,UAAU;AAAA,YACV,WAAW,SAAS;AAAA,YACpB,eAAe,SAAS;AAAA,YACxB,WAAW;AAAA,UACb;AAAA,QACF;AAAA,MACF;AAAA,IACF;AACA,YAAQ,eAAe;AAAA,EACzB;AACF;;;ACrRO,IAAM,kBAAkB;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAIO,SAAS,iBAAiB,eAAwB;AACvD,SAAO,IAAI,WAAW,aAAa;AACrC;",
  "names": ["obj", "returnValue", "proxy", "equals", "len", "scale", "equals", "add", "clone", "copy", "create", "equals", "exactEquals", "fromValues", "mul", "multiply", "rotateX", "rotateY", "rotateZ", "scale", "set", "str", "sub", "subtract", "create", "clone", "fromValues", "copy", "set", "add", "subtract", "multiply", "scale", "len", "rotateX", "rotateY", "rotateZ", "str", "exactEquals", "equals", "sub", "mul", "add", "ceil", "clone", "copy", "create", "cross", "dist", "distance", "div", "divide", "dot", "equals", "exactEquals", "floor", "forEach", "fromValues", "inverse", "len", "length", "lerp", "max", "min", "mul", "multiply", "negate", "normalize", "random", "round", "scale", "scaleAndAdd", "set", "sqrDist", "sqrLen", "squaredDistance", "squaredLength", "str", "sub", "subtract", "transformMat4", "transformQuat", "zero", "create", "clone", "fromValues", "copy", "set", "add", "subtract", "multiply", "divide", "ceil", "floor", "min", "max", "round", "scale", "scaleAndAdd", "distance", "squaredDistance", "length", "squaredLength", "negate", "inverse", "normalize", "len", "dot", "cross", "lerp", "random", "transformMat4", "transformQuat", "zero", "str", "exactEquals", "equals", "sub", "mul", "div", "dist", "sqrDist", "sqrLen", "forEach", "add", "angle", "ceil", "clone", "copy", "create", "cross", "dist", "distance", "div", "divide", "dot", "equals", "exactEquals", "floor", "forEach", "fromValues", "inverse", "len", "length", "lerp", "max", "min", "mul", "multiply", "negate", "normalize", "random", "rotate", "round", "scale", "scaleAndAdd", "set", "sqrDist", "sqrLen", "squaredDistance", "squaredLength", "str", "sub", "subtract", "transformMat3", "transformMat4", "zero", "create", "clone", "fromValues", "copy", "set", "add", "subtract", "multiply", "divide", "ceil", "floor", "min", "max", "round", "scale", "scaleAndAdd", "distance", "squaredDistance", "length", "squaredLength", "negate", "inverse", "normalize", "len", "dot", "cross", "lerp", "random", "transformMat3", "transformMat4", "rotate", "angle", "zero", "str", "exactEquals", "equals", "sub", "mul", "div", "dist", "sqrDist", "sqrLen", "forEach", "a", "b", "len", "length", "dir", "total", "polygon", "dist", "angle", "s", "angle", "dist", "line", "parts", "drawObjects", "ortho", "_p", "scale"]
}
